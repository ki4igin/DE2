
HelloWorld.elf:     file format elf32-littlenios2
HelloWorld.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x0000235c memsz 0x0000235c flags r-x
    LOAD off    0x0000337c vaddr 0x0000a37c paddr 0x0000a754 align 2**12
         filesz 0x000003d8 memsz 0x000003d8 flags rw-
    LOAD off    0x00003b2c vaddr 0x0000ab2c paddr 0x0000ab2c align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000020a0  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  0000a0c0  0000a0c0  000030c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000003d8  0000a37c  0000a754  0000337c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000018  0000ab2c  0000ab2c  00003b2c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00003754  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000448  00000000  00000000  00003780  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000066e  00000000  00000000  00003bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000727e  00000000  00000000  00004236  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000022f6  00000000  00000000  0000b4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005af0  00000000  00000000  0000d7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000006e0  00000000  00000000  0001329c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001549  00000000  00000000  0001397c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000020d4  00000000  00000000  00014ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  00016f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001f0  00000000  00000000  00016fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000188e6  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000a  00000000  00000000  000188e9  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000188f3  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000188f4  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000188f5  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000188f9  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000188fd  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00018901  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0001890a  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00018913  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  0001891c  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000010  00000000  00000000  00018920  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0002e27d  00000000  00000000  00018930  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
0000a0c0 l    d  .rodata	00000000 .rodata
0000a37c l    d  .rwdata	00000000 .rwdata
0000ab2c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008248 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a37c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008abc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000a45c l     O .rwdata	00000120 lcd_16207
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00008eb4 l     F .text	00000070 lcd_write_command
00008f24 l     F .text	000001b0 lcd_repaint_screen
0000a72c l     O .rwdata	00000004 colstart
000090d4 l     F .text	00000068 alt_lcd_16207_timeout
0000913c l     F .text	000000b8 lcd_clear_screen
000092dc l     F .text	0000009c lcd_scroll_up
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009958 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000099d4 l     F .text	00000078 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 ctype_.c
0000a1f9 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00008d04 g     F .text	00000044 alt_main
00008184 g     F .text	00000090 _puts_r
0000a754 g       *ABS*	00000000 __flash_rwdata_start
000080ec g     F .text	00000054 printf
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ab2c g     O .bss	00000004 errno
0000ab34 g     O .bss	00000004 alt_argv
00012724 g       *ABS*	00000000 _gp
00009db0 g     F .text	00000018 usleep
0000a5a4 g     O .rwdata	00000180 alt_fd_list
00009e6c g     F .text	00000070 alt_find_dev
0000a074 g     F .text	0000002c memcpy
00009a4c g     F .text	00000098 alt_io_redirect
00008214 g     F .text	00000014 puts
00008140 g     F .text	00000044 _printf_r
00008bf8 g     F .text	00000008 __udivsi3
0000a740 g     O .rwdata	00000004 alt_max_fd
0000a728 g     O .rwdata	00000004 _global_impure_ptr
0000ab44 g       *ABS*	00000000 __bss_end
00009d04 g     F .text	000000ac alt_tick
0000a750 g     O .rwdata	00000004 __ctype_ptr
00009cd0 g     F .text	00000034 alt_alarm_stop
0000a57c g     O .rwdata	00000028 alt_dev_null
00009954 g     F .text	00000004 alt_dcache_flush_all
0000a754 g       *ABS*	00000000 __ram_rwdata_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory
0000a738 g     O .rwdata	00000008 alt_dev_list
00008d48 g     F .text	00000110 write
0000a37c g       *ABS*	00000000 __ram_rodata_end
00008c00 g     F .text	00000008 __umodsi3
0000ab44 g       *ABS*	00000000 end
00009378 g     F .text	00000520 altera_avalon_lcd_16207_write
00010000 g       *ABS*	00000000 __alt_stack_pointer
000082c8 g     F .text	0000069c ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
0000ab3c g     O .bss	00000004 _alt_tick_rate
0000ab40 g     O .bss	00000004 _alt_nticks
00008e58 g     F .text	0000003c alt_sys_init
00008c08 g     F .text	00000038 __mulsi3
0000a37c g       *ABS*	00000000 __ram_rwdata_start
0000a0c0 g       *ABS*	00000000 __ram_rodata_start
00009f98 g     F .text	000000a0 alt_get_fd
00009dd0 g     F .text	0000009c alt_busy_sleep
0000a038 g     F .text	0000003c memcmp
0000ab44 g       *ABS*	00000000 __alt_stack_base
00009edc g     F .text	000000bc alt_find_file
00009960 g     F .text	00000070 alt_dev_llist_insert
00008988 g     F .text	000000bc __sfvwrite_small_dev
0000ab2c g       *ABS*	00000000 __bss_start
0000a0a0 g     F .text	00000020 memset
0000805c g     F .text	00000090 main
0000ab38 g     O .bss	00000004 alt_envp
000091f4 g     F .text	000000e8 altera_avalon_lcd_16207_init
0000a744 g     O .rwdata	00000004 alt_errno
00008b38 g     F .text	00000060 __divsi3
0000a0c0 g       *ABS*	00000000 __flash_rodata_start
00008e94 g     F .text	00000020 alt_irq_init
00009c68 g     F .text	00000068 alt_release_fd
00008a44 g     F .text	00000078 _write_r
0000a724 g     O .rwdata	00000004 _impure_ptr
0000ab30 g     O .bss	00000004 alt_argc
00009898 g     F .text	00000028 altera_avalon_lcd_16207_write_fd
0000a730 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a754 g       *ABS*	00000000 _edata
0000ab44 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009dc8 g     F .text	00000008 altera_nios2_qsys_irq_init
0000800c g       .entry	00000000 exit
00008b98 g     F .text	00000060 __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000a0f8 g     O .rodata	00000101 _ctype_
0000800c g       .entry	00000000 _exit
000098c0 g     F .text	00000094 alt_alarm_start
00008228 g     F .text	00000020 strlen
00009ae4 g     F .text	00000184 open
000099d0 g     F .text	00000004 alt_icache_flush_all
00008964 g     F .text	00000024 __vfprintf_internal
0000a748 g     O .rwdata	00000008 alt_alarm_list
00008c40 g     F .text	000000c4 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d689c914 	ori	gp,gp,10020
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10aacb14 	ori	r2,r2,43820

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18ead114 	ori	r3,r3,43844

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008c400 	call	8c40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008d040 	call	8d04 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"

int main()
{
    805c:	defffc04 	addi	sp,sp,-16
    8060:	dfc00315 	stw	ra,12(sp)
    8064:	df000215 	stw	fp,8(sp)
    8068:	df000204 	addi	fp,sp,8
  printf("Hello from Nios II!\n");
    806c:	01000074 	movhi	r4,1
    8070:	21283004 	addi	r4,r4,-24384
    8074:	00082140 	call	8214 <puts>

  while(1)
  {
      int leds = 0x1;
    8078:	00800044 	movi	r2,1
    807c:	e0bfff15 	stw	r2,-4(fp)
      int i = 0;
    8080:	e03ffe15 	stw	zero,-8(fp)
      while(1)
      {
          IOWR_ALTERA_AVALON_PIO_DATA(PIO_BASE, leds);
    8084:	00c00074 	movhi	r3,1
    8088:	18c20004 	addi	r3,r3,2048
    808c:	e0bfff17 	ldw	r2,-4(fp)
    8090:	18800035 	stwio	r2,0(r3)
          for (i=0; i<(ALT_CPU_CPU_FREQ/500); i++);    // Delay
    8094:	e03ffe15 	stw	zero,-8(fp)
    8098:	00000306 	br	80a8 <main+0x4c>
    809c:	e0bffe17 	ldw	r2,-8(fp)
    80a0:	10800044 	addi	r2,r2,1
    80a4:	e0bffe15 	stw	r2,-8(fp)
    80a8:	e0fffe17 	ldw	r3,-8(fp)
    80ac:	008000b4 	movhi	r2,2
    80b0:	10a1a7c4 	addi	r2,r2,-31073
    80b4:	10fff92e 	bgeu	r2,r3,809c <main+0x40>
          // Johnson code counter on leds
          leds = ((leds<<1) & 0xFFFE) | (!(leds>>15) & 0x1);
    80b8:	e0bfff17 	ldw	r2,-4(fp)
    80bc:	1085883a 	add	r2,r2,r2
    80c0:	10ffff8c 	andi	r3,r2,65534
    80c4:	e0bfff17 	ldw	r2,-4(fp)
    80c8:	1005d3fa 	srai	r2,r2,15
    80cc:	1005003a 	cmpeq	r2,r2,zero
    80d0:	1884b03a 	or	r2,r3,r2
    80d4:	e0bfff15 	stw	r2,-4(fp)
          printf("%d ", leds);
    80d8:	01000074 	movhi	r4,1
    80dc:	21283504 	addi	r4,r4,-24364
    80e0:	e17fff17 	ldw	r5,-4(fp)
    80e4:	00080ec0 	call	80ec <printf>
      }
    80e8:	003fe606 	br	8084 <main+0x28>

000080ec <printf>:
    80ec:	defffb04 	addi	sp,sp,-20
    80f0:	dfc00115 	stw	ra,4(sp)
    80f4:	d9400215 	stw	r5,8(sp)
    80f8:	d9800315 	stw	r6,12(sp)
    80fc:	d9c00415 	stw	r7,16(sp)
    8100:	00800074 	movhi	r2,1
    8104:	10a9c904 	addi	r2,r2,-22748
    8108:	11400017 	ldw	r5,0(r2)
    810c:	d8800204 	addi	r2,sp,8
    8110:	d8800015 	stw	r2,0(sp)
    8114:	29c00217 	ldw	r7,8(r5)
    8118:	100d883a 	mov	r6,r2
    811c:	00800074 	movhi	r2,1
    8120:	10a26204 	addi	r2,r2,-30328
    8124:	200b883a 	mov	r5,r4
    8128:	38800115 	stw	r2,4(r7)
    812c:	3809883a 	mov	r4,r7
    8130:	00089640 	call	8964 <__vfprintf_internal>
    8134:	dfc00117 	ldw	ra,4(sp)
    8138:	dec00504 	addi	sp,sp,20
    813c:	f800283a 	ret

00008140 <_printf_r>:
    8140:	defffc04 	addi	sp,sp,-16
    8144:	dfc00115 	stw	ra,4(sp)
    8148:	d9800215 	stw	r6,8(sp)
    814c:	d9c00315 	stw	r7,12(sp)
    8150:	22000217 	ldw	r8,8(r4)
    8154:	d8800204 	addi	r2,sp,8
    8158:	d8800015 	stw	r2,0(sp)
    815c:	100f883a 	mov	r7,r2
    8160:	00800074 	movhi	r2,1
    8164:	10a26204 	addi	r2,r2,-30328
    8168:	280d883a 	mov	r6,r5
    816c:	40800115 	stw	r2,4(r8)
    8170:	400b883a 	mov	r5,r8
    8174:	00082c80 	call	82c8 <___vfprintf_internal_r>
    8178:	dfc00117 	ldw	ra,4(sp)
    817c:	dec00404 	addi	sp,sp,16
    8180:	f800283a 	ret

00008184 <_puts_r>:
    8184:	defffd04 	addi	sp,sp,-12
    8188:	dc000015 	stw	r16,0(sp)
    818c:	2021883a 	mov	r16,r4
    8190:	2809883a 	mov	r4,r5
    8194:	dfc00215 	stw	ra,8(sp)
    8198:	dc400115 	stw	r17,4(sp)
    819c:	2823883a 	mov	r17,r5
    81a0:	00082280 	call	8228 <strlen>
    81a4:	80c00217 	ldw	r3,8(r16)
    81a8:	02000074 	movhi	r8,1
    81ac:	42226204 	addi	r8,r8,-30328
    81b0:	880d883a 	mov	r6,r17
    81b4:	100f883a 	mov	r7,r2
    81b8:	8009883a 	mov	r4,r16
    81bc:	180b883a 	mov	r5,r3
    81c0:	1a000115 	stw	r8,4(r3)
    81c4:	403ee83a 	callr	r8
    81c8:	047fffc4 	movi	r17,-1
    81cc:	8009883a 	mov	r4,r16
    81d0:	01800074 	movhi	r6,1
    81d4:	31a83604 	addi	r6,r6,-24360
    81d8:	01c00044 	movi	r7,1
    81dc:	1440071e 	bne	r2,r17,81fc <_puts_r+0x78>
    81e0:	00ffffc4 	movi	r3,-1
    81e4:	1805883a 	mov	r2,r3
    81e8:	dfc00217 	ldw	ra,8(sp)
    81ec:	dc400117 	ldw	r17,4(sp)
    81f0:	dc000017 	ldw	r16,0(sp)
    81f4:	dec00304 	addi	sp,sp,12
    81f8:	f800283a 	ret
    81fc:	81400217 	ldw	r5,8(r16)
    8200:	28c00117 	ldw	r3,4(r5)
    8204:	183ee83a 	callr	r3
    8208:	0007883a 	mov	r3,zero
    820c:	147ff51e 	bne	r2,r17,81e4 <_puts_r+0x60>
    8210:	003ff306 	br	81e0 <_puts_r+0x5c>

00008214 <puts>:
    8214:	00800074 	movhi	r2,1
    8218:	10a9c904 	addi	r2,r2,-22748
    821c:	200b883a 	mov	r5,r4
    8220:	11000017 	ldw	r4,0(r2)
    8224:	00081841 	jmpi	8184 <_puts_r>

00008228 <strlen>:
    8228:	20800007 	ldb	r2,0(r4)
    822c:	10000526 	beq	r2,zero,8244 <strlen+0x1c>
    8230:	2007883a 	mov	r3,r4
    8234:	18c00044 	addi	r3,r3,1
    8238:	18800007 	ldb	r2,0(r3)
    823c:	103ffd1e 	bne	r2,zero,8234 <strlen+0xc>
    8240:	1905c83a 	sub	r2,r3,r4
    8244:	f800283a 	ret

00008248 <print_repeat>:
    8248:	defffb04 	addi	sp,sp,-20
    824c:	dc800315 	stw	r18,12(sp)
    8250:	dc400215 	stw	r17,8(sp)
    8254:	dc000115 	stw	r16,4(sp)
    8258:	dfc00415 	stw	ra,16(sp)
    825c:	2025883a 	mov	r18,r4
    8260:	2823883a 	mov	r17,r5
    8264:	3821883a 	mov	r16,r7
    8268:	d9800005 	stb	r6,0(sp)
    826c:	9009883a 	mov	r4,r18
    8270:	880b883a 	mov	r5,r17
    8274:	d80d883a 	mov	r6,sp
    8278:	01c00044 	movi	r7,1
    827c:	04000b0e 	bge	zero,r16,82ac <print_repeat+0x64>
    8280:	88c00117 	ldw	r3,4(r17)
    8284:	843fffc4 	addi	r16,r16,-1
    8288:	183ee83a 	callr	r3
    828c:	103ff726 	beq	r2,zero,826c <print_repeat+0x24>
    8290:	00bfffc4 	movi	r2,-1
    8294:	dfc00417 	ldw	ra,16(sp)
    8298:	dc800317 	ldw	r18,12(sp)
    829c:	dc400217 	ldw	r17,8(sp)
    82a0:	dc000117 	ldw	r16,4(sp)
    82a4:	dec00504 	addi	sp,sp,20
    82a8:	f800283a 	ret
    82ac:	0005883a 	mov	r2,zero
    82b0:	dfc00417 	ldw	ra,16(sp)
    82b4:	dc800317 	ldw	r18,12(sp)
    82b8:	dc400217 	ldw	r17,8(sp)
    82bc:	dc000117 	ldw	r16,4(sp)
    82c0:	dec00504 	addi	sp,sp,20
    82c4:	f800283a 	ret

000082c8 <___vfprintf_internal_r>:
    82c8:	deffe304 	addi	sp,sp,-116
    82cc:	df001b15 	stw	fp,108(sp)
    82d0:	ddc01a15 	stw	r23,104(sp)
    82d4:	dd001715 	stw	r20,92(sp)
    82d8:	dc801515 	stw	r18,84(sp)
    82dc:	dc001315 	stw	r16,76(sp)
    82e0:	dfc01c15 	stw	ra,112(sp)
    82e4:	dd801915 	stw	r22,100(sp)
    82e8:	dd401815 	stw	r21,96(sp)
    82ec:	dcc01615 	stw	r19,88(sp)
    82f0:	dc401415 	stw	r17,80(sp)
    82f4:	d9001015 	stw	r4,64(sp)
    82f8:	2829883a 	mov	r20,r5
    82fc:	d9c01115 	stw	r7,68(sp)
    8300:	3025883a 	mov	r18,r6
    8304:	0021883a 	mov	r16,zero
    8308:	d8000f15 	stw	zero,60(sp)
    830c:	d8000e15 	stw	zero,56(sp)
    8310:	0039883a 	mov	fp,zero
    8314:	d8000915 	stw	zero,36(sp)
    8318:	d8000d15 	stw	zero,52(sp)
    831c:	d8000c15 	stw	zero,48(sp)
    8320:	d8000b15 	stw	zero,44(sp)
    8324:	002f883a 	mov	r23,zero
    8328:	91400003 	ldbu	r5,0(r18)
    832c:	01c00044 	movi	r7,1
    8330:	94800044 	addi	r18,r18,1
    8334:	29003fcc 	andi	r4,r5,255
    8338:	2100201c 	xori	r4,r4,128
    833c:	213fe004 	addi	r4,r4,-128
    8340:	20001526 	beq	r4,zero,8398 <___vfprintf_internal_r+0xd0>
    8344:	81c03526 	beq	r16,r7,841c <___vfprintf_internal_r+0x154>
    8348:	3c002016 	blt	r7,r16,83cc <___vfprintf_internal_r+0x104>
    834c:	803ff61e 	bne	r16,zero,8328 <___vfprintf_internal_r+0x60>
    8350:	00800944 	movi	r2,37
    8354:	2081501e 	bne	r4,r2,8898 <___vfprintf_internal_r+0x5d0>
    8358:	073fffc4 	movi	fp,-1
    835c:	00800284 	movi	r2,10
    8360:	d9c00c15 	stw	r7,48(sp)
    8364:	d8000f15 	stw	zero,60(sp)
    8368:	d8000e15 	stw	zero,56(sp)
    836c:	df000915 	stw	fp,36(sp)
    8370:	d8800d15 	stw	r2,52(sp)
    8374:	d8000b15 	stw	zero,44(sp)
    8378:	91400003 	ldbu	r5,0(r18)
    837c:	3821883a 	mov	r16,r7
    8380:	94800044 	addi	r18,r18,1
    8384:	29003fcc 	andi	r4,r5,255
    8388:	2100201c 	xori	r4,r4,128
    838c:	213fe004 	addi	r4,r4,-128
    8390:	01c00044 	movi	r7,1
    8394:	203feb1e 	bne	r4,zero,8344 <___vfprintf_internal_r+0x7c>
    8398:	b805883a 	mov	r2,r23
    839c:	dfc01c17 	ldw	ra,112(sp)
    83a0:	df001b17 	ldw	fp,108(sp)
    83a4:	ddc01a17 	ldw	r23,104(sp)
    83a8:	dd801917 	ldw	r22,100(sp)
    83ac:	dd401817 	ldw	r21,96(sp)
    83b0:	dd001717 	ldw	r20,92(sp)
    83b4:	dcc01617 	ldw	r19,88(sp)
    83b8:	dc801517 	ldw	r18,84(sp)
    83bc:	dc401417 	ldw	r17,80(sp)
    83c0:	dc001317 	ldw	r16,76(sp)
    83c4:	dec01d04 	addi	sp,sp,116
    83c8:	f800283a 	ret
    83cc:	00800084 	movi	r2,2
    83d0:	80801726 	beq	r16,r2,8430 <___vfprintf_internal_r+0x168>
    83d4:	008000c4 	movi	r2,3
    83d8:	80bfd31e 	bne	r16,r2,8328 <___vfprintf_internal_r+0x60>
    83dc:	2c7ff404 	addi	r17,r5,-48
    83e0:	88c03fcc 	andi	r3,r17,255
    83e4:	00800244 	movi	r2,9
    83e8:	10c02136 	bltu	r2,r3,8470 <___vfprintf_internal_r+0x1a8>
    83ec:	d8c00917 	ldw	r3,36(sp)
    83f0:	18012716 	blt	r3,zero,8890 <___vfprintf_internal_r+0x5c8>
    83f4:	d9000917 	ldw	r4,36(sp)
    83f8:	01400284 	movi	r5,10
    83fc:	0008c080 	call	8c08 <__mulsi3>
    8400:	1007883a 	mov	r3,r2
    8404:	88803fcc 	andi	r2,r17,255
    8408:	1080201c 	xori	r2,r2,128
    840c:	10bfe004 	addi	r2,r2,-128
    8410:	1887883a 	add	r3,r3,r2
    8414:	d8c00915 	stw	r3,36(sp)
    8418:	003fc306 	br	8328 <___vfprintf_internal_r+0x60>
    841c:	00800c04 	movi	r2,48
    8420:	2080b326 	beq	r4,r2,86f0 <___vfprintf_internal_r+0x428>
    8424:	00800944 	movi	r2,37
    8428:	20812726 	beq	r4,r2,88c8 <___vfprintf_internal_r+0x600>
    842c:	04000084 	movi	r16,2
    8430:	2c7ff404 	addi	r17,r5,-48
    8434:	88c03fcc 	andi	r3,r17,255
    8438:	00800244 	movi	r2,9
    843c:	10c00a36 	bltu	r2,r3,8468 <___vfprintf_internal_r+0x1a0>
    8440:	e000b416 	blt	fp,zero,8714 <___vfprintf_internal_r+0x44c>
    8444:	e009883a 	mov	r4,fp
    8448:	01400284 	movi	r5,10
    844c:	0008c080 	call	8c08 <__mulsi3>
    8450:	1007883a 	mov	r3,r2
    8454:	88803fcc 	andi	r2,r17,255
    8458:	1080201c 	xori	r2,r2,128
    845c:	10bfe004 	addi	r2,r2,-128
    8460:	18b9883a 	add	fp,r3,r2
    8464:	003fb006 	br	8328 <___vfprintf_internal_r+0x60>
    8468:	00800b84 	movi	r2,46
    846c:	2080a326 	beq	r4,r2,86fc <___vfprintf_internal_r+0x434>
    8470:	00801b04 	movi	r2,108
    8474:	2080a326 	beq	r4,r2,8704 <___vfprintf_internal_r+0x43c>
    8478:	d8c00917 	ldw	r3,36(sp)
    847c:	1800a716 	blt	r3,zero,871c <___vfprintf_internal_r+0x454>
    8480:	d8000f15 	stw	zero,60(sp)
    8484:	28bfea04 	addi	r2,r5,-88
    8488:	10803fcc 	andi	r2,r2,255
    848c:	00c00804 	movi	r3,32
    8490:	18802836 	bltu	r3,r2,8534 <___vfprintf_internal_r+0x26c>
    8494:	1085883a 	add	r2,r2,r2
    8498:	1085883a 	add	r2,r2,r2
    849c:	00c00074 	movhi	r3,1
    84a0:	18e12c04 	addi	r3,r3,-31568
    84a4:	10c5883a 	add	r2,r2,r3
    84a8:	11000017 	ldw	r4,0(r2)
    84ac:	2000683a 	jmp	r4
    84b0:	0000853c 	xorhi	zero,zero,532
    84b4:	00008534 	movhi	zero,532
    84b8:	00008534 	movhi	zero,532
    84bc:	00008534 	movhi	zero,532
    84c0:	00008534 	movhi	zero,532
    84c4:	00008534 	movhi	zero,532
    84c8:	00008534 	movhi	zero,532
    84cc:	00008534 	movhi	zero,532
    84d0:	00008534 	movhi	zero,532
    84d4:	00008534 	movhi	zero,532
    84d8:	00008534 	movhi	zero,532
    84dc:	00008768 	cmpgeui	zero,zero,541
    84e0:	00008550 	cmplti	zero,zero,533
    84e4:	00008534 	movhi	zero,532
    84e8:	00008534 	movhi	zero,532
    84ec:	00008534 	movhi	zero,532
    84f0:	00008534 	movhi	zero,532
    84f4:	00008550 	cmplti	zero,zero,533
    84f8:	00008534 	movhi	zero,532
    84fc:	00008534 	movhi	zero,532
    8500:	00008534 	movhi	zero,532
    8504:	00008534 	movhi	zero,532
    8508:	00008534 	movhi	zero,532
    850c:	000087d0 	cmplti	zero,zero,543
    8510:	00008534 	movhi	zero,532
    8514:	00008534 	movhi	zero,532
    8518:	00008534 	movhi	zero,532
    851c:	000087e0 	cmpeqi	zero,zero,543
    8520:	00008534 	movhi	zero,532
    8524:	000086b4 	movhi	zero,538
    8528:	00008534 	movhi	zero,532
    852c:	00008534 	movhi	zero,532
    8530:	000086ac 	andhi	zero,zero,538
    8534:	0021883a 	mov	r16,zero
    8538:	003f7b06 	br	8328 <___vfprintf_internal_r+0x60>
    853c:	00c00404 	movi	r3,16
    8540:	00800044 	movi	r2,1
    8544:	d8c00d15 	stw	r3,52(sp)
    8548:	d8000c15 	stw	zero,48(sp)
    854c:	d8800b15 	stw	r2,44(sp)
    8550:	d8c00e17 	ldw	r3,56(sp)
    8554:	1805003a 	cmpeq	r2,r3,zero
    8558:	10005a1e 	bne	r2,zero,86c4 <___vfprintf_internal_r+0x3fc>
    855c:	d8800c17 	ldw	r2,48(sp)
    8560:	1000781e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x47c>
    8564:	d8801117 	ldw	r2,68(sp)
    8568:	d8000a15 	stw	zero,40(sp)
    856c:	14400017 	ldw	r17,0(r2)
    8570:	11c00104 	addi	r7,r2,4
    8574:	d9c01115 	stw	r7,68(sp)
    8578:	88005a26 	beq	r17,zero,86e4 <___vfprintf_internal_r+0x41c>
    857c:	d8c00b17 	ldw	r3,44(sp)
    8580:	dcc00044 	addi	r19,sp,1
    8584:	05800244 	movi	r22,9
    8588:	182b003a 	cmpeq	r21,r3,zero
    858c:	dcc01215 	stw	r19,72(sp)
    8590:	00000506 	br	85a8 <___vfprintf_internal_r+0x2e0>
    8594:	21000c04 	addi	r4,r4,48
    8598:	99000005 	stb	r4,0(r19)
    859c:	9cc00044 	addi	r19,r19,1
    85a0:	80000f26 	beq	r16,zero,85e0 <___vfprintf_internal_r+0x318>
    85a4:	8023883a 	mov	r17,r16
    85a8:	d9400d17 	ldw	r5,52(sp)
    85ac:	8809883a 	mov	r4,r17
    85b0:	0008bf80 	call	8bf8 <__udivsi3>
    85b4:	d9000d17 	ldw	r4,52(sp)
    85b8:	100b883a 	mov	r5,r2
    85bc:	1021883a 	mov	r16,r2
    85c0:	0008c080 	call	8c08 <__mulsi3>
    85c4:	8889c83a 	sub	r4,r17,r2
    85c8:	b13ff20e 	bge	r22,r4,8594 <___vfprintf_internal_r+0x2cc>
    85cc:	a8009f1e 	bne	r21,zero,884c <___vfprintf_internal_r+0x584>
    85d0:	21000dc4 	addi	r4,r4,55
    85d4:	99000005 	stb	r4,0(r19)
    85d8:	9cc00044 	addi	r19,r19,1
    85dc:	803ff11e 	bne	r16,zero,85a4 <___vfprintf_internal_r+0x2dc>
    85e0:	d8801217 	ldw	r2,72(sp)
    85e4:	98a3c83a 	sub	r17,r19,r2
    85e8:	d8c00917 	ldw	r3,36(sp)
    85ec:	1c4bc83a 	sub	r5,r3,r17
    85f0:	0140130e 	bge	zero,r5,8640 <___vfprintf_internal_r+0x378>
    85f4:	d8c00044 	addi	r3,sp,1
    85f8:	18800804 	addi	r2,r3,32
    85fc:	9880102e 	bgeu	r19,r2,8640 <___vfprintf_internal_r+0x378>
    8600:	00800c04 	movi	r2,48
    8604:	28ffffc4 	addi	r3,r5,-1
    8608:	98800005 	stb	r2,0(r19)
    860c:	99000044 	addi	r4,r19,1
    8610:	00c0080e 	bge	zero,r3,8634 <___vfprintf_internal_r+0x36c>
    8614:	d8c00044 	addi	r3,sp,1
    8618:	18800804 	addi	r2,r3,32
    861c:	2080052e 	bgeu	r4,r2,8634 <___vfprintf_internal_r+0x36c>
    8620:	00800c04 	movi	r2,48
    8624:	20800005 	stb	r2,0(r4)
    8628:	21000044 	addi	r4,r4,1
    862c:	9945883a 	add	r2,r19,r5
    8630:	20bff81e 	bne	r4,r2,8614 <___vfprintf_internal_r+0x34c>
    8634:	d8801217 	ldw	r2,72(sp)
    8638:	2027883a 	mov	r19,r4
    863c:	20a3c83a 	sub	r17,r4,r2
    8640:	d8c00a17 	ldw	r3,40(sp)
    8644:	1c45883a 	add	r2,r3,r17
    8648:	e0a1c83a 	sub	r16,fp,r2
    864c:	d8800f17 	ldw	r2,60(sp)
    8650:	10008026 	beq	r2,zero,8854 <___vfprintf_internal_r+0x58c>
    8654:	1805003a 	cmpeq	r2,r3,zero
    8658:	1000ae26 	beq	r2,zero,8914 <___vfprintf_internal_r+0x64c>
    865c:	0400a516 	blt	zero,r16,88f4 <___vfprintf_internal_r+0x62c>
    8660:	b805883a 	mov	r2,r23
    8664:	0440950e 	bge	zero,r17,88bc <___vfprintf_internal_r+0x5f4>
    8668:	102f883a 	mov	r23,r2
    866c:	1461883a 	add	r16,r2,r17
    8670:	00000206 	br	867c <___vfprintf_internal_r+0x3b4>
    8674:	bdc00044 	addi	r23,r23,1
    8678:	85ffae26 	beq	r16,r23,8534 <___vfprintf_internal_r+0x26c>
    867c:	9cffffc4 	addi	r19,r19,-1
    8680:	98800003 	ldbu	r2,0(r19)
    8684:	a0c00117 	ldw	r3,4(r20)
    8688:	d9001017 	ldw	r4,64(sp)
    868c:	d8800005 	stb	r2,0(sp)
    8690:	a00b883a 	mov	r5,r20
    8694:	d80d883a 	mov	r6,sp
    8698:	01c00044 	movi	r7,1
    869c:	183ee83a 	callr	r3
    86a0:	103ff426 	beq	r2,zero,8674 <___vfprintf_internal_r+0x3ac>
    86a4:	05ffffc4 	movi	r23,-1
    86a8:	003f3b06 	br	8398 <___vfprintf_internal_r+0xd0>
    86ac:	00c00404 	movi	r3,16
    86b0:	d8c00d15 	stw	r3,52(sp)
    86b4:	d8000c15 	stw	zero,48(sp)
    86b8:	d8c00e17 	ldw	r3,56(sp)
    86bc:	1805003a 	cmpeq	r2,r3,zero
    86c0:	103fa626 	beq	r2,zero,855c <___vfprintf_internal_r+0x294>
    86c4:	d8c00c17 	ldw	r3,48(sp)
    86c8:	1800171e 	bne	r3,zero,8728 <___vfprintf_internal_r+0x460>
    86cc:	d8c01117 	ldw	r3,68(sp)
    86d0:	d8000a15 	stw	zero,40(sp)
    86d4:	1c400017 	ldw	r17,0(r3)
    86d8:	19c00104 	addi	r7,r3,4
    86dc:	d9c01115 	stw	r7,68(sp)
    86e0:	883fa61e 	bne	r17,zero,857c <___vfprintf_internal_r+0x2b4>
    86e4:	dcc00044 	addi	r19,sp,1
    86e8:	dcc01215 	stw	r19,72(sp)
    86ec:	003fbe06 	br	85e8 <___vfprintf_internal_r+0x320>
    86f0:	04000084 	movi	r16,2
    86f4:	d9c00f15 	stw	r7,60(sp)
    86f8:	003f0b06 	br	8328 <___vfprintf_internal_r+0x60>
    86fc:	040000c4 	movi	r16,3
    8700:	003f0906 	br	8328 <___vfprintf_internal_r+0x60>
    8704:	00800044 	movi	r2,1
    8708:	040000c4 	movi	r16,3
    870c:	d8800e15 	stw	r2,56(sp)
    8710:	003f0506 	br	8328 <___vfprintf_internal_r+0x60>
    8714:	0007883a 	mov	r3,zero
    8718:	003f4e06 	br	8454 <___vfprintf_internal_r+0x18c>
    871c:	00800044 	movi	r2,1
    8720:	d8800915 	stw	r2,36(sp)
    8724:	003f5706 	br	8484 <___vfprintf_internal_r+0x1bc>
    8728:	d8801117 	ldw	r2,68(sp)
    872c:	14400017 	ldw	r17,0(r2)
    8730:	10800104 	addi	r2,r2,4
    8734:	d8801115 	stw	r2,68(sp)
    8738:	88000716 	blt	r17,zero,8758 <___vfprintf_internal_r+0x490>
    873c:	d8000a15 	stw	zero,40(sp)
    8740:	003f8d06 	br	8578 <___vfprintf_internal_r+0x2b0>
    8744:	d8c01117 	ldw	r3,68(sp)
    8748:	1c400017 	ldw	r17,0(r3)
    874c:	18c00104 	addi	r3,r3,4
    8750:	d8c01115 	stw	r3,68(sp)
    8754:	883ff90e 	bge	r17,zero,873c <___vfprintf_internal_r+0x474>
    8758:	00800044 	movi	r2,1
    875c:	0463c83a 	sub	r17,zero,r17
    8760:	d8800a15 	stw	r2,40(sp)
    8764:	003f8406 	br	8578 <___vfprintf_internal_r+0x2b0>
    8768:	04000044 	movi	r16,1
    876c:	8700080e 	bge	r16,fp,8790 <___vfprintf_internal_r+0x4c8>
    8770:	d9001017 	ldw	r4,64(sp)
    8774:	a00b883a 	mov	r5,r20
    8778:	01800804 	movi	r6,32
    877c:	e1ffffc4 	addi	r7,fp,-1
    8780:	00082480 	call	8248 <print_repeat>
    8784:	103fc71e 	bne	r2,zero,86a4 <___vfprintf_internal_r+0x3dc>
    8788:	e5c5883a 	add	r2,fp,r23
    878c:	15ffffc4 	addi	r23,r2,-1
    8790:	d8c01117 	ldw	r3,68(sp)
    8794:	d9001017 	ldw	r4,64(sp)
    8798:	800f883a 	mov	r7,r16
    879c:	18800017 	ldw	r2,0(r3)
    87a0:	a0c00117 	ldw	r3,4(r20)
    87a4:	a00b883a 	mov	r5,r20
    87a8:	d8800005 	stb	r2,0(sp)
    87ac:	d80d883a 	mov	r6,sp
    87b0:	183ee83a 	callr	r3
    87b4:	103fbb1e 	bne	r2,zero,86a4 <___vfprintf_internal_r+0x3dc>
    87b8:	d8801117 	ldw	r2,68(sp)
    87bc:	bdc00044 	addi	r23,r23,1
    87c0:	0021883a 	mov	r16,zero
    87c4:	10800104 	addi	r2,r2,4
    87c8:	d8801115 	stw	r2,68(sp)
    87cc:	003ed606 	br	8328 <___vfprintf_internal_r+0x60>
    87d0:	00800204 	movi	r2,8
    87d4:	d8800d15 	stw	r2,52(sp)
    87d8:	d8000c15 	stw	zero,48(sp)
    87dc:	003fb606 	br	86b8 <___vfprintf_internal_r+0x3f0>
    87e0:	d8c01117 	ldw	r3,68(sp)
    87e4:	1cc00017 	ldw	r19,0(r3)
    87e8:	9809883a 	mov	r4,r19
    87ec:	00082280 	call	8228 <strlen>
    87f0:	e0a1c83a 	sub	r16,fp,r2
    87f4:	1023883a 	mov	r17,r2
    87f8:	0400070e 	bge	zero,r16,8818 <___vfprintf_internal_r+0x550>
    87fc:	d9001017 	ldw	r4,64(sp)
    8800:	a00b883a 	mov	r5,r20
    8804:	01800804 	movi	r6,32
    8808:	800f883a 	mov	r7,r16
    880c:	00082480 	call	8248 <print_repeat>
    8810:	103fa41e 	bne	r2,zero,86a4 <___vfprintf_internal_r+0x3dc>
    8814:	bc2f883a 	add	r23,r23,r16
    8818:	a0c00117 	ldw	r3,4(r20)
    881c:	d9001017 	ldw	r4,64(sp)
    8820:	980d883a 	mov	r6,r19
    8824:	a00b883a 	mov	r5,r20
    8828:	880f883a 	mov	r7,r17
    882c:	183ee83a 	callr	r3
    8830:	103f9c1e 	bne	r2,zero,86a4 <___vfprintf_internal_r+0x3dc>
    8834:	d8801117 	ldw	r2,68(sp)
    8838:	bc6f883a 	add	r23,r23,r17
    883c:	0021883a 	mov	r16,zero
    8840:	10800104 	addi	r2,r2,4
    8844:	d8801115 	stw	r2,68(sp)
    8848:	003eb706 	br	8328 <___vfprintf_internal_r+0x60>
    884c:	210015c4 	addi	r4,r4,87
    8850:	003f5106 	br	8598 <___vfprintf_internal_r+0x2d0>
    8854:	04003b16 	blt	zero,r16,8944 <___vfprintf_internal_r+0x67c>
    8858:	d8c00a17 	ldw	r3,40(sp)
    885c:	1805003a 	cmpeq	r2,r3,zero
    8860:	103f7f1e 	bne	r2,zero,8660 <___vfprintf_internal_r+0x398>
    8864:	a0c00117 	ldw	r3,4(r20)
    8868:	d9001017 	ldw	r4,64(sp)
    886c:	00800b44 	movi	r2,45
    8870:	d8800005 	stb	r2,0(sp)
    8874:	a00b883a 	mov	r5,r20
    8878:	d80d883a 	mov	r6,sp
    887c:	01c00044 	movi	r7,1
    8880:	183ee83a 	callr	r3
    8884:	103f871e 	bne	r2,zero,86a4 <___vfprintf_internal_r+0x3dc>
    8888:	b8800044 	addi	r2,r23,1
    888c:	003f7506 	br	8664 <___vfprintf_internal_r+0x39c>
    8890:	0007883a 	mov	r3,zero
    8894:	003edb06 	br	8404 <___vfprintf_internal_r+0x13c>
    8898:	a0c00117 	ldw	r3,4(r20)
    889c:	d9001017 	ldw	r4,64(sp)
    88a0:	d9400005 	stb	r5,0(sp)
    88a4:	d80d883a 	mov	r6,sp
    88a8:	a00b883a 	mov	r5,r20
    88ac:	183ee83a 	callr	r3
    88b0:	103f7c1e 	bne	r2,zero,86a4 <___vfprintf_internal_r+0x3dc>
    88b4:	bdc00044 	addi	r23,r23,1
    88b8:	003e9b06 	br	8328 <___vfprintf_internal_r+0x60>
    88bc:	102f883a 	mov	r23,r2
    88c0:	0021883a 	mov	r16,zero
    88c4:	003e9806 	br	8328 <___vfprintf_internal_r+0x60>
    88c8:	a0c00117 	ldw	r3,4(r20)
    88cc:	d9000005 	stb	r4,0(sp)
    88d0:	d9001017 	ldw	r4,64(sp)
    88d4:	a00b883a 	mov	r5,r20
    88d8:	d80d883a 	mov	r6,sp
    88dc:	800f883a 	mov	r7,r16
    88e0:	183ee83a 	callr	r3
    88e4:	103f6f1e 	bne	r2,zero,86a4 <___vfprintf_internal_r+0x3dc>
    88e8:	bc2f883a 	add	r23,r23,r16
    88ec:	0021883a 	mov	r16,zero
    88f0:	003e8d06 	br	8328 <___vfprintf_internal_r+0x60>
    88f4:	d9001017 	ldw	r4,64(sp)
    88f8:	a00b883a 	mov	r5,r20
    88fc:	01800c04 	movi	r6,48
    8900:	800f883a 	mov	r7,r16
    8904:	00082480 	call	8248 <print_repeat>
    8908:	103f661e 	bne	r2,zero,86a4 <___vfprintf_internal_r+0x3dc>
    890c:	bc05883a 	add	r2,r23,r16
    8910:	003f5406 	br	8664 <___vfprintf_internal_r+0x39c>
    8914:	a0c00117 	ldw	r3,4(r20)
    8918:	d9001017 	ldw	r4,64(sp)
    891c:	00800b44 	movi	r2,45
    8920:	d8800005 	stb	r2,0(sp)
    8924:	a00b883a 	mov	r5,r20
    8928:	d80d883a 	mov	r6,sp
    892c:	01c00044 	movi	r7,1
    8930:	183ee83a 	callr	r3
    8934:	103f5b1e 	bne	r2,zero,86a4 <___vfprintf_internal_r+0x3dc>
    8938:	bdc00044 	addi	r23,r23,1
    893c:	043f480e 	bge	zero,r16,8660 <___vfprintf_internal_r+0x398>
    8940:	003fec06 	br	88f4 <___vfprintf_internal_r+0x62c>
    8944:	d9001017 	ldw	r4,64(sp)
    8948:	a00b883a 	mov	r5,r20
    894c:	01800804 	movi	r6,32
    8950:	800f883a 	mov	r7,r16
    8954:	00082480 	call	8248 <print_repeat>
    8958:	103f521e 	bne	r2,zero,86a4 <___vfprintf_internal_r+0x3dc>
    895c:	bc2f883a 	add	r23,r23,r16
    8960:	003fbd06 	br	8858 <___vfprintf_internal_r+0x590>

00008964 <__vfprintf_internal>:
    8964:	00800074 	movhi	r2,1
    8968:	10a9c904 	addi	r2,r2,-22748
    896c:	2013883a 	mov	r9,r4
    8970:	11000017 	ldw	r4,0(r2)
    8974:	2805883a 	mov	r2,r5
    8978:	300f883a 	mov	r7,r6
    897c:	480b883a 	mov	r5,r9
    8980:	100d883a 	mov	r6,r2
    8984:	00082c81 	jmpi	82c8 <___vfprintf_internal_r>

00008988 <__sfvwrite_small_dev>:
    8988:	2880000b 	ldhu	r2,0(r5)
    898c:	defffa04 	addi	sp,sp,-24
    8990:	dcc00315 	stw	r19,12(sp)
    8994:	1080020c 	andi	r2,r2,8
    8998:	dc800215 	stw	r18,8(sp)
    899c:	dc400115 	stw	r17,4(sp)
    89a0:	dfc00515 	stw	ra,20(sp)
    89a4:	dd000415 	stw	r20,16(sp)
    89a8:	dc000015 	stw	r16,0(sp)
    89ac:	2825883a 	mov	r18,r5
    89b0:	2027883a 	mov	r19,r4
    89b4:	3023883a 	mov	r17,r6
    89b8:	10002026 	beq	r2,zero,8a3c <__sfvwrite_small_dev+0xb4>
    89bc:	2940008f 	ldh	r5,2(r5)
    89c0:	28000f16 	blt	r5,zero,8a00 <__sfvwrite_small_dev+0x78>
    89c4:	01c01b0e 	bge	zero,r7,8a34 <__sfvwrite_small_dev+0xac>
    89c8:	3821883a 	mov	r16,r7
    89cc:	05010004 	movi	r20,1024
    89d0:	00000206 	br	89dc <__sfvwrite_small_dev+0x54>
    89d4:	0400170e 	bge	zero,r16,8a34 <__sfvwrite_small_dev+0xac>
    89d8:	9140008f 	ldh	r5,2(r18)
    89dc:	880d883a 	mov	r6,r17
    89e0:	9809883a 	mov	r4,r19
    89e4:	800f883a 	mov	r7,r16
    89e8:	a400010e 	bge	r20,r16,89f0 <__sfvwrite_small_dev+0x68>
    89ec:	01c10004 	movi	r7,1024
    89f0:	0008a440 	call	8a44 <_write_r>
    89f4:	88a3883a 	add	r17,r17,r2
    89f8:	80a1c83a 	sub	r16,r16,r2
    89fc:	00bff516 	blt	zero,r2,89d4 <__sfvwrite_small_dev+0x4c>
    8a00:	9080000b 	ldhu	r2,0(r18)
    8a04:	00ffffc4 	movi	r3,-1
    8a08:	10801014 	ori	r2,r2,64
    8a0c:	9080000d 	sth	r2,0(r18)
    8a10:	1805883a 	mov	r2,r3
    8a14:	dfc00517 	ldw	ra,20(sp)
    8a18:	dd000417 	ldw	r20,16(sp)
    8a1c:	dcc00317 	ldw	r19,12(sp)
    8a20:	dc800217 	ldw	r18,8(sp)
    8a24:	dc400117 	ldw	r17,4(sp)
    8a28:	dc000017 	ldw	r16,0(sp)
    8a2c:	dec00604 	addi	sp,sp,24
    8a30:	f800283a 	ret
    8a34:	0007883a 	mov	r3,zero
    8a38:	003ff506 	br	8a10 <__sfvwrite_small_dev+0x88>
    8a3c:	00ffffc4 	movi	r3,-1
    8a40:	003ff306 	br	8a10 <__sfvwrite_small_dev+0x88>

00008a44 <_write_r>:
    8a44:	defffd04 	addi	sp,sp,-12
    8a48:	dc000015 	stw	r16,0(sp)
    8a4c:	04000074 	movhi	r16,1
    8a50:	842acb04 	addi	r16,r16,-21716
    8a54:	dc400115 	stw	r17,4(sp)
    8a58:	80000015 	stw	zero,0(r16)
    8a5c:	2023883a 	mov	r17,r4
    8a60:	2809883a 	mov	r4,r5
    8a64:	300b883a 	mov	r5,r6
    8a68:	380d883a 	mov	r6,r7
    8a6c:	dfc00215 	stw	ra,8(sp)
    8a70:	0008d480 	call	8d48 <write>
    8a74:	1007883a 	mov	r3,r2
    8a78:	00bfffc4 	movi	r2,-1
    8a7c:	18800626 	beq	r3,r2,8a98 <_write_r+0x54>
    8a80:	1805883a 	mov	r2,r3
    8a84:	dfc00217 	ldw	ra,8(sp)
    8a88:	dc400117 	ldw	r17,4(sp)
    8a8c:	dc000017 	ldw	r16,0(sp)
    8a90:	dec00304 	addi	sp,sp,12
    8a94:	f800283a 	ret
    8a98:	80800017 	ldw	r2,0(r16)
    8a9c:	103ff826 	beq	r2,zero,8a80 <_write_r+0x3c>
    8aa0:	88800015 	stw	r2,0(r17)
    8aa4:	1805883a 	mov	r2,r3
    8aa8:	dfc00217 	ldw	ra,8(sp)
    8aac:	dc400117 	ldw	r17,4(sp)
    8ab0:	dc000017 	ldw	r16,0(sp)
    8ab4:	dec00304 	addi	sp,sp,12
    8ab8:	f800283a 	ret

00008abc <udivmodsi4>:
    8abc:	29001b2e 	bgeu	r5,r4,8b2c <udivmodsi4+0x70>
    8ac0:	28001a16 	blt	r5,zero,8b2c <udivmodsi4+0x70>
    8ac4:	00800044 	movi	r2,1
    8ac8:	0007883a 	mov	r3,zero
    8acc:	01c007c4 	movi	r7,31
    8ad0:	00000306 	br	8ae0 <udivmodsi4+0x24>
    8ad4:	19c01326 	beq	r3,r7,8b24 <udivmodsi4+0x68>
    8ad8:	18c00044 	addi	r3,r3,1
    8adc:	28000416 	blt	r5,zero,8af0 <udivmodsi4+0x34>
    8ae0:	294b883a 	add	r5,r5,r5
    8ae4:	1085883a 	add	r2,r2,r2
    8ae8:	293ffa36 	bltu	r5,r4,8ad4 <udivmodsi4+0x18>
    8aec:	10000d26 	beq	r2,zero,8b24 <udivmodsi4+0x68>
    8af0:	0007883a 	mov	r3,zero
    8af4:	21400236 	bltu	r4,r5,8b00 <udivmodsi4+0x44>
    8af8:	2149c83a 	sub	r4,r4,r5
    8afc:	1886b03a 	or	r3,r3,r2
    8b00:	1004d07a 	srli	r2,r2,1
    8b04:	280ad07a 	srli	r5,r5,1
    8b08:	103ffa1e 	bne	r2,zero,8af4 <udivmodsi4+0x38>
    8b0c:	30000226 	beq	r6,zero,8b18 <udivmodsi4+0x5c>
    8b10:	2005883a 	mov	r2,r4
    8b14:	f800283a 	ret
    8b18:	1809883a 	mov	r4,r3
    8b1c:	2005883a 	mov	r2,r4
    8b20:	f800283a 	ret
    8b24:	0007883a 	mov	r3,zero
    8b28:	003ff806 	br	8b0c <udivmodsi4+0x50>
    8b2c:	00800044 	movi	r2,1
    8b30:	0007883a 	mov	r3,zero
    8b34:	003fef06 	br	8af4 <udivmodsi4+0x38>

00008b38 <__divsi3>:
    8b38:	defffe04 	addi	sp,sp,-8
    8b3c:	dc000015 	stw	r16,0(sp)
    8b40:	dfc00115 	stw	ra,4(sp)
    8b44:	0021883a 	mov	r16,zero
    8b48:	20000c16 	blt	r4,zero,8b7c <__divsi3+0x44>
    8b4c:	000d883a 	mov	r6,zero
    8b50:	28000e16 	blt	r5,zero,8b8c <__divsi3+0x54>
    8b54:	0008abc0 	call	8abc <udivmodsi4>
    8b58:	1007883a 	mov	r3,r2
    8b5c:	8005003a 	cmpeq	r2,r16,zero
    8b60:	1000011e 	bne	r2,zero,8b68 <__divsi3+0x30>
    8b64:	00c7c83a 	sub	r3,zero,r3
    8b68:	1805883a 	mov	r2,r3
    8b6c:	dfc00117 	ldw	ra,4(sp)
    8b70:	dc000017 	ldw	r16,0(sp)
    8b74:	dec00204 	addi	sp,sp,8
    8b78:	f800283a 	ret
    8b7c:	0109c83a 	sub	r4,zero,r4
    8b80:	04000044 	movi	r16,1
    8b84:	000d883a 	mov	r6,zero
    8b88:	283ff20e 	bge	r5,zero,8b54 <__divsi3+0x1c>
    8b8c:	014bc83a 	sub	r5,zero,r5
    8b90:	8021003a 	cmpeq	r16,r16,zero
    8b94:	003fef06 	br	8b54 <__divsi3+0x1c>

00008b98 <__modsi3>:
    8b98:	deffff04 	addi	sp,sp,-4
    8b9c:	dfc00015 	stw	ra,0(sp)
    8ba0:	01800044 	movi	r6,1
    8ba4:	2807883a 	mov	r3,r5
    8ba8:	20000416 	blt	r4,zero,8bbc <__modsi3+0x24>
    8bac:	28000c16 	blt	r5,zero,8be0 <__modsi3+0x48>
    8bb0:	dfc00017 	ldw	ra,0(sp)
    8bb4:	dec00104 	addi	sp,sp,4
    8bb8:	0008abc1 	jmpi	8abc <udivmodsi4>
    8bbc:	0109c83a 	sub	r4,zero,r4
    8bc0:	28000b16 	blt	r5,zero,8bf0 <__modsi3+0x58>
    8bc4:	180b883a 	mov	r5,r3
    8bc8:	01800044 	movi	r6,1
    8bcc:	0008abc0 	call	8abc <udivmodsi4>
    8bd0:	0085c83a 	sub	r2,zero,r2
    8bd4:	dfc00017 	ldw	ra,0(sp)
    8bd8:	dec00104 	addi	sp,sp,4
    8bdc:	f800283a 	ret
    8be0:	014bc83a 	sub	r5,zero,r5
    8be4:	dfc00017 	ldw	ra,0(sp)
    8be8:	dec00104 	addi	sp,sp,4
    8bec:	0008abc1 	jmpi	8abc <udivmodsi4>
    8bf0:	0147c83a 	sub	r3,zero,r5
    8bf4:	003ff306 	br	8bc4 <__modsi3+0x2c>

00008bf8 <__udivsi3>:
    8bf8:	000d883a 	mov	r6,zero
    8bfc:	0008abc1 	jmpi	8abc <udivmodsi4>

00008c00 <__umodsi3>:
    8c00:	01800044 	movi	r6,1
    8c04:	0008abc1 	jmpi	8abc <udivmodsi4>

00008c08 <__mulsi3>:
    8c08:	20000a26 	beq	r4,zero,8c34 <__mulsi3+0x2c>
    8c0c:	0007883a 	mov	r3,zero
    8c10:	2080004c 	andi	r2,r4,1
    8c14:	1005003a 	cmpeq	r2,r2,zero
    8c18:	2008d07a 	srli	r4,r4,1
    8c1c:	1000011e 	bne	r2,zero,8c24 <__mulsi3+0x1c>
    8c20:	1947883a 	add	r3,r3,r5
    8c24:	294b883a 	add	r5,r5,r5
    8c28:	203ff91e 	bne	r4,zero,8c10 <__mulsi3+0x8>
    8c2c:	1805883a 	mov	r2,r3
    8c30:	f800283a 	ret
    8c34:	0007883a 	mov	r3,zero
    8c38:	1805883a 	mov	r2,r3
    8c3c:	f800283a 	ret

00008c40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8c40:	deffff04 	addi	sp,sp,-4
    8c44:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8c48:	01000074 	movhi	r4,1
    8c4c:	2129d504 	addi	r4,r4,-22700
    8c50:	00c00074 	movhi	r3,1
    8c54:	18e8df04 	addi	r3,r3,-23684

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8c58:	20c00926 	beq	r4,r3,8c80 <alt_load+0x40>
    8c5c:	01800074 	movhi	r6,1
    8c60:	31a9d504 	addi	r6,r6,-22700
  {
    while( to != end )
    8c64:	19800626 	beq	r3,r6,8c80 <alt_load+0x40>
    8c68:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    8c6c:	20800017 	ldw	r2,0(r4)
    8c70:	18800015 	stw	r2,0(r3)
    8c74:	1947883a 	add	r3,r3,r5
    8c78:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8c7c:	30fffb1e 	bne	r6,r3,8c6c <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8c80:	01000074 	movhi	r4,1
    8c84:	21200804 	addi	r4,r4,-32736
    8c88:	00c00074 	movhi	r3,1
    8c8c:	18e00804 	addi	r3,r3,-32736

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8c90:	20c00926 	beq	r4,r3,8cb8 <alt_load+0x78>
    8c94:	01800074 	movhi	r6,1
    8c98:	31a00804 	addi	r6,r6,-32736
  {
    while( to != end )
    8c9c:	19800626 	beq	r3,r6,8cb8 <alt_load+0x78>
    8ca0:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    8ca4:	20800017 	ldw	r2,0(r4)
    8ca8:	18800015 	stw	r2,0(r3)
    8cac:	1947883a 	add	r3,r3,r5
    8cb0:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8cb4:	30fffb1e 	bne	r6,r3,8ca4 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8cb8:	01000074 	movhi	r4,1
    8cbc:	21283004 	addi	r4,r4,-24384
    8cc0:	00c00074 	movhi	r3,1
    8cc4:	18e83004 	addi	r3,r3,-24384

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8cc8:	20c00926 	beq	r4,r3,8cf0 <alt_load+0xb0>
    8ccc:	01800074 	movhi	r6,1
    8cd0:	31a8df04 	addi	r6,r6,-23684
  {
    while( to != end )
    8cd4:	19800626 	beq	r3,r6,8cf0 <alt_load+0xb0>
    8cd8:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    8cdc:	20800017 	ldw	r2,0(r4)
    8ce0:	18800015 	stw	r2,0(r3)
    8ce4:	1947883a 	add	r3,r3,r5
    8ce8:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8cec:	30fffb1e 	bne	r6,r3,8cdc <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8cf0:	00099540 	call	9954 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8cf4:	00099d00 	call	99d0 <alt_icache_flush_all>
}
    8cf8:	dfc00017 	ldw	ra,0(sp)
    8cfc:	dec00104 	addi	sp,sp,4
    8d00:	f800283a 	ret

00008d04 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8d04:	deffff04 	addi	sp,sp,-4
    8d08:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8d0c:	0009883a 	mov	r4,zero
    8d10:	0008e940 	call	8e94 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8d14:	0008e580 	call	8e58 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8d18:	01800074 	movhi	r6,1
    8d1c:	31a83704 	addi	r6,r6,-24356
    8d20:	3009883a 	mov	r4,r6
    8d24:	300b883a 	mov	r5,r6
    8d28:	0009a4c0 	call	9a4c <alt_io_redirect>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8d2c:	d1210317 	ldw	r4,-31732(gp)
    8d30:	d1610417 	ldw	r5,-31728(gp)
    8d34:	d1a10517 	ldw	r6,-31724(gp)
    8d38:	000805c0 	call	805c <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8d3c:	dfc00017 	ldw	ra,0(sp)
    8d40:	dec00104 	addi	sp,sp,4
    8d44:	f800283a 	ret

00008d48 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8d48:	defffd04 	addi	sp,sp,-12
    8d4c:	dfc00215 	stw	ra,8(sp)
    8d50:	dc400115 	stw	r17,4(sp)
    8d54:	dc000015 	stw	r16,0(sp)
    8d58:	2821883a 	mov	r16,r5
    8d5c:	3023883a 	mov	r17,r6
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8d60:	20002b16 	blt	r4,zero,8e10 <write+0xc8>
    8d64:	01400304 	movi	r5,12
    8d68:	0008c080 	call	8c08 <__mulsi3>
    8d6c:	00c00074 	movhi	r3,1
    8d70:	18e96904 	addi	r3,r3,-23132
    8d74:	10c9883a 	add	r4,r2,r3
  
  if (fd)
    8d78:	20002526 	beq	r4,zero,8e10 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8d7c:	20800217 	ldw	r2,8(r4)
    8d80:	108000cc 	andi	r2,r2,3
    8d84:	10001526 	beq	r2,zero,8ddc <write+0x94>
    8d88:	20800017 	ldw	r2,0(r4)
    8d8c:	10800617 	ldw	r2,24(r2)
    8d90:	10001226 	beq	r2,zero,8ddc <write+0x94>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    8d94:	800b883a 	mov	r5,r16
    8d98:	880d883a 	mov	r6,r17
    8d9c:	103ee83a 	callr	r2
    8da0:	1021883a 	mov	r16,r2
    8da4:	1000260e 	bge	r2,zero,8e40 <write+0xf8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8da8:	00800074 	movhi	r2,1
    8dac:	10a9d104 	addi	r2,r2,-22716
    8db0:	10800017 	ldw	r2,0(r2)
    8db4:	1000031e 	bne	r2,zero,8dc4 <write+0x7c>
    8db8:	00c00074 	movhi	r3,1
    8dbc:	18eacb04 	addi	r3,r3,-21716
    8dc0:	00000206 	br	8dcc <write+0x84>
    8dc4:	103ee83a 	callr	r2
    8dc8:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    8dcc:	0405c83a 	sub	r2,zero,r16
    8dd0:	18800015 	stw	r2,0(r3)
    8dd4:	043fffc4 	movi	r16,-1
    8dd8:	00001906 	br	8e40 <write+0xf8>
    8ddc:	00800074 	movhi	r2,1
    8de0:	10a9d104 	addi	r2,r2,-22716
    8de4:	10800017 	ldw	r2,0(r2)
    8de8:	1000031e 	bne	r2,zero,8df8 <write+0xb0>
    8dec:	00c00074 	movhi	r3,1
    8df0:	18eacb04 	addi	r3,r3,-21716
    8df4:	00000206 	br	8e00 <write+0xb8>
    8df8:	103ee83a 	callr	r2
    8dfc:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    8e00:	00800344 	movi	r2,13
    8e04:	18800015 	stw	r2,0(r3)
    8e08:	043fffc4 	movi	r16,-1
    8e0c:	00000c06 	br	8e40 <write+0xf8>
    8e10:	00800074 	movhi	r2,1
    8e14:	10a9d104 	addi	r2,r2,-22716
    8e18:	10800017 	ldw	r2,0(r2)
    8e1c:	1000031e 	bne	r2,zero,8e2c <write+0xe4>
    8e20:	00c00074 	movhi	r3,1
    8e24:	18eacb04 	addi	r3,r3,-21716
    8e28:	00000206 	br	8e34 <write+0xec>
    8e2c:	103ee83a 	callr	r2
    8e30:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    8e34:	00801444 	movi	r2,81
    8e38:	18800015 	stw	r2,0(r3)
    8e3c:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    8e40:	8005883a 	mov	r2,r16
    8e44:	dfc00217 	ldw	ra,8(sp)
    8e48:	dc400117 	ldw	r17,4(sp)
    8e4c:	dc000017 	ldw	r16,0(sp)
    8e50:	dec00304 	addi	sp,sp,12
    8e54:	f800283a 	ret

00008e58 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8e58:	defffe04 	addi	sp,sp,-8
    8e5c:	dfc00115 	stw	ra,4(sp)
    8e60:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_LCD_16207_INIT ( LCD_16207, lcd_16207);
    8e64:	04000074 	movhi	r16,1
    8e68:	84292104 	addi	r16,r16,-23420
    8e6c:	8009883a 	mov	r4,r16
    8e70:	00091f40 	call	91f4 <altera_avalon_lcd_16207_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8e74:	813ff604 	addi	r4,r16,-40
    8e78:	01400074 	movhi	r5,1
    8e7c:	2969ce04 	addi	r5,r5,-22728
    8e80:	00099600 	call	9960 <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    8e84:	dfc00117 	ldw	ra,4(sp)
    8e88:	dc000017 	ldw	r16,0(sp)
    8e8c:	dec00204 	addi	sp,sp,8
    8e90:	f800283a 	ret

00008e94 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8e94:	deffff04 	addi	sp,sp,-4
    8e98:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
    8e9c:	0009dc80 	call	9dc8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8ea0:	00800044 	movi	r2,1
    8ea4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8ea8:	dfc00017 	ldw	ra,0(sp)
    8eac:	dec00104 	addi	sp,sp,4
    8eb0:	f800283a 	ret

00008eb4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
    8eb4:	defffd04 	addi	sp,sp,-12
    8eb8:	dfc00215 	stw	ra,8(sp)
    8ebc:	dc400115 	stw	r17,4(sp)
    8ec0:	dc000015 	stw	r16,0(sp)
    8ec4:	2823883a 	mov	r17,r5
  unsigned int base = sp->base;
    8ec8:	24000017 	ldw	r16,0(r4)
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    8ecc:	20800807 	ldb	r2,32(r4)
    8ed0:	10000f1e 	bne	r2,zero,8f10 <lcd_write_command+0x5c>
    8ed4:	00000506 	br	8eec <lcd_write_command+0x38>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    if (--i == 0)
    8ed8:	18ffffc4 	addi	r3,r3,-1
    8edc:	1800051e 	bne	r3,zero,8ef4 <lcd_write_command+0x40>
    {
      sp->broken = 1;
    8ee0:	00800044 	movi	r2,1
    8ee4:	20800805 	stb	r2,32(r4)
    8ee8:	00000906 	br	8f10 <lcd_write_command+0x5c>
      return;
    8eec:	00c003f4 	movhi	r3,15
    8ef0:	18d09004 	addi	r3,r3,16960
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    8ef4:	80800137 	ldwio	r2,4(r16)
    8ef8:	1080200c 	andi	r2,r2,128
    8efc:	103ff61e 	bne	r2,zero,8ed8 <lcd_write_command+0x24>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    8f00:	01001904 	movi	r4,100
    8f04:	0009db00 	call	9db0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
    8f08:	88803fcc 	andi	r2,r17,255
    8f0c:	80800035 	stwio	r2,0(r16)
}
    8f10:	dfc00217 	ldw	ra,8(sp)
    8f14:	dc400117 	ldw	r17,4(sp)
    8f18:	dc000017 	ldw	r16,0(sp)
    8f1c:	dec00304 	addi	sp,sp,12
    8f20:	f800283a 	ret

00008f24 <lcd_repaint_screen>:
}

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
    8f24:	defff204 	addi	sp,sp,-56
    8f28:	dfc00d15 	stw	ra,52(sp)
    8f2c:	df000c15 	stw	fp,48(sp)
    8f30:	ddc00b15 	stw	r23,44(sp)
    8f34:	dd800a15 	stw	r22,40(sp)
    8f38:	dd400915 	stw	r21,36(sp)
    8f3c:	dd000815 	stw	r20,32(sp)
    8f40:	dcc00715 	stw	r19,28(sp)
    8f44:	dc800615 	stw	r18,24(sp)
    8f48:	dc400515 	stw	r17,20(sp)
    8f4c:	dc000415 	stw	r16,16(sp)
    8f50:	2027883a 	mov	r19,r4
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
    8f54:	20800947 	ldb	r2,37(r4)
    8f58:	d8800215 	stw	r2,8(sp)
    8f5c:	d9000115 	stw	r4,4(sp)
    8f60:	d8000315 	stw	zero,12(sp)
    8f64:	d0e00204 	addi	r3,gp,-32760
    8f68:	d8c00015 	stw	r3,0(sp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width  = sp->line[y].width;
    8f6c:	d8800117 	ldw	r2,4(sp)
    8f70:	17002447 	ldb	fp,145(r2)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    8f74:	d9000217 	ldw	r4,8(sp)
    8f78:	11402483 	ldbu	r5,146(r2)
    8f7c:	0008c080 	call	8c08 <__mulsi3>
    8f80:	102dd23a 	srai	r22,r2,8
    if (offset >= width)
    8f84:	b7000116 	blt	r22,fp,8f8c <lcd_repaint_screen+0x68>
    8f88:	002d883a 	mov	r22,zero
    8f8c:	d9000317 	ldw	r4,12(sp)
    8f90:	014018c4 	movi	r5,99
    8f94:	0008c080 	call	8c08 <__mulsi3>
    8f98:	10800c04 	addi	r2,r2,48
    8f9c:	98a5883a 	add	r18,r19,r2
    8fa0:	0029883a 	mov	r20,zero
    8fa4:	d9000317 	ldw	r4,12(sp)
    8fa8:	014018c4 	movi	r5,99
    8fac:	0008c080 	call	8c08 <__mulsi3>
    8fb0:	14ef883a 	add	r23,r2,r19
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    {
      char c = sp->line[y].data[(x + offset) % width];
    8fb4:	b509883a 	add	r4,r22,r20
    8fb8:	e00b883a 	mov	r5,fp
    8fbc:	0008b980 	call	8b98 <__modsi3>
    8fc0:	b885883a 	add	r2,r23,r2
    8fc4:	14401003 	ldbu	r17,64(r2)
}

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
    8fc8:	902b883a 	mov	r21,r18
    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    {
      char c = sp->line[y].data[(x + offset) % width];

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
    8fcc:	88c03fcc 	andi	r3,r17,255
    8fd0:	18c0201c 	xori	r3,r3,128
    8fd4:	18ffe004 	addi	r3,r3,-128
    8fd8:	90800007 	ldb	r2,0(r18)
    8fdc:	18802026 	beq	r3,r2,9060 <lcd_repaint_screen+0x13c>
      {
        unsigned char address = x + colstart[y];
    8fe0:	d8c00017 	ldw	r3,0(sp)
    8fe4:	18800003 	ldbu	r2,0(r3)
    8fe8:	a0a1883a 	add	r16,r20,r2

        if (address != sp->address)
    8fec:	80c03fcc 	andi	r3,r16,255
    8ff0:	988008c7 	ldb	r2,35(r19)
    8ff4:	18800426 	beq	r3,r2,9008 <lcd_repaint_screen+0xe4>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
    8ff8:	9809883a 	mov	r4,r19
    8ffc:	19402014 	ori	r5,r3,128
    9000:	0008eb40 	call	8eb4 <lcd_write_command>
          sp->address = address;
    9004:	9c0008c5 	stb	r16,35(r19)
/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  unsigned int base = sp->base;
    9008:	9c000017 	ldw	r16,0(r19)
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    900c:	98800807 	ldb	r2,32(r19)
    9010:	1000121e 	bne	r2,zero,905c <lcd_repaint_screen+0x138>
    9014:	00000506 	br	902c <lcd_repaint_screen+0x108>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    if (--i == 0)
    9018:	18ffffc4 	addi	r3,r3,-1
    901c:	1800051e 	bne	r3,zero,9034 <lcd_repaint_screen+0x110>
    {
      sp->broken = 1;
    9020:	00800044 	movi	r2,1
    9024:	98800805 	stb	r2,32(r19)
    9028:	00000c06 	br	905c <lcd_repaint_screen+0x138>
    902c:	00c003f4 	movhi	r3,15
    9030:	18d09004 	addi	r3,r3,16960
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    9034:	80800137 	ldwio	r2,4(r16)
    9038:	1080200c 	andi	r2,r2,128
    903c:	103ff61e 	bne	r2,zero,9018 <lcd_repaint_screen+0xf4>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    9040:	01001904 	movi	r4,100
    9044:	0009db00 	call	9db0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
    9048:	88803fcc 	andi	r2,r17,255
    904c:	80800235 	stwio	r2,8(r16)

  sp->address++;
    9050:	988008c3 	ldbu	r2,35(r19)
    9054:	10800044 	addi	r2,r2,1
    9058:	988008c5 	stb	r2,35(r19)
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
          sp->address = address;
        }

        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
    905c:	ac400005 	stb	r17,0(r21)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    9060:	00c00044 	movi	r3,1
    9064:	a0e9883a 	add	r20,r20,r3
    9068:	90e5883a 	add	r18,r18,r3
    906c:	00800404 	movi	r2,16
    9070:	a0bfd01e 	bne	r20,r2,8fb4 <lcd_repaint_screen+0x90>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    9074:	d8800317 	ldw	r2,12(sp)
    9078:	10c5883a 	add	r2,r2,r3
    907c:	d8800315 	stw	r2,12(sp)
    9080:	d8800117 	ldw	r2,4(sp)
    9084:	108018c4 	addi	r2,r2,99
    9088:	d8800115 	stw	r2,4(sp)
    908c:	d8800017 	ldw	r2,0(sp)
    9090:	10c5883a 	add	r2,r2,r3
    9094:	d8800015 	stw	r2,0(sp)
    9098:	00800084 	movi	r2,2
    909c:	d8c00317 	ldw	r3,12(sp)
    90a0:	18bfb21e 	bne	r3,r2,8f6c <lcd_repaint_screen+0x48>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
    90a4:	dfc00d17 	ldw	ra,52(sp)
    90a8:	df000c17 	ldw	fp,48(sp)
    90ac:	ddc00b17 	ldw	r23,44(sp)
    90b0:	dd800a17 	ldw	r22,40(sp)
    90b4:	dd400917 	ldw	r21,36(sp)
    90b8:	dd000817 	ldw	r20,32(sp)
    90bc:	dcc00717 	ldw	r19,28(sp)
    90c0:	dc800617 	ldw	r18,24(sp)
    90c4:	dc400517 	ldw	r17,20(sp)
    90c8:	dc000417 	ldw	r16,16(sp)
    90cc:	dec00e04 	addi	sp,sp,56
    90d0:	f800283a 	ret

000090d4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
    90d4:	defffe04 	addi	sp,sp,-8
    90d8:	dfc00115 	stw	ra,4(sp)
    90dc:	dc000015 	stw	r16,0(sp)
    90e0:	2021883a 	mov	r16,r4
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
    90e4:	21000943 	ldbu	r4,37(r4)
    90e8:	20803fcc 	andi	r2,r4,255
    90ec:	1080201c 	xori	r2,r2,128
    90f0:	10bfe004 	addi	r2,r2,-128
    90f4:	10800044 	addi	r2,r2,1
    90f8:	80c00987 	ldb	r3,38(r16)
    90fc:	10c00216 	blt	r2,r3,9108 <alt_lcd_16207_timeout+0x34>
    sp->scrollpos = 0;
    9100:	80000945 	stb	zero,37(r16)
    9104:	00000206 	br	9110 <alt_lcd_16207_timeout+0x3c>
  else
    sp->scrollpos = sp->scrollpos + 1;
    9108:	20800044 	addi	r2,r4,1
    910c:	80800945 	stb	r2,37(r16)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
    9110:	80800987 	ldb	r2,38(r16)
    9114:	0080040e 	bge	zero,r2,9128 <alt_lcd_16207_timeout+0x54>
    9118:	808009c7 	ldb	r2,39(r16)
    911c:	1000021e 	bne	r2,zero,9128 <alt_lcd_16207_timeout+0x54>
    lcd_repaint_screen(sp);
    9120:	8009883a 	mov	r4,r16
    9124:	0008f240 	call	8f24 <lcd_repaint_screen>

  return sp->period;
}
    9128:	80800717 	ldw	r2,28(r16)
    912c:	dfc00117 	ldw	ra,4(sp)
    9130:	dc000017 	ldw	r16,0(sp)
    9134:	dec00204 	addi	sp,sp,8
    9138:	f800283a 	ret

0000913c <lcd_clear_screen>:
}

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
    913c:	defff904 	addi	sp,sp,-28
    9140:	dfc00615 	stw	ra,24(sp)
    9144:	dd400515 	stw	r21,20(sp)
    9148:	dd000415 	stw	r20,16(sp)
    914c:	dcc00315 	stw	r19,12(sp)
    9150:	dc800215 	stw	r18,8(sp)
    9154:	dc400115 	stw	r17,4(sp)
    9158:	dc000015 	stw	r16,0(sp)
    915c:	2023883a 	mov	r17,r4
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
    9160:	01400044 	movi	r5,1
    9164:	0008eb40 	call	8eb4 <lcd_write_command>

  sp->x = 0;
    9168:	88000845 	stb	zero,33(r17)
  sp->y = 0;
    916c:	88000885 	stb	zero,34(r17)
  sp->address = 0;
    9170:	880008c5 	stb	zero,35(r17)
    9174:	8825883a 	mov	r18,r17
    9178:	0027883a 	mov	r19,zero
    917c:	054018c4 	movi	r21,99
    9180:	05000804 	movi	r20,32

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    9184:	9809883a 	mov	r4,r19
    9188:	a80b883a 	mov	r5,r21
    918c:	0008c080 	call	8c08 <__mulsi3>
    9190:	1021883a 	mov	r16,r2
    9194:	11001004 	addi	r4,r2,64
    9198:	8909883a 	add	r4,r17,r4
    919c:	a00b883a 	mov	r5,r20
    91a0:	01801444 	movi	r6,81
    91a4:	000a0a00 	call	a0a0 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    91a8:	84000c04 	addi	r16,r16,48
    91ac:	8c09883a 	add	r4,r17,r16
    91b0:	a00b883a 	mov	r5,r20
    91b4:	01800404 	movi	r6,16
    91b8:	000a0a00 	call	a0a0 <memset>
    sp->line[y].width = 0;
    91bc:	90002445 	stb	zero,145(r18)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    91c0:	9cc00044 	addi	r19,r19,1
    91c4:	9565883a 	add	r18,r18,r21
    91c8:	00800084 	movi	r2,2
    91cc:	98bfed1e 	bne	r19,r2,9184 <lcd_clear_screen+0x48>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
    91d0:	dfc00617 	ldw	ra,24(sp)
    91d4:	dd400517 	ldw	r21,20(sp)
    91d8:	dd000417 	ldw	r20,16(sp)
    91dc:	dcc00317 	ldw	r19,12(sp)
    91e0:	dc800217 	ldw	r18,8(sp)
    91e4:	dc400117 	ldw	r17,4(sp)
    91e8:	dc000017 	ldw	r16,0(sp)
    91ec:	dec00704 	addi	sp,sp,28
    91f0:	f800283a 	ret

000091f4 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
    91f4:	defffc04 	addi	sp,sp,-16
    91f8:	dfc00315 	stw	ra,12(sp)
    91fc:	dc800215 	stw	r18,8(sp)
    9200:	dc400115 	stw	r17,4(sp)
    9204:	dc000015 	stw	r16,0(sp)
    9208:	2021883a 	mov	r16,r4
  unsigned int base = sp->base;
    920c:	24800017 	ldw	r18,0(r4)

  /* Mark the device as functional */
  sp->broken = 0;
    9210:	20000805 	stb	zero,32(r4)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
    9214:	010ea604 	movi	r4,15000
    9218:	0009db00 	call	9db0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    921c:	04400c04 	movi	r17,48
    9220:	94400035 	stwio	r17,0(r18)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
    9224:	01040104 	movi	r4,4100
    9228:	0009db00 	call	9db0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    922c:	94400035 	stwio	r17,0(r18)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
    9230:	0100fa04 	movi	r4,1000
    9234:	0009db00 	call	9db0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    9238:	94400035 	stwio	r17,0(r18)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
    923c:	8009883a 	mov	r4,r16
    9240:	01400e04 	movi	r5,56
    9244:	0008eb40 	call	8eb4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
    9248:	8009883a 	mov	r4,r16
    924c:	01400204 	movi	r5,8
    9250:	0008eb40 	call	8eb4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
    9254:	8009883a 	mov	r4,r16
    9258:	000913c0 	call	913c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
    925c:	8009883a 	mov	r4,r16
    9260:	01400184 	movi	r5,6
    9264:	0008eb40 	call	8eb4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
    9268:	8009883a 	mov	r4,r16
    926c:	01400304 	movi	r5,12
    9270:	0008eb40 	call	8eb4 <lcd_write_command>

  sp->esccount = -1;
    9274:	00bfffc4 	movi	r2,-1
    9278:	80800905 	stb	r2,36(r16)
  memset(sp->escape, 0, sizeof(sp->escape));
    927c:	80800a04 	addi	r2,r16,40
    9280:	10000015 	stw	zero,0(r2)
    9284:	10000115 	stw	zero,4(r2)

  sp->scrollpos = 0;
    9288:	80000945 	stb	zero,37(r16)
  sp->scrollmax = 0;
    928c:	80000985 	stb	zero,38(r16)
  sp->active = 0;
    9290:	800009c5 	stb	zero,39(r16)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
    9294:	00800074 	movhi	r2,1
    9298:	10aacf04 	addi	r2,r2,-21700
    929c:	11000017 	ldw	r4,0(r2)
    92a0:	01400284 	movi	r5,10
    92a4:	0008bf80 	call	8bf8 <__udivsi3>
    92a8:	100b883a 	mov	r5,r2
    92ac:	80800715 	stw	r2,28(r16)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
    92b0:	81000104 	addi	r4,r16,4
    92b4:	01800074 	movhi	r6,1
    92b8:	31a43504 	addi	r6,r6,-28460
    92bc:	800f883a 	mov	r7,r16
    92c0:	00098c00 	call	98c0 <alt_alarm_start>
}
    92c4:	dfc00317 	ldw	ra,12(sp)
    92c8:	dc800217 	ldw	r18,8(sp)
    92cc:	dc400117 	ldw	r17,4(sp)
    92d0:	dc000017 	ldw	r16,0(sp)
    92d4:	dec00404 	addi	sp,sp,16
    92d8:	f800283a 	ret

000092dc <lcd_scroll_up>:
}

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
    92dc:	defffc04 	addi	sp,sp,-16
    92e0:	dfc00315 	stw	ra,12(sp)
    92e4:	dc800215 	stw	r18,8(sp)
    92e8:	dc400115 	stw	r17,4(sp)
    92ec:	dc000015 	stw	r16,0(sp)
    92f0:	2023883a 	mov	r17,r4
    92f4:	0021883a 	mov	r16,zero
    92f8:	048018c4 	movi	r18,99
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    if (y < ALT_LCD_HEIGHT-1)
    92fc:	04000a16 	blt	zero,r16,9328 <lcd_scroll_up+0x4c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    9300:	8009883a 	mov	r4,r16
    9304:	900b883a 	mov	r5,r18
    9308:	0008c080 	call	8c08 <__mulsi3>
    930c:	11001004 	addi	r4,r2,64
    9310:	108028c4 	addi	r2,r2,163
    9314:	8909883a 	add	r4,r17,r4
    9318:	888b883a 	add	r5,r17,r2
    931c:	01801404 	movi	r6,80
    9320:	000a0740 	call	a074 <memcpy>
    9324:	00000806 	br	9348 <lcd_scroll_up+0x6c>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
    9328:	8009883a 	mov	r4,r16
    932c:	014018c4 	movi	r5,99
    9330:	0008c080 	call	8c08 <__mulsi3>
    9334:	10801004 	addi	r2,r2,64
    9338:	8889883a 	add	r4,r17,r2
    933c:	01400804 	movi	r5,32
    9340:	01801404 	movi	r6,80
    9344:	000a0a00 	call	a0a0 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    9348:	84000044 	addi	r16,r16,1
    934c:	00800084 	movi	r2,2
    9350:	80bfea1e 	bne	r16,r2,92fc <lcd_scroll_up+0x20>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
    9354:	88800883 	ldbu	r2,34(r17)
    9358:	10bfffc4 	addi	r2,r2,-1
    935c:	88800885 	stb	r2,34(r17)
}
    9360:	dfc00317 	ldw	ra,12(sp)
    9364:	dc800217 	ldw	r18,8(sp)
    9368:	dc400117 	ldw	r17,4(sp)
    936c:	dc000017 	ldw	r16,0(sp)
    9370:	dec00404 	addi	sp,sp,16
    9374:	f800283a 	ret

00009378 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
    9378:	defff504 	addi	sp,sp,-44
    937c:	dfc00a15 	stw	ra,40(sp)
    9380:	df000915 	stw	fp,36(sp)
    9384:	ddc00815 	stw	r23,32(sp)
    9388:	dd800715 	stw	r22,28(sp)
    938c:	dd400615 	stw	r21,24(sp)
    9390:	dd000515 	stw	r20,20(sp)
    9394:	dcc00415 	stw	r19,16(sp)
    9398:	dc800315 	stw	r18,12(sp)
    939c:	dc400215 	stw	r17,8(sp)
    93a0:	dc000115 	stw	r16,4(sp)
    93a4:	2027883a 	mov	r19,r4
    93a8:	d9800015 	stw	r6,0(sp)
  const char* end = ptr + len;
    93ac:	316f883a 	add	r23,r6,r5

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
    93b0:	00800044 	movi	r2,1
    93b4:	208009c5 	stb	r2,39(r4)

  for ( ; ptr < end ; ptr++)
    93b8:	2dc1262e 	bgeu	r5,r23,9854 <altera_avalon_lcd_16207_write+0x4dc>
    93bc:	282d883a 	mov	r22,r5
  {
    char c = *ptr;
    93c0:	b4800003 	ldbu	r18,0(r22)

    if (sp->esccount >= 0)
    93c4:	98c00903 	ldbu	r3,36(r19)
    93c8:	18803fcc 	andi	r2,r3,255
    93cc:	1080201c 	xori	r2,r2,128
    93d0:	10bfe004 	addi	r2,r2,-128
    93d4:	1000a016 	blt	r2,zero,9658 <altera_avalon_lcd_16207_write+0x2e0>
    {
      unsigned int esccount = sp->esccount;
    93d8:	1009883a 	mov	r4,r2

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
    93dc:	1000061e 	bne	r2,zero,93f8 <altera_avalon_lcd_16207_write+0x80>
    93e0:	90c03fcc 	andi	r3,r18,255
    93e4:	18c0201c 	xori	r3,r3,128
    93e8:	18ffe004 	addi	r3,r3,-128
    93ec:	008016c4 	movi	r2,91
    93f0:	18800d1e 	bne	r3,r2,9428 <altera_avalon_lcd_16207_write+0xb0>
    93f4:	00009206 	br	9640 <altera_avalon_lcd_16207_write+0x2c8>
    93f8:	91403fcc 	andi	r5,r18,255
    93fc:	2940201c 	xori	r5,r5,128
    9400:	297fe004 	addi	r5,r5,-128
    9404:	00800074 	movhi	r2,1
    9408:	10a9d404 	addi	r2,r2,-22704
    940c:	10800017 	ldw	r2,0(r2)
    9410:	2885883a 	add	r2,r5,r2
    9414:	10800003 	ldbu	r2,0(r2)
    9418:	1080010c 	andi	r2,r2,4
    941c:	1000851e 	bne	r2,zero,9634 <altera_avalon_lcd_16207_write+0x2bc>
    9420:	00800ec4 	movi	r2,59
    9424:	28808326 	beq	r5,r2,9634 <altera_avalon_lcd_16207_write+0x2bc>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
    9428:	24c5883a 	add	r2,r4,r19
    942c:	10000a05 	stb	zero,40(r2)

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
    9430:	98c00a07 	ldb	r3,40(r19)
    9434:	008016c4 	movi	r2,91
    9438:	18800326 	beq	r3,r2,9448 <altera_avalon_lcd_16207_write+0xd0>
    943c:	053fffc4 	movi	r20,-1
    9440:	0009883a 	mov	r4,zero
    9444:	00004106 	br	954c <altera_avalon_lcd_16207_write+0x1d4>
  {
    char * ptr = sp->escape+1;
    9448:	9c400a44 	addi	r17,r19,41
    while (isdigit(*ptr))
    944c:	8c000003 	ldbu	r16,0(r17)
    9450:	00800074 	movhi	r2,1
    9454:	10a9d404 	addi	r2,r2,-22704
    9458:	15400017 	ldw	r21,0(r2)
    945c:	80803fcc 	andi	r2,r16,255
    9460:	1080201c 	xori	r2,r2,128
    9464:	10bfe004 	addi	r2,r2,-128
    9468:	1545883a 	add	r2,r2,r21
    946c:	10800003 	ldbu	r2,0(r2)
    9470:	1080010c 	andi	r2,r2,4
    9474:	1000021e 	bne	r2,zero,9480 <altera_avalon_lcd_16207_write+0x108>
    9478:	0029883a 	mov	r20,zero
    947c:	00001206 	br	94c8 <altera_avalon_lcd_16207_write+0x150>
    9480:	0029883a 	mov	r20,zero
      parm1 = (parm1 * 10) + (*ptr++ - '0');
    9484:	a009883a 	mov	r4,r20
    9488:	01400284 	movi	r5,10
    948c:	0008c080 	call	8c08 <__mulsi3>
    9490:	80c03fcc 	andi	r3,r16,255
    9494:	18c0201c 	xori	r3,r3,128
    9498:	18ffe004 	addi	r3,r3,-128
    949c:	10c5883a 	add	r2,r2,r3
    94a0:	153ff404 	addi	r20,r2,-48
    94a4:	8c400044 	addi	r17,r17,1
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
    94a8:	8c000003 	ldbu	r16,0(r17)
    94ac:	80803fcc 	andi	r2,r16,255
    94b0:	1080201c 	xori	r2,r2,128
    94b4:	10bfe004 	addi	r2,r2,-128
    94b8:	1545883a 	add	r2,r2,r21
    94bc:	10800003 	ldbu	r2,0(r2)
    94c0:	1080010c 	andi	r2,r2,4
    94c4:	103fef1e 	bne	r2,zero,9484 <altera_avalon_lcd_16207_write+0x10c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    94c8:	80c03fcc 	andi	r3,r16,255
    94cc:	18c0201c 	xori	r3,r3,128
    94d0:	18ffe004 	addi	r3,r3,-128
    94d4:	00800ec4 	movi	r2,59
    94d8:	18801b1e 	bne	r3,r2,9548 <altera_avalon_lcd_16207_write+0x1d0>
    {
      ptr++;
    94dc:	8c400044 	addi	r17,r17,1
      while (isdigit(*ptr))
    94e0:	8c000003 	ldbu	r16,0(r17)
    94e4:	80803fcc 	andi	r2,r16,255
    94e8:	1080201c 	xori	r2,r2,128
    94ec:	10bfe004 	addi	r2,r2,-128
    94f0:	1545883a 	add	r2,r2,r21
    94f4:	10800003 	ldbu	r2,0(r2)
    94f8:	1080010c 	andi	r2,r2,4
    94fc:	10001226 	beq	r2,zero,9548 <altera_avalon_lcd_16207_write+0x1d0>
    9500:	0009883a 	mov	r4,zero
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    9504:	01400284 	movi	r5,10
    9508:	0008c080 	call	8c08 <__mulsi3>
    950c:	80c03fcc 	andi	r3,r16,255
    9510:	18c0201c 	xori	r3,r3,128
    9514:	18ffe004 	addi	r3,r3,-128
    9518:	10c5883a 	add	r2,r2,r3
    951c:	113ff404 	addi	r4,r2,-48
    9520:	8c400044 	addi	r17,r17,1
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
    9524:	8c000003 	ldbu	r16,0(r17)
    9528:	80803fcc 	andi	r2,r16,255
    952c:	1080201c 	xori	r2,r2,128
    9530:	10bfe004 	addi	r2,r2,-128
    9534:	1545883a 	add	r2,r2,r21
    9538:	10800003 	ldbu	r2,0(r2)
    953c:	1080010c 	andi	r2,r2,4
    9540:	10000226 	beq	r2,zero,954c <altera_avalon_lcd_16207_write+0x1d4>
    9544:	003fef06 	br	9504 <altera_avalon_lcd_16207_write+0x18c>
    9548:	0009883a 	mov	r4,zero
    }
  }
  else
    parm1 = -1;

  switch (c)
    954c:	90c03fcc 	andi	r3,r18,255
    9550:	18c0201c 	xori	r3,r3,128
    9554:	18ffe004 	addi	r3,r3,-128
    9558:	00801284 	movi	r2,74
    955c:	18801e26 	beq	r3,r2,95d8 <altera_avalon_lcd_16207_write+0x260>
    9560:	10c00316 	blt	r2,r3,9570 <altera_avalon_lcd_16207_write+0x1f8>
    9564:	00801204 	movi	r2,72
    9568:	18802f1e 	bne	r3,r2,9628 <altera_avalon_lcd_16207_write+0x2b0>
    956c:	00000406 	br	9580 <altera_avalon_lcd_16207_write+0x208>
    9570:	008012c4 	movi	r2,75
    9574:	18801d26 	beq	r3,r2,95ec <altera_avalon_lcd_16207_write+0x274>
    9578:	00801984 	movi	r2,102
    957c:	18802a1e 	bne	r3,r2,9628 <altera_avalon_lcd_16207_write+0x2b0>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
    9580:	0100020e 	bge	zero,r4,958c <altera_avalon_lcd_16207_write+0x214>
      sp->x = parm2 - 1;
    9584:	20bfffc4 	addi	r2,r4,-1
    9588:	98800845 	stb	r2,33(r19)
    if (parm1 > 0)
    958c:	0500260e 	bge	zero,r20,9628 <altera_avalon_lcd_16207_write+0x2b0>
    {
      sp->y = parm1 - 1;
    9590:	a0bfffc4 	addi	r2,r20,-1
    9594:	1009883a 	mov	r4,r2
    9598:	98800885 	stb	r2,34(r19)
      if (sp->y > ALT_LCD_HEIGHT * 2)
    959c:	01400104 	movi	r5,4
    95a0:	10c03fcc 	andi	r3,r2,255
    95a4:	28803fcc 	andi	r2,r5,255
    95a8:	10c0022e 	bgeu	r2,r3,95b4 <altera_avalon_lcd_16207_write+0x23c>
        sp->y = ALT_LCD_HEIGHT * 2;
    95ac:	99400885 	stb	r5,34(r19)
    95b0:	00000306 	br	95c0 <altera_avalon_lcd_16207_write+0x248>
      while (sp->y > ALT_LCD_HEIGHT)
    95b4:	20803fcc 	andi	r2,r4,255
    95b8:	00c00084 	movi	r3,2
    95bc:	18801a2e 	bgeu	r3,r2,9628 <altera_avalon_lcd_16207_write+0x2b0>
        lcd_scroll_up(sp);
    95c0:	9809883a 	mov	r4,r19
    95c4:	00092dc0 	call	92dc <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
    95c8:	98800883 	ldbu	r2,34(r19)
    95cc:	00c00084 	movi	r3,2
    95d0:	1880152e 	bgeu	r3,r2,9628 <altera_avalon_lcd_16207_write+0x2b0>
    95d4:	003ffa06 	br	95c0 <altera_avalon_lcd_16207_write+0x248>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
    95d8:	00800084 	movi	r2,2
    95dc:	a080121e 	bne	r20,r2,9628 <altera_avalon_lcd_16207_write+0x2b0>
      lcd_clear_screen(sp);
    95e0:	9809883a 	mov	r4,r19
    95e4:	000913c0 	call	913c <lcd_clear_screen>
    95e8:	00000f06 	br	9628 <altera_avalon_lcd_16207_write+0x2b0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
    95ec:	05000e16 	blt	zero,r20,9628 <altera_avalon_lcd_16207_write+0x2b0>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
    95f0:	9c400843 	ldbu	r17,33(r19)
    95f4:	008013c4 	movi	r2,79
    95f8:	14400b36 	bltu	r2,r17,9628 <altera_avalon_lcd_16207_write+0x2b0>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    95fc:	04001404 	movi	r16,80
    9600:	8461c83a 	sub	r16,r16,r17
    9604:	99000883 	ldbu	r4,34(r19)
    9608:	014018c4 	movi	r5,99
    960c:	0008c080 	call	8c08 <__mulsi3>
    9610:	8885883a 	add	r2,r17,r2
    9614:	10801004 	addi	r2,r2,64
    9618:	9889883a 	add	r4,r19,r2
    961c:	01400804 	movi	r5,32
    9620:	800d883a 	mov	r6,r16
    9624:	000a0a00 	call	a0a0 <memset>
      {
        sp->escape[esccount] = 0;

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
    9628:	00bfffc4 	movi	r2,-1
    962c:	98800905 	stb	r2,36(r19)
    9630:	00004c06 	br	9764 <altera_avalon_lcd_16207_write+0x3ec>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
    9634:	18c03fcc 	andi	r3,r3,255
    9638:	00800184 	movi	r2,6
    963c:	10c04936 	bltu	r2,r3,9764 <altera_avalon_lcd_16207_write+0x3ec>
      {
        sp->escape[esccount] = c;
    9640:	24c5883a 	add	r2,r4,r19
    9644:	14800a05 	stb	r18,40(r2)
        sp->esccount++;
    9648:	98800903 	ldbu	r2,36(r19)
    964c:	10800044 	addi	r2,r2,1
    9650:	98800905 	stb	r2,36(r19)
    9654:	00004306 	br	9764 <altera_avalon_lcd_16207_write+0x3ec>
      }
    }
    else if (c == 27) /* ESC */
    9658:	90c03fcc 	andi	r3,r18,255
    965c:	18c0201c 	xori	r3,r3,128
    9660:	18ffe004 	addi	r3,r3,-128
    9664:	008006c4 	movi	r2,27
    9668:	1880021e 	bne	r3,r2,9674 <altera_avalon_lcd_16207_write+0x2fc>
    {
      sp->esccount = 0;
    966c:	98000905 	stb	zero,36(r19)
    9670:	00003c06 	br	9764 <altera_avalon_lcd_16207_write+0x3ec>
    }
    else if (c == '\r')
    9674:	90c03fcc 	andi	r3,r18,255
    9678:	18c0201c 	xori	r3,r3,128
    967c:	18ffe004 	addi	r3,r3,-128
    9680:	00800344 	movi	r2,13
    9684:	1880021e 	bne	r3,r2,9690 <altera_avalon_lcd_16207_write+0x318>
    {
      sp->x = 0;
    9688:	98000845 	stb	zero,33(r19)
    968c:	00003506 	br	9764 <altera_avalon_lcd_16207_write+0x3ec>
    }
    else if (c == '\n')
    9690:	90c03fcc 	andi	r3,r18,255
    9694:	18c0201c 	xori	r3,r3,128
    9698:	18ffe004 	addi	r3,r3,-128
    969c:	00800284 	movi	r2,10
    96a0:	18800a1e 	bne	r3,r2,96cc <altera_avalon_lcd_16207_write+0x354>
    {
      sp->x = 0;
    96a4:	98000845 	stb	zero,33(r19)
      sp->y++;
    96a8:	98800883 	ldbu	r2,34(r19)
    96ac:	10800044 	addi	r2,r2,1
    96b0:	98800885 	stb	r2,34(r19)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
    96b4:	10803fcc 	andi	r2,r2,255
    96b8:	00c00084 	movi	r3,2
    96bc:	1880292e 	bgeu	r3,r2,9764 <altera_avalon_lcd_16207_write+0x3ec>
        lcd_scroll_up(sp);
    96c0:	9809883a 	mov	r4,r19
    96c4:	00092dc0 	call	92dc <lcd_scroll_up>
    96c8:	00002606 	br	9764 <altera_avalon_lcd_16207_write+0x3ec>
    }
    else if (c == '\b')
    96cc:	90c03fcc 	andi	r3,r18,255
    96d0:	18c0201c 	xori	r3,r3,128
    96d4:	18ffe004 	addi	r3,r3,-128
    96d8:	00800204 	movi	r2,8
    96dc:	1880061e 	bne	r3,r2,96f8 <altera_avalon_lcd_16207_write+0x380>
    {
      if (sp->x > 0)
    96e0:	98c00843 	ldbu	r3,33(r19)
    96e4:	18803fcc 	andi	r2,r3,255
    96e8:	10001e26 	beq	r2,zero,9764 <altera_avalon_lcd_16207_write+0x3ec>
        sp->x--;
    96ec:	18bfffc4 	addi	r2,r3,-1
    96f0:	98800845 	stb	r2,33(r19)
    96f4:	00001b06 	br	9764 <altera_avalon_lcd_16207_write+0x3ec>
    }
    else if (isprint(c))
    96f8:	90803fcc 	andi	r2,r18,255
    96fc:	1080201c 	xori	r2,r2,128
    9700:	10bfe004 	addi	r2,r2,-128
    9704:	00c00074 	movhi	r3,1
    9708:	18e9d404 	addi	r3,r3,-22704
    970c:	18c00017 	ldw	r3,0(r3)
    9710:	10c5883a 	add	r2,r2,r3
    9714:	10800007 	ldb	r2,0(r2)
    9718:	108025cc 	andi	r2,r2,151
    971c:	10001126 	beq	r2,zero,9764 <altera_avalon_lcd_16207_write+0x3ec>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
    9720:	98c00883 	ldbu	r3,34(r19)
    9724:	00800044 	movi	r2,1
    9728:	10c0022e 	bgeu	r2,r3,9734 <altera_avalon_lcd_16207_write+0x3bc>
        lcd_scroll_up(sp);
    972c:	9809883a 	mov	r4,r19
    9730:	00092dc0 	call	92dc <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
    9734:	9c000843 	ldbu	r16,33(r19)
    9738:	008013c4 	movi	r2,79
    973c:	14000636 	bltu	r2,r16,9758 <altera_avalon_lcd_16207_write+0x3e0>
        sp->line[sp->y].data[sp->x] = c;
    9740:	99000883 	ldbu	r4,34(r19)
    9744:	014018c4 	movi	r5,99
    9748:	0008c080 	call	8c08 <__mulsi3>
    974c:	14c5883a 	add	r2,r2,r19
    9750:	1405883a 	add	r2,r2,r16
    9754:	14801005 	stb	r18,64(r2)

      sp->x++;
    9758:	98800843 	ldbu	r2,33(r19)
    975c:	10800044 	addi	r2,r2,1
    9760:	98800845 	stb	r2,33(r19)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
    9764:	b5800044 	addi	r22,r22,1
    9768:	b5c03a26 	beq	r22,r23,9854 <altera_avalon_lcd_16207_write+0x4dc>
    976c:	003f1406 	br	93c0 <altera_avalon_lcd_16207_write+0x48>
    9770:	8023883a 	mov	r17,r16
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
      if (sp->line[y].data[width-1] != ' ')
    9774:	8c3fffc4 	addi	r16,r17,-1
    9778:	9009883a 	mov	r4,r18
    977c:	014018c4 	movi	r5,99
    9780:	0008c080 	call	8c08 <__mulsi3>
    9784:	14c5883a 	add	r2,r2,r19
    9788:	1405883a 	add	r2,r2,r16
    978c:	10c01007 	ldb	r3,64(r2)
    9790:	00800804 	movi	r2,32
    9794:	18800326 	beq	r3,r2,97a4 <altera_avalon_lcd_16207_write+0x42c>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
    9798:	00800404 	movi	r2,16
    979c:	14400316 	blt	r2,r17,97ac <altera_avalon_lcd_16207_write+0x434>
    97a0:	00000406 	br	97b4 <altera_avalon_lcd_16207_write+0x43c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
    97a4:	803ff21e 	bne	r16,zero,9770 <altera_avalon_lcd_16207_write+0x3f8>
    97a8:	00000206 	br	97b4 <altera_avalon_lcd_16207_write+0x43c>
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
      width = ALT_LCD_WIDTH;
    else
      width++;
    97ac:	88800044 	addi	r2,r17,1
    97b0:	00000106 	br	97b8 <altera_avalon_lcd_16207_write+0x440>
    97b4:	00800404 	movi	r2,16

    sp->line[y].width = width;
    97b8:	a0802445 	stb	r2,145(r20)
    97bc:	a880010e 	bge	r21,r2,97c4 <altera_avalon_lcd_16207_write+0x44c>
    97c0:	102b883a 	mov	r21,r2
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
    97c4:	a0002485 	stb	zero,146(r20)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    97c8:	94800044 	addi	r18,r18,1
    97cc:	a50018c4 	addi	r20,r20,99
    97d0:	00800084 	movi	r2,2
    97d4:	90801d1e 	bne	r18,r2,984c <altera_avalon_lcd_16207_write+0x4d4>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
    97d8:	00800404 	movi	r2,16
    97dc:	15400216 	blt	r2,r21,97e8 <altera_avalon_lcd_16207_write+0x470>
    sp->scrollmax = 0;
    97e0:	98000985 	stb	zero,38(r19)
    97e4:	00001006 	br	9828 <altera_avalon_lcd_16207_write+0x4b0>
  else
  {
    widthmax *= 2;
    97e8:	ad61883a 	add	r16,r21,r21
    sp->scrollmax = widthmax;
    97ec:	9c000985 	stb	r16,38(r19)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
      if (sp->line[y].width > ALT_LCD_WIDTH)
    97f0:	99002447 	ldb	r4,145(r19)
    97f4:	00800404 	movi	r2,16
    97f8:	1100040e 	bge	r2,r4,980c <altera_avalon_lcd_16207_write+0x494>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
    97fc:	2008923a 	slli	r4,r4,8
    9800:	800b883a 	mov	r5,r16
    9804:	0008b380 	call	8b38 <__divsi3>
    9808:	98802485 	stb	r2,146(r19)
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
      if (sp->line[y].width > ALT_LCD_WIDTH)
    980c:	99003d07 	ldb	r4,244(r19)
    9810:	00800404 	movi	r2,16
    9814:	1100040e 	bge	r2,r4,9828 <altera_avalon_lcd_16207_write+0x4b0>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
    9818:	2008923a 	slli	r4,r4,8
    981c:	800b883a 	mov	r5,r16
    9820:	0008b380 	call	8b38 <__divsi3>
    9824:	98803d45 	stb	r2,245(r19)
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
    9828:	9c000947 	ldb	r16,37(r19)

    lcd_repaint_screen(sp);
    982c:	9809883a 	mov	r4,r19
    9830:	0008f240 	call	8f24 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
    9834:	980009c5 	stb	zero,39(r19)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
    9838:	98800947 	ldb	r2,37(r19)
    983c:	80800926 	beq	r16,r2,9864 <altera_avalon_lcd_16207_write+0x4ec>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
    9840:	00800044 	movi	r2,1
    9844:	988009c5 	stb	r2,39(r19)
    9848:	003ff706 	br	9828 <altera_avalon_lcd_16207_write+0x4b0>
  }
    984c:	04401404 	movi	r17,80
    9850:	003fc806 	br	9774 <altera_avalon_lcd_16207_write+0x3fc>
    9854:	9829883a 	mov	r20,r19
    9858:	05400404 	movi	r21,16
    985c:	0025883a 	mov	r18,zero
    9860:	003ffa06 	br	984c <altera_avalon_lcd_16207_write+0x4d4>
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
}
    9864:	d8800017 	ldw	r2,0(sp)
    9868:	dfc00a17 	ldw	ra,40(sp)
    986c:	df000917 	ldw	fp,36(sp)
    9870:	ddc00817 	ldw	r23,32(sp)
    9874:	dd800717 	ldw	r22,28(sp)
    9878:	dd400617 	ldw	r21,24(sp)
    987c:	dd000517 	ldw	r20,20(sp)
    9880:	dcc00417 	ldw	r19,16(sp)
    9884:	dc800317 	ldw	r18,12(sp)
    9888:	dc400217 	ldw	r17,8(sp)
    988c:	dc000117 	ldw	r16,4(sp)
    9890:	dec00b04 	addi	sp,sp,44
    9894:	f800283a 	ret

00009898 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9898:	deffff04 	addi	sp,sp,-4
    989c:	dfc00015 	stw	ra,0(sp)
    98a0:	2005883a 	mov	r2,r4
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
    98a4:	21000017 	ldw	r4,0(r4)
    98a8:	21000a04 	addi	r4,r4,40
    98ac:	11c00217 	ldw	r7,8(r2)
    98b0:	00093780 	call	9378 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
    98b4:	dfc00017 	ldw	ra,0(sp)
    98b8:	dec00104 	addi	sp,sp,4
    98bc:	f800283a 	ret

000098c0 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    98c0:	00800074 	movhi	r2,1
    98c4:	10aacf04 	addi	r2,r2,-21700
    98c8:	10800017 	ldw	r2,0(r2)
    98cc:	1000021e 	bne	r2,zero,98d8 <alt_alarm_start+0x18>
    98d0:	00bfde84 	movi	r2,-134
    98d4:	f800283a 	ret
  {
    if (alarm)
    98d8:	2000021e 	bne	r4,zero,98e4 <alt_alarm_start+0x24>
    98dc:	00bffa84 	movi	r2,-22
    98e0:	f800283a 	ret
    {
      alarm->callback = callback;
    98e4:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    98e8:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    98ec:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    98f0:	00bfff84 	movi	r2,-2
    98f4:	3884703a 	and	r2,r7,r2
    98f8:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    98fc:	00800074 	movhi	r2,1
    9900:	10aad004 	addi	r2,r2,-21696
    9904:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    9908:	01800044 	movi	r6,1
    990c:	1985883a 	add	r2,r3,r6
    9910:	2885883a 	add	r2,r5,r2
    9914:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    9918:	10c0022e 	bgeu	r2,r3,9924 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    991c:	21800405 	stb	r6,16(r4)
    9920:	00000106 	br	9928 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    9924:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9928:	00800074 	movhi	r2,1
    992c:	10a9d204 	addi	r2,r2,-22712
    9930:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    9934:	10c00017 	ldw	r3,0(r2)
    9938:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    993c:	10c00017 	ldw	r3,0(r2)
    9940:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    9944:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9948:	3801703a 	wrctl	status,r7
    994c:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    9950:	f800283a 	ret

00009954 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9954:	f800283a 	ret

00009958 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    9958:	3005883a 	mov	r2,r6
    995c:	f800283a 	ret

00009960 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9960:	deffff04 	addi	sp,sp,-4
    9964:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9968:	20000226 	beq	r4,zero,9974 <alt_dev_llist_insert+0x14>
    996c:	20800217 	ldw	r2,8(r4)
    9970:	10000d1e 	bne	r2,zero,99a8 <alt_dev_llist_insert+0x48>
    9974:	00800074 	movhi	r2,1
    9978:	10a9d104 	addi	r2,r2,-22716
    997c:	10800017 	ldw	r2,0(r2)
    9980:	1000031e 	bne	r2,zero,9990 <alt_dev_llist_insert+0x30>
    9984:	00c00074 	movhi	r3,1
    9988:	18eacb04 	addi	r3,r3,-21716
    998c:	00000206 	br	9998 <alt_dev_llist_insert+0x38>
    9990:	103ee83a 	callr	r2
    9994:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    9998:	00800584 	movi	r2,22
    999c:	18800015 	stw	r2,0(r3)
    99a0:	00bffa84 	movi	r2,-22
    99a4:	00000706 	br	99c4 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    99a8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    99ac:	28800017 	ldw	r2,0(r5)
    99b0:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    99b4:	28800017 	ldw	r2,0(r5)
    99b8:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    99bc:	29000015 	stw	r4,0(r5)
    99c0:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    99c4:	dfc00017 	ldw	ra,0(sp)
    99c8:	dec00104 	addi	sp,sp,4
    99cc:	f800283a 	ret

000099d0 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    99d0:	f800283a 	ret

000099d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    99d4:	defffd04 	addi	sp,sp,-12
    99d8:	dfc00215 	stw	ra,8(sp)
    99dc:	dc400115 	stw	r17,4(sp)
    99e0:	dc000015 	stw	r16,0(sp)
    99e4:	2023883a 	mov	r17,r4
  int old;

  old = open (name, flags, mode);
    99e8:	2809883a 	mov	r4,r5
    99ec:	300b883a 	mov	r5,r6
    99f0:	380d883a 	mov	r6,r7
    99f4:	0009ae40 	call	9ae4 <open>
    99f8:	1021883a 	mov	r16,r2

  if (old >= 0)
    99fc:	10000e16 	blt	r2,zero,9a38 <alt_open_fd+0x64>
  {
    fd->dev      = alt_fd_list[old].dev;
    9a00:	1009883a 	mov	r4,r2
    9a04:	01400304 	movi	r5,12
    9a08:	0008c080 	call	8c08 <__mulsi3>
    9a0c:	00c00074 	movhi	r3,1
    9a10:	18e96904 	addi	r3,r3,-23132
    9a14:	10c5883a 	add	r2,r2,r3
    9a18:	10c00017 	ldw	r3,0(r2)
    9a1c:	88c00015 	stw	r3,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    9a20:	10c00117 	ldw	r3,4(r2)
    9a24:	88c00115 	stw	r3,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9a28:	10800217 	ldw	r2,8(r2)
    9a2c:	88800215 	stw	r2,8(r17)

    alt_release_fd (old);
    9a30:	8009883a 	mov	r4,r16
    9a34:	0009c680 	call	9c68 <alt_release_fd>
  }
} 
    9a38:	dfc00217 	ldw	ra,8(sp)
    9a3c:	dc400117 	ldw	r17,4(sp)
    9a40:	dc000017 	ldw	r16,0(sp)
    9a44:	dec00304 	addi	sp,sp,12
    9a48:	f800283a 	ret

00009a4c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9a4c:	defffa04 	addi	sp,sp,-24
    9a50:	dfc00515 	stw	ra,20(sp)
    9a54:	dd000415 	stw	r20,16(sp)
    9a58:	dcc00315 	stw	r19,12(sp)
    9a5c:	dc800215 	stw	r18,8(sp)
    9a60:	dc400115 	stw	r17,4(sp)
    9a64:	dc000015 	stw	r16,0(sp)
    9a68:	2005883a 	mov	r2,r4
    9a6c:	2827883a 	mov	r19,r5
    9a70:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9a74:	04000074 	movhi	r16,1
    9a78:	84296c04 	addi	r16,r16,-23120
    9a7c:	04800044 	movi	r18,1
    9a80:	04407fc4 	movi	r17,511
    9a84:	8009883a 	mov	r4,r16
    9a88:	100b883a 	mov	r5,r2
    9a8c:	900d883a 	mov	r6,r18
    9a90:	880f883a 	mov	r7,r17
    9a94:	00099d40 	call	99d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9a98:	843ffd04 	addi	r16,r16,-12
    9a9c:	8009883a 	mov	r4,r16
    9aa0:	980b883a 	mov	r5,r19
    9aa4:	000d883a 	mov	r6,zero
    9aa8:	880f883a 	mov	r7,r17
    9aac:	00099d40 	call	99d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9ab0:	81000604 	addi	r4,r16,24
    9ab4:	a00b883a 	mov	r5,r20
    9ab8:	900d883a 	mov	r6,r18
    9abc:	880f883a 	mov	r7,r17
    9ac0:	00099d40 	call	99d4 <alt_open_fd>
}  
    9ac4:	dfc00517 	ldw	ra,20(sp)
    9ac8:	dd000417 	ldw	r20,16(sp)
    9acc:	dcc00317 	ldw	r19,12(sp)
    9ad0:	dc800217 	ldw	r18,8(sp)
    9ad4:	dc400117 	ldw	r17,4(sp)
    9ad8:	dc000017 	ldw	r16,0(sp)
    9adc:	dec00604 	addi	sp,sp,24
    9ae0:	f800283a 	ret

00009ae4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9ae4:	defff904 	addi	sp,sp,-28
    9ae8:	dfc00615 	stw	ra,24(sp)
    9aec:	dd400515 	stw	r21,20(sp)
    9af0:	dd000415 	stw	r20,16(sp)
    9af4:	dcc00315 	stw	r19,12(sp)
    9af8:	dc800215 	stw	r18,8(sp)
    9afc:	dc400115 	stw	r17,4(sp)
    9b00:	dc000015 	stw	r16,0(sp)
    9b04:	2029883a 	mov	r20,r4
    9b08:	2827883a 	mov	r19,r5
    9b0c:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9b10:	01400074 	movhi	r5,1
    9b14:	2969ce04 	addi	r5,r5,-22728
    9b18:	0009e6c0 	call	9e6c <alt_find_dev>
    9b1c:	1021883a 	mov	r16,r2
    9b20:	10000226 	beq	r2,zero,9b2c <open+0x48>
    9b24:	0025883a 	mov	r18,zero
    9b28:	00000a06 	br	9b54 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9b2c:	a009883a 	mov	r4,r20
    9b30:	0009edc0 	call	9edc <alt_find_file>
    9b34:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9b38:	1000051e 	bne	r2,zero,9b50 <open+0x6c>
    9b3c:	047fffc4 	movi	r17,-1
    9b40:	043ffb44 	movi	r16,-19
    9b44:	00002d06 	br	9bfc <open+0x118>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9b48:	043ffcc4 	movi	r16,-13
    9b4c:	00002b06 	br	9bfc <open+0x118>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9b50:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    9b54:	8009883a 	mov	r4,r16
    9b58:	0009f980 	call	9f98 <alt_get_fd>
    9b5c:	1023883a 	mov	r17,r2
    9b60:	10003516 	blt	r2,zero,9c38 <open+0x154>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    9b64:	1009883a 	mov	r4,r2
    9b68:	01400304 	movi	r5,12
    9b6c:	0008c080 	call	8c08 <__mulsi3>
    9b70:	02000074 	movhi	r8,1
    9b74:	42296904 	addi	r8,r8,-23132
    9b78:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9b7c:	00900034 	movhi	r2,16384
    9b80:	10bfffc4 	addi	r2,r2,-1
    9b84:	9886703a 	and	r3,r19,r2
    9b88:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9b8c:	9004c03a 	cmpne	r2,r18,zero
    9b90:	1000121e 	bne	r2,zero,9bdc <open+0xf8>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9b94:	18900034 	orhi	r2,r3,16384
    9b98:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9b9c:	00800074 	movhi	r2,1
    9ba0:	10a9d004 	addi	r2,r2,-22720
    9ba4:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9ba8:	21800017 	ldw	r6,0(r4)
    9bac:	000b883a 	mov	r5,zero
    9bb0:	4007883a 	mov	r3,r8
    9bb4:	02400044 	movi	r9,1
    9bb8:	02000304 	movi	r8,12
    9bbc:	18800017 	ldw	r2,0(r3)
    9bc0:	1180031e 	bne	r2,r6,9bd0 <open+0xec>
    9bc4:	18800217 	ldw	r2,8(r3)
    9bc8:	1000010e 	bge	r2,zero,9bd0 <open+0xec>
    9bcc:	193fde1e 	bne	r3,r4,9b48 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9bd0:	2a4b883a 	add	r5,r5,r9
    9bd4:	1a07883a 	add	r3,r3,r8
    9bd8:	397ff82e 	bgeu	r7,r5,9bbc <open+0xd8>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9bdc:	80800317 	ldw	r2,12(r16)
    9be0:	10001726 	beq	r2,zero,9c40 <open+0x15c>
    9be4:	a00b883a 	mov	r5,r20
    9be8:	980d883a 	mov	r6,r19
    9bec:	a80f883a 	mov	r7,r21
    9bf0:	103ee83a 	callr	r2
    9bf4:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9bf8:	1000110e 	bge	r2,zero,9c40 <open+0x15c>
  {
    alt_release_fd (index);  
    9bfc:	8809883a 	mov	r4,r17
    9c00:	0009c680 	call	9c68 <alt_release_fd>
    9c04:	00800074 	movhi	r2,1
    9c08:	10a9d104 	addi	r2,r2,-22716
    9c0c:	10800017 	ldw	r2,0(r2)
    9c10:	1000031e 	bne	r2,zero,9c20 <open+0x13c>
    9c14:	00c00074 	movhi	r3,1
    9c18:	18eacb04 	addi	r3,r3,-21716
    9c1c:	00000206 	br	9c28 <open+0x144>
    9c20:	103ee83a 	callr	r2
    9c24:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    9c28:	0405c83a 	sub	r2,zero,r16
    9c2c:	18800015 	stw	r2,0(r3)
    9c30:	047fffc4 	movi	r17,-1
    9c34:	00000206 	br	9c40 <open+0x15c>
    9c38:	1021883a 	mov	r16,r2
    9c3c:	003fef06 	br	9bfc <open+0x118>
  }
  
  /* return the reference upon success */

  return index;
}
    9c40:	8805883a 	mov	r2,r17
    9c44:	dfc00617 	ldw	ra,24(sp)
    9c48:	dd400517 	ldw	r21,20(sp)
    9c4c:	dd000417 	ldw	r20,16(sp)
    9c50:	dcc00317 	ldw	r19,12(sp)
    9c54:	dc800217 	ldw	r18,8(sp)
    9c58:	dc400117 	ldw	r17,4(sp)
    9c5c:	dc000017 	ldw	r16,0(sp)
    9c60:	dec00704 	addi	sp,sp,28
    9c64:	f800283a 	ret

00009c68 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9c68:	defffc04 	addi	sp,sp,-16
    9c6c:	dfc00315 	stw	ra,12(sp)
    9c70:	dc800215 	stw	r18,8(sp)
    9c74:	dc400115 	stw	r17,4(sp)
    9c78:	dc000015 	stw	r16,0(sp)
    9c7c:	2025883a 	mov	r18,r4
  if (fd > 2)
    9c80:	00800084 	movi	r2,2
    9c84:	11000c0e 	bge	r2,r4,9cb8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    9c88:	04400074 	movhi	r17,1
    9c8c:	8c696904 	addi	r17,r17,-23132
    9c90:	04000304 	movi	r16,12
    9c94:	800b883a 	mov	r5,r16
    9c98:	0008c080 	call	8c08 <__mulsi3>
    9c9c:	1445883a 	add	r2,r2,r17
    9ca0:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    9ca4:	9009883a 	mov	r4,r18
    9ca8:	800b883a 	mov	r5,r16
    9cac:	0008c080 	call	8c08 <__mulsi3>
    9cb0:	1445883a 	add	r2,r2,r17
    9cb4:	10000015 	stw	zero,0(r2)
  }
}
    9cb8:	dfc00317 	ldw	ra,12(sp)
    9cbc:	dc800217 	ldw	r18,8(sp)
    9cc0:	dc400117 	ldw	r17,4(sp)
    9cc4:	dc000017 	ldw	r16,0(sp)
    9cc8:	dec00404 	addi	sp,sp,16
    9ccc:	f800283a 	ret

00009cd0 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9cd0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9cd4:	00bfff84 	movi	r2,-2
    9cd8:	2884703a 	and	r2,r5,r2
    9cdc:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    9ce0:	20c00017 	ldw	r3,0(r4)
    9ce4:	20800117 	ldw	r2,4(r4)
    9ce8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    9cec:	20800117 	ldw	r2,4(r4)
    9cf0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    9cf4:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    9cf8:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9cfc:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    9d00:	f800283a 	ret

00009d04 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    9d04:	defffd04 	addi	sp,sp,-12
    9d08:	dfc00215 	stw	ra,8(sp)
    9d0c:	dc400115 	stw	r17,4(sp)
    9d10:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    9d14:	d4200917 	ldw	r16,-32732(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    9d18:	d0a10717 	ldw	r2,-31716(gp)
    9d1c:	10800044 	addi	r2,r2,1
    9d20:	d0a10715 	stw	r2,-31716(gp)
    9d24:	00001b06 	br	9d94 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    9d28:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    9d2c:	80800403 	ldbu	r2,16(r16)
    9d30:	10000326 	beq	r2,zero,9d40 <alt_tick+0x3c>
    9d34:	d0a10717 	ldw	r2,-31716(gp)
    9d38:	1000011e 	bne	r2,zero,9d40 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    9d3c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    9d40:	d0e10717 	ldw	r3,-31716(gp)
    9d44:	80800217 	ldw	r2,8(r16)
    9d48:	18801136 	bltu	r3,r2,9d90 <alt_tick+0x8c>
    9d4c:	80800403 	ldbu	r2,16(r16)
    9d50:	10000f1e 	bne	r2,zero,9d90 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    9d54:	80800317 	ldw	r2,12(r16)
    9d58:	81000517 	ldw	r4,20(r16)
    9d5c:	103ee83a 	callr	r2
    9d60:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    9d64:	1000031e 	bne	r2,zero,9d74 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    9d68:	8009883a 	mov	r4,r16
    9d6c:	0009cd00 	call	9cd0 <alt_alarm_stop>
    9d70:	00000706 	br	9d90 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    9d74:	80800217 	ldw	r2,8(r16)
    9d78:	1885883a 	add	r2,r3,r2
    9d7c:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    9d80:	d0e10717 	ldw	r3,-31716(gp)
    9d84:	10c0022e 	bgeu	r2,r3,9d90 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    9d88:	00800044 	movi	r2,1
    9d8c:	80800405 	stb	r2,16(r16)
    9d90:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9d94:	d0a00904 	addi	r2,gp,-32732
    9d98:	80bfe31e 	bne	r16,r2,9d28 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    9d9c:	dfc00217 	ldw	ra,8(sp)
    9da0:	dc400117 	ldw	r17,4(sp)
    9da4:	dc000017 	ldw	r16,0(sp)
    9da8:	dec00304 	addi	sp,sp,12
    9dac:	f800283a 	ret

00009db0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    9db0:	deffff04 	addi	sp,sp,-4
    9db4:	dfc00015 	stw	ra,0(sp)
  return alt_busy_sleep(us);
    9db8:	0009dd00 	call	9dd0 <alt_busy_sleep>
}
    9dbc:	dfc00017 	ldw	ra,0(sp)
    9dc0:	dec00104 	addi	sp,sp,4
    9dc4:	f800283a 	ret

00009dc8 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    9dc8:	000170fa 	wrctl	ienable,zero
}
    9dcc:	f800283a 	ret

00009dd0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9dd0:	defffe04 	addi	sp,sp,-8
    9dd4:	dfc00115 	stw	ra,4(sp)
    9dd8:	dc000015 	stw	r16,0(sp)
    9ddc:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9de0:	014666b4 	movhi	r5,6554
    9de4:	29666644 	addi	r5,r5,-26215
    9de8:	0008bf80 	call	8bf8 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    9dec:	10001526 	beq	r2,zero,9e44 <alt_busy_sleep+0x74>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9df0:	100b883a 	mov	r5,r2
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9df4:	00800d0e 	bge	zero,r2,9e2c <alt_busy_sleep+0x5c>
    9df8:	0007883a 	mov	r3,zero
    9dfc:	01200034 	movhi	r4,32768
    9e00:	213fffc4 	addi	r4,r4,-1
    9e04:	01800044 	movi	r6,1
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9e08:	213fffc4 	addi	r4,r4,-1
    9e0c:	203ffe1e 	bne	r4,zero,9e08 <alt_busy_sleep+0x38>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9e10:	1987883a 	add	r3,r3,r6
    9e14:	28fffc1e 	bne	r5,r3,9e08 <alt_busy_sleep+0x38>
    9e18:	1009883a 	mov	r4,r2
    9e1c:	017999b4 	movhi	r5,58982
    9e20:	295999c4 	addi	r5,r5,26215
    9e24:	0008c080 	call	8c08 <__mulsi3>
    9e28:	80a1883a 	add	r16,r16,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9e2c:	8009883a 	mov	r4,r16
    9e30:	01400144 	movi	r5,5
    9e34:	0008c080 	call	8c08 <__mulsi3>
    9e38:	10bfffc4 	addi	r2,r2,-1
    9e3c:	103ffe1e 	bne	r2,zero,9e38 <alt_busy_sleep+0x68>
    9e40:	00000506 	br	9e58 <alt_busy_sleep+0x88>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9e44:	8009883a 	mov	r4,r16
    9e48:	01400144 	movi	r5,5
    9e4c:	0008c080 	call	8c08 <__mulsi3>
    9e50:	10bfffc4 	addi	r2,r2,-1
    9e54:	00bffe16 	blt	zero,r2,9e50 <alt_busy_sleep+0x80>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    9e58:	0005883a 	mov	r2,zero
    9e5c:	dfc00117 	ldw	ra,4(sp)
    9e60:	dc000017 	ldw	r16,0(sp)
    9e64:	dec00204 	addi	sp,sp,8
    9e68:	f800283a 	ret

00009e6c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9e6c:	defffb04 	addi	sp,sp,-20
    9e70:	dfc00415 	stw	ra,16(sp)
    9e74:	dcc00315 	stw	r19,12(sp)
    9e78:	dc800215 	stw	r18,8(sp)
    9e7c:	dc400115 	stw	r17,4(sp)
    9e80:	dc000015 	stw	r16,0(sp)
    9e84:	2027883a 	mov	r19,r4
    9e88:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    9e8c:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    9e90:	00082280 	call	8228 <strlen>
    9e94:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9e98:	8c000726 	beq	r17,r16,9eb8 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9e9c:	89000217 	ldw	r4,8(r17)
    9ea0:	980b883a 	mov	r5,r19
    9ea4:	900d883a 	mov	r6,r18
    9ea8:	000a0380 	call	a038 <memcmp>
    9eac:	10000326 	beq	r2,zero,9ebc <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    9eb0:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9eb4:	847ff91e 	bne	r16,r17,9e9c <alt_find_dev+0x30>
    9eb8:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    9ebc:	8805883a 	mov	r2,r17
    9ec0:	dfc00417 	ldw	ra,16(sp)
    9ec4:	dcc00317 	ldw	r19,12(sp)
    9ec8:	dc800217 	ldw	r18,8(sp)
    9ecc:	dc400117 	ldw	r17,4(sp)
    9ed0:	dc000017 	ldw	r16,0(sp)
    9ed4:	dec00504 	addi	sp,sp,20
    9ed8:	f800283a 	ret

00009edc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9edc:	defff904 	addi	sp,sp,-28
    9ee0:	dfc00615 	stw	ra,24(sp)
    9ee4:	dd400515 	stw	r21,20(sp)
    9ee8:	dd000415 	stw	r20,16(sp)
    9eec:	dcc00315 	stw	r19,12(sp)
    9ef0:	dc800215 	stw	r18,8(sp)
    9ef4:	dc400115 	stw	r17,4(sp)
    9ef8:	dc000015 	stw	r16,0(sp)
    9efc:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9f00:	00800074 	movhi	r2,1
    9f04:	10a9cc04 	addi	r2,r2,-22736
    9f08:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9f0c:	102b883a 	mov	r21,r2
    9f10:	88801626 	beq	r17,r2,9f6c <alt_find_file+0x90>
    9f14:	053fffc4 	movi	r20,-1
    9f18:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    9f1c:	8c000217 	ldw	r16,8(r17)
    9f20:	8009883a 	mov	r4,r16
    9f24:	00082280 	call	8228 <strlen>
    9f28:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    9f2c:	8085883a 	add	r2,r16,r2
    9f30:	1505883a 	add	r2,r2,r20
    9f34:	10800007 	ldb	r2,0(r2)
    9f38:	14c0011e 	bne	r2,r19,9f40 <alt_find_file+0x64>
    {
      len -= 1;
    9f3c:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9f40:	1c85883a 	add	r2,r3,r18
    9f44:	10800007 	ldb	r2,0(r2)
    9f48:	14c00126 	beq	r2,r19,9f50 <alt_find_file+0x74>
    9f4c:	1000051e 	bne	r2,zero,9f64 <alt_find_file+0x88>
    9f50:	8009883a 	mov	r4,r16
    9f54:	900b883a 	mov	r5,r18
    9f58:	180d883a 	mov	r6,r3
    9f5c:	000a0380 	call	a038 <memcmp>
    9f60:	10000326 	beq	r2,zero,9f70 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    9f64:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9f68:	8d7fec1e 	bne	r17,r21,9f1c <alt_find_file+0x40>
    9f6c:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    9f70:	8805883a 	mov	r2,r17
    9f74:	dfc00617 	ldw	ra,24(sp)
    9f78:	dd400517 	ldw	r21,20(sp)
    9f7c:	dd000417 	ldw	r20,16(sp)
    9f80:	dcc00317 	ldw	r19,12(sp)
    9f84:	dc800217 	ldw	r18,8(sp)
    9f88:	dc400117 	ldw	r17,4(sp)
    9f8c:	dc000017 	ldw	r16,0(sp)
    9f90:	dec00704 	addi	sp,sp,28
    9f94:	f800283a 	ret

00009f98 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9f98:	defffb04 	addi	sp,sp,-20
    9f9c:	dfc00415 	stw	ra,16(sp)
    9fa0:	dcc00315 	stw	r19,12(sp)
    9fa4:	dc800215 	stw	r18,8(sp)
    9fa8:	dc400115 	stw	r17,4(sp)
    9fac:	dc000015 	stw	r16,0(sp)
    9fb0:	2025883a 	mov	r18,r4
    9fb4:	0021883a 	mov	r16,zero
    9fb8:	00c00074 	movhi	r3,1
    9fbc:	18e96904 	addi	r3,r3,-23132
    9fc0:	04c00074 	movhi	r19,1
    9fc4:	9ce9d004 	addi	r19,r19,-22720
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    9fc8:	18800017 	ldw	r2,0(r3)
    9fcc:	10000e1e 	bne	r2,zero,a008 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
    9fd0:	8009883a 	mov	r4,r16
    9fd4:	01400304 	movi	r5,12
    9fd8:	0008c080 	call	8c08 <__mulsi3>
    9fdc:	00c00074 	movhi	r3,1
    9fe0:	18e96904 	addi	r3,r3,-23132
    9fe4:	10c5883a 	add	r2,r2,r3
    9fe8:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
    9fec:	98800017 	ldw	r2,0(r19)
    9ff0:	14000216 	blt	r2,r16,9ffc <alt_get_fd+0x64>
    9ff4:	8005883a 	mov	r2,r16
    9ff8:	00000806 	br	a01c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    9ffc:	9c000015 	stw	r16,0(r19)
    a000:	8005883a 	mov	r2,r16
    a004:	00000506 	br	a01c <alt_get_fd+0x84>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a008:	84000044 	addi	r16,r16,1
    a00c:	18c00304 	addi	r3,r3,12
    a010:	00800804 	movi	r2,32
    a014:	80bfec1e 	bne	r16,r2,9fc8 <alt_get_fd+0x30>
    a018:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    a01c:	dfc00417 	ldw	ra,16(sp)
    a020:	dcc00317 	ldw	r19,12(sp)
    a024:	dc800217 	ldw	r18,8(sp)
    a028:	dc400117 	ldw	r17,4(sp)
    a02c:	dc000017 	ldw	r16,0(sp)
    a030:	dec00504 	addi	sp,sp,20
    a034:	f800283a 	ret

0000a038 <memcmp>:
    a038:	31ffffc4 	addi	r7,r6,-1
    a03c:	3000061e 	bne	r6,zero,a058 <memcmp+0x20>
    a040:	00000a06 	br	a06c <memcmp+0x34>
    a044:	39ffffc4 	addi	r7,r7,-1
    a048:	00bfffc4 	movi	r2,-1
    a04c:	21000044 	addi	r4,r4,1
    a050:	29400044 	addi	r5,r5,1
    a054:	38800526 	beq	r7,r2,a06c <memcmp+0x34>
    a058:	20c00003 	ldbu	r3,0(r4)
    a05c:	28800003 	ldbu	r2,0(r5)
    a060:	18bff826 	beq	r3,r2,a044 <memcmp+0xc>
    a064:	1885c83a 	sub	r2,r3,r2
    a068:	f800283a 	ret
    a06c:	0005883a 	mov	r2,zero
    a070:	f800283a 	ret

0000a074 <memcpy>:
    a074:	2011883a 	mov	r8,r4
    a078:	30000726 	beq	r6,zero,a098 <memcpy+0x24>
    a07c:	000f883a 	mov	r7,zero
    a080:	29c5883a 	add	r2,r5,r7
    a084:	11000003 	ldbu	r4,0(r2)
    a088:	41c7883a 	add	r3,r8,r7
    a08c:	39c00044 	addi	r7,r7,1
    a090:	19000005 	stb	r4,0(r3)
    a094:	39bffa1e 	bne	r7,r6,a080 <memcpy+0xc>
    a098:	4005883a 	mov	r2,r8
    a09c:	f800283a 	ret

0000a0a0 <memset>:
    a0a0:	30000526 	beq	r6,zero,a0b8 <memset+0x18>
    a0a4:	310d883a 	add	r6,r6,r4
    a0a8:	2005883a 	mov	r2,r4
    a0ac:	11400005 	stb	r5,0(r2)
    a0b0:	10800044 	addi	r2,r2,1
    a0b4:	11bffd1e 	bne	r2,r6,a0ac <memset+0xc>
    a0b8:	2005883a 	mov	r2,r4
    a0bc:	f800283a 	ret
