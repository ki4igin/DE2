
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004168

Program Header:
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00003424 memsz 0x00003540 flags rwx
    LOAD off    0x00005000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00009000  00009000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001eac  00004168  00004168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00006014  00006014  00003014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000013e4  00006060  00006060  00003060  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  00007444  00007444  00004444  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000004d0  00000000  00000000  00005028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000915  00000000  00000000  000054f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007e77  00000000  00000000  00005e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000282f  00000000  00000000  0000dc84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005f94  00000000  00000000  000104b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000810  00000000  00000000  00016448  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000017d9  00000000  00000000  00016c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001da3  00000000  00000000  00018431  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001a1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001a8  00000000  00000000  0001a1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001bd5f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001bd62  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001bd65  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001bd66  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001bd67  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001bd6b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001bd6f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001bd73  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001bd7c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001bd85  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  0001bd8e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000019  00000000  00000000  0001bd92  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003011c  00000000  00000000  0001bdab  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00009000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004168 l    d  .text	00000000 .text
00006014 l    d  .rodata	00000000 .rodata
00006060 l    d  .rwdata	00000000 .rwdata
00007444 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0000419c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00006060 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00006140 l     O .rwdata	000000c8 epcs_flash
00006208 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00004be0 l     F .text	00000054 altera_avalon_jtag_uart_timeout
00004cb4 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 epcs_commands.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000569c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005898 l     F .text	00000078 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00004590 g     F .text	00000038 alt_epcs_flash_get_info
000043cc g     F .text	00000044 alt_main
000041d4 g     F .text	00000090 _puts_r
00007460 g     O .bss	00000100 alt_irq
00009000 g       *ABS*	00000000 __alt_mem_epcs_flash
00000000  w      *UND*	00000000 __errno
00005308 g     F .text	000000cc epcs_sector_erase
00009000 g     F .entry	00000000 __reset
00007444 g     O .bss	00000004 errno
0000744c g     O .bss	00000004 alt_argv
0000f410 g       *ABS*	00000000 _gp
00007290 g     O .rwdata	00000180 alt_fd_list
000055b0 g     F .text	00000058 epcs_write_status_register
00005da8 g     F .text	00000070 alt_find_dev
00005fb0 g     F .text	0000002c memcpy
00005910 g     F .text	00000098 alt_io_redirect
00004264 g     F .text	00000014 puts
00004638 g     F .text	000000d8 alt_epcs_flash_write_block
00004e5c g     F .text	00000168 altera_avalon_jtag_uart_read
00007428 g     O .rwdata	00000004 alt_max_fd
00004ab8 g     F .text	00000058 alt_epcs_flash_erase_block
00007414 g     O .rwdata	00000004 _global_impure_ptr
0000522c g     F .text	0000004c epcs_exit_4_bytes_mode
00007560 g       *ABS*	00000000 __bss_end
00005830 g     F .text	00000068 alt_iic_isr_register
00005bc8 g     F .text	000000ac alt_tick
00005778 g     F .text	00000018 alt_ic_irq_enabled
00005b94 g     F .text	00000034 alt_alarm_stop
00007454 g     O .bss	00000004 alt_irq_active
000040ec g     F .exceptions	0000007c alt_irq_handler
00007268 g     O .rwdata	00000028 alt_dev_null
00007420 g     O .rwdata	00000008 alt_dev_list
00004410 g     F .text	00000110 write
000051a0 g     F .text	00000054 epcs_read_electronic_signature
00007560 g       *ABS*	00000000 end
00004c34 g     F .text	00000080 altera_avalon_jtag_uart_init
00008000 g       *ABS*	00000000 __alt_stack_pointer
00004fc4 g     F .text	0000017c altera_avalon_jtag_uart_write
00004168 g     F .text	00000038 _start
00007458 g     O .bss	00000004 _alt_tick_rate
00005c7c g     F .text	0000012c alt_avalon_spi_command
0000745c g     O .bss	00000004 _alt_nticks
00004520 g     F .text	00000050 alt_sys_init
00004ba8 g     F .text	00000038 altera_avalon_jtag_uart_close
00005fdc g     F .text	00000038 __mulsi3
000052c4 g     F .text	00000044 epcs_read_status_register
00004b80 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00005ed4 g     F .text	000000a0 alt_get_fd
00005140 g     F .text	00000060 epcs_read_device_id
00005f74 g     F .text	0000003c memcmp
00004b30 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
00007560 g       *ABS*	00000000 __alt_stack_base
00004b10 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00005e18 g     F .text	000000bc alt_find_file
000056a4 g     F .text	00000070 alt_dev_llist_insert
00007430 g     O .rwdata	00000008 alt_flash_dev_list
00004298 g     F .text	000000bc __sfvwrite_small_dev
00007444 g       *ABS*	00000000 __bss_start
000041a0 g     F .text	00000034 main
00007450 g     O .bss	00000004 alt_envp
00004b58 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
0000742c g     O .rwdata	00000004 alt_errno
00004710 g     F .text	000001c8 alt_epcs_flash_write
00004570 g     F .text	00000020 alt_irq_init
00005b2c g     F .text	00000068 alt_release_fd
00004354 g     F .text	00000078 _write_r
00007410 g     O .rwdata	00000004 _impure_ptr
00007448 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00007418 g     O .rwdata	00000008 alt_fs_list
000054d8 g     F .text	000000d8 epcs_read_buffer
000048d8 g     F .text	000001e0 alt_epcs_flash_init
00004000 g       *ABS*	00000000 __alt_mem_ram_sys
00005810 g     F .text	00000020 alt_ic_isr_register
00007444 g       *ABS*	00000000 _edata
00007560 g       *ABS*	00000000 _end
00005738 g     F .text	00000040 alt_flash_open_dev
00004de8 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
000057d0 g     F .text	00000040 alt_ic_irq_disable
00005278 g     F .text	0000004c epcs_enter_4_bytes_mode
00005c74 g     F .text	00000008 altera_nios2_qsys_irq_init
00009000 g       .entry	00000000 exit
00005714 g     F .text	00000024 alt_flash_close_dev
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
00009000 g       .entry	00000000 _exit
00005608 g     F .text	00000094 alt_alarm_start
00004278 g     F .text	00000020 strlen
000051f4 g     F .text	00000038 epcs_write_enable
000059a8 g     F .text	00000184 open
00007438 g     O .rwdata	00000004 alt_priority_mask
00005790 g     F .text	00000040 alt_ic_irq_enable
000045c8 g     F .text	00000070 alt_epcs_flash_read
0000743c g     O .rwdata	00000008 alt_alarm_list
000053d4 g     F .text	00000104 epcs_write_buffer



Disassembly of section .exceptions:

00004020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    4044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040ec0 	call	40ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000306 	br	4098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    4094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    4098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    40c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    40e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40e8:	ef80083a 	eret

000040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40ec:	defffe04 	addi	sp,sp,-8
    40f0:	dfc00115 	stw	ra,4(sp)
    40f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    40f8:	000d313a 	rdctl	r6,ipending
    40fc:	04000034 	movhi	r16,0
    4100:	841d1804 	addi	r16,r16,29792
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    4104:	3080004c 	andi	r2,r6,1
    4108:	1005003a 	cmpeq	r2,r2,zero
    410c:	10000a1e 	bne	r2,zero,4138 <alt_irq_handler+0x4c>
    4110:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    4114:	200490fa 	slli	r2,r4,3
    4118:	1405883a 	add	r2,r2,r16
    411c:	10c00017 	ldw	r3,0(r2)
    4120:	11000117 	ldw	r4,4(r2)
    4124:	183ee83a 	callr	r3
    4128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    412c:	10000a26 	beq	r2,zero,4158 <alt_irq_handler+0x6c>
    4130:	100d883a 	mov	r6,r2
    4134:	003ff306 	br	4104 <alt_irq_handler+0x18>
    4138:	00c00044 	movi	r3,1
    413c:	0009883a 	mov	r4,zero
    4140:	180b883a 	mov	r5,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4144:	18c7883a 	add	r3,r3,r3
      i++;
    4148:	2149883a 	add	r4,r4,r5
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    414c:	30c4703a 	and	r2,r6,r3
    4150:	103ff01e 	bne	r2,zero,4114 <alt_irq_handler+0x28>
    4154:	003ffb06 	br	4144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4158:	dfc00117 	ldw	ra,4(sp)
    415c:	dc000017 	ldw	r16,0(sp)
    4160:	dec00204 	addi	sp,sp,8
    4164:	f800283a 	ret

Disassembly of section .text:

00004168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4168:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    416c:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    4170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    4174:	d6bd0414 	ori	gp,gp,62480
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    417c:	109d1114 	ori	r2,r2,29764

    movhi r3, %hi(__bss_end)
    4180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    4184:	18dd5814 	ori	r3,r3,30048

    beq r2, r3, 1f
    4188:	10c00326 	beq	r2,r3,4198 <_start+0x30>

0:
    stw zero, (r2)
    418c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    4194:	10fffd36 	bltu	r2,r3,418c <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4198:	00043cc0 	call	43cc <alt_main>

0000419c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    419c:	003fff06 	br	419c <alt_after_alt_main>

000041a0 <main>:
#include <stdio.h>

int main()

{
    41a0:	defffe04 	addi	sp,sp,-8
    41a4:	dfc00115 	stw	ra,4(sp)
    41a8:	df000015 	stw	fp,0(sp)
    41ac:	d839883a 	mov	fp,sp

  printf("First program with Nios II!\n");
    41b0:	01000034 	movhi	r4,0
    41b4:	21180504 	addi	r4,r4,24596
    41b8:	00042640 	call	4264 <puts>

  return 0;
    41bc:	0005883a 	mov	r2,zero

}
    41c0:	e037883a 	mov	sp,fp
    41c4:	dfc00117 	ldw	ra,4(sp)
    41c8:	df000017 	ldw	fp,0(sp)
    41cc:	dec00204 	addi	sp,sp,8
    41d0:	f800283a 	ret

000041d4 <_puts_r>:
    41d4:	defffd04 	addi	sp,sp,-12
    41d8:	dc000015 	stw	r16,0(sp)
    41dc:	2021883a 	mov	r16,r4
    41e0:	2809883a 	mov	r4,r5
    41e4:	dfc00215 	stw	ra,8(sp)
    41e8:	dc400115 	stw	r17,4(sp)
    41ec:	2823883a 	mov	r17,r5
    41f0:	00042780 	call	4278 <strlen>
    41f4:	80c00217 	ldw	r3,8(r16)
    41f8:	02000034 	movhi	r8,0
    41fc:	4210a604 	addi	r8,r8,17048
    4200:	880d883a 	mov	r6,r17
    4204:	100f883a 	mov	r7,r2
    4208:	8009883a 	mov	r4,r16
    420c:	180b883a 	mov	r5,r3
    4210:	1a000115 	stw	r8,4(r3)
    4214:	403ee83a 	callr	r8
    4218:	047fffc4 	movi	r17,-1
    421c:	8009883a 	mov	r4,r16
    4220:	01800034 	movhi	r6,0
    4224:	31980c04 	addi	r6,r6,24624
    4228:	01c00044 	movi	r7,1
    422c:	1440071e 	bne	r2,r17,424c <_puts_r+0x78>
    4230:	00ffffc4 	movi	r3,-1
    4234:	1805883a 	mov	r2,r3
    4238:	dfc00217 	ldw	ra,8(sp)
    423c:	dc400117 	ldw	r17,4(sp)
    4240:	dc000017 	ldw	r16,0(sp)
    4244:	dec00304 	addi	sp,sp,12
    4248:	f800283a 	ret
    424c:	81400217 	ldw	r5,8(r16)
    4250:	28c00117 	ldw	r3,4(r5)
    4254:	183ee83a 	callr	r3
    4258:	0007883a 	mov	r3,zero
    425c:	147ff51e 	bne	r2,r17,4234 <_puts_r+0x60>
    4260:	003ff306 	br	4230 <_puts_r+0x5c>

00004264 <puts>:
    4264:	00800034 	movhi	r2,0
    4268:	109d0404 	addi	r2,r2,29712
    426c:	200b883a 	mov	r5,r4
    4270:	11000017 	ldw	r4,0(r2)
    4274:	00041d41 	jmpi	41d4 <_puts_r>

00004278 <strlen>:
    4278:	20800007 	ldb	r2,0(r4)
    427c:	10000526 	beq	r2,zero,4294 <strlen+0x1c>
    4280:	2007883a 	mov	r3,r4
    4284:	18c00044 	addi	r3,r3,1
    4288:	18800007 	ldb	r2,0(r3)
    428c:	103ffd1e 	bne	r2,zero,4284 <strlen+0xc>
    4290:	1905c83a 	sub	r2,r3,r4
    4294:	f800283a 	ret

00004298 <__sfvwrite_small_dev>:
    4298:	2880000b 	ldhu	r2,0(r5)
    429c:	defffa04 	addi	sp,sp,-24
    42a0:	dcc00315 	stw	r19,12(sp)
    42a4:	1080020c 	andi	r2,r2,8
    42a8:	dc800215 	stw	r18,8(sp)
    42ac:	dc400115 	stw	r17,4(sp)
    42b0:	dfc00515 	stw	ra,20(sp)
    42b4:	dd000415 	stw	r20,16(sp)
    42b8:	dc000015 	stw	r16,0(sp)
    42bc:	2825883a 	mov	r18,r5
    42c0:	2027883a 	mov	r19,r4
    42c4:	3023883a 	mov	r17,r6
    42c8:	10002026 	beq	r2,zero,434c <__sfvwrite_small_dev+0xb4>
    42cc:	2940008f 	ldh	r5,2(r5)
    42d0:	28000f16 	blt	r5,zero,4310 <__sfvwrite_small_dev+0x78>
    42d4:	01c01b0e 	bge	zero,r7,4344 <__sfvwrite_small_dev+0xac>
    42d8:	3821883a 	mov	r16,r7
    42dc:	05010004 	movi	r20,1024
    42e0:	00000206 	br	42ec <__sfvwrite_small_dev+0x54>
    42e4:	0400170e 	bge	zero,r16,4344 <__sfvwrite_small_dev+0xac>
    42e8:	9140008f 	ldh	r5,2(r18)
    42ec:	880d883a 	mov	r6,r17
    42f0:	9809883a 	mov	r4,r19
    42f4:	800f883a 	mov	r7,r16
    42f8:	a400010e 	bge	r20,r16,4300 <__sfvwrite_small_dev+0x68>
    42fc:	01c10004 	movi	r7,1024
    4300:	00043540 	call	4354 <_write_r>
    4304:	88a3883a 	add	r17,r17,r2
    4308:	80a1c83a 	sub	r16,r16,r2
    430c:	00bff516 	blt	zero,r2,42e4 <__sfvwrite_small_dev+0x4c>
    4310:	9080000b 	ldhu	r2,0(r18)
    4314:	00ffffc4 	movi	r3,-1
    4318:	10801014 	ori	r2,r2,64
    431c:	9080000d 	sth	r2,0(r18)
    4320:	1805883a 	mov	r2,r3
    4324:	dfc00517 	ldw	ra,20(sp)
    4328:	dd000417 	ldw	r20,16(sp)
    432c:	dcc00317 	ldw	r19,12(sp)
    4330:	dc800217 	ldw	r18,8(sp)
    4334:	dc400117 	ldw	r17,4(sp)
    4338:	dc000017 	ldw	r16,0(sp)
    433c:	dec00604 	addi	sp,sp,24
    4340:	f800283a 	ret
    4344:	0007883a 	mov	r3,zero
    4348:	003ff506 	br	4320 <__sfvwrite_small_dev+0x88>
    434c:	00ffffc4 	movi	r3,-1
    4350:	003ff306 	br	4320 <__sfvwrite_small_dev+0x88>

00004354 <_write_r>:
    4354:	defffd04 	addi	sp,sp,-12
    4358:	dc000015 	stw	r16,0(sp)
    435c:	04000034 	movhi	r16,0
    4360:	841d1104 	addi	r16,r16,29764
    4364:	dc400115 	stw	r17,4(sp)
    4368:	80000015 	stw	zero,0(r16)
    436c:	2023883a 	mov	r17,r4
    4370:	2809883a 	mov	r4,r5
    4374:	300b883a 	mov	r5,r6
    4378:	380d883a 	mov	r6,r7
    437c:	dfc00215 	stw	ra,8(sp)
    4380:	00044100 	call	4410 <write>
    4384:	1007883a 	mov	r3,r2
    4388:	00bfffc4 	movi	r2,-1
    438c:	18800626 	beq	r3,r2,43a8 <_write_r+0x54>
    4390:	1805883a 	mov	r2,r3
    4394:	dfc00217 	ldw	ra,8(sp)
    4398:	dc400117 	ldw	r17,4(sp)
    439c:	dc000017 	ldw	r16,0(sp)
    43a0:	dec00304 	addi	sp,sp,12
    43a4:	f800283a 	ret
    43a8:	80800017 	ldw	r2,0(r16)
    43ac:	103ff826 	beq	r2,zero,4390 <_write_r+0x3c>
    43b0:	88800015 	stw	r2,0(r17)
    43b4:	1805883a 	mov	r2,r3
    43b8:	dfc00217 	ldw	ra,8(sp)
    43bc:	dc400117 	ldw	r17,4(sp)
    43c0:	dc000017 	ldw	r16,0(sp)
    43c4:	dec00304 	addi	sp,sp,12
    43c8:	f800283a 	ret

000043cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    43cc:	deffff04 	addi	sp,sp,-4
    43d0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    43d4:	0009883a 	mov	r4,zero
    43d8:	00045700 	call	4570 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    43dc:	00045200 	call	4520 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    43e0:	01800034 	movhi	r6,0
    43e4:	31980d04 	addi	r6,r6,24628
    43e8:	3009883a 	mov	r4,r6
    43ec:	300b883a 	mov	r5,r6
    43f0:	00059100 	call	5910 <alt_io_redirect>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    43f4:	d1200e17 	ldw	r4,-32712(gp)
    43f8:	d1600f17 	ldw	r5,-32708(gp)
    43fc:	d1a01017 	ldw	r6,-32704(gp)
    4400:	00041a00 	call	41a0 <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4404:	dfc00017 	ldw	ra,0(sp)
    4408:	dec00104 	addi	sp,sp,4
    440c:	f800283a 	ret

00004410 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4410:	defffd04 	addi	sp,sp,-12
    4414:	dfc00215 	stw	ra,8(sp)
    4418:	dc400115 	stw	r17,4(sp)
    441c:	dc000015 	stw	r16,0(sp)
    4420:	2821883a 	mov	r16,r5
    4424:	3023883a 	mov	r17,r6
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4428:	20002b16 	blt	r4,zero,44d8 <write+0xc8>
    442c:	01400304 	movi	r5,12
    4430:	0005fdc0 	call	5fdc <__mulsi3>
    4434:	00c00034 	movhi	r3,0
    4438:	18dca404 	addi	r3,r3,29328
    443c:	10c9883a 	add	r4,r2,r3
  
  if (fd)
    4440:	20002526 	beq	r4,zero,44d8 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    4444:	20800217 	ldw	r2,8(r4)
    4448:	108000cc 	andi	r2,r2,3
    444c:	10001526 	beq	r2,zero,44a4 <write+0x94>
    4450:	20800017 	ldw	r2,0(r4)
    4454:	10800617 	ldw	r2,24(r2)
    4458:	10001226 	beq	r2,zero,44a4 <write+0x94>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    445c:	800b883a 	mov	r5,r16
    4460:	880d883a 	mov	r6,r17
    4464:	103ee83a 	callr	r2
    4468:	1021883a 	mov	r16,r2
    446c:	1000260e 	bge	r2,zero,4508 <write+0xf8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    4470:	00800034 	movhi	r2,0
    4474:	109d0b04 	addi	r2,r2,29740
    4478:	10800017 	ldw	r2,0(r2)
    447c:	1000031e 	bne	r2,zero,448c <write+0x7c>
    4480:	00c00034 	movhi	r3,0
    4484:	18dd1104 	addi	r3,r3,29764
    4488:	00000206 	br	4494 <write+0x84>
    448c:	103ee83a 	callr	r2
    4490:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    4494:	0405c83a 	sub	r2,zero,r16
    4498:	18800015 	stw	r2,0(r3)
    449c:	043fffc4 	movi	r16,-1
    44a0:	00001906 	br	4508 <write+0xf8>
    44a4:	00800034 	movhi	r2,0
    44a8:	109d0b04 	addi	r2,r2,29740
    44ac:	10800017 	ldw	r2,0(r2)
    44b0:	1000031e 	bne	r2,zero,44c0 <write+0xb0>
    44b4:	00c00034 	movhi	r3,0
    44b8:	18dd1104 	addi	r3,r3,29764
    44bc:	00000206 	br	44c8 <write+0xb8>
    44c0:	103ee83a 	callr	r2
    44c4:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    44c8:	00800344 	movi	r2,13
    44cc:	18800015 	stw	r2,0(r3)
    44d0:	043fffc4 	movi	r16,-1
    44d4:	00000c06 	br	4508 <write+0xf8>
    44d8:	00800034 	movhi	r2,0
    44dc:	109d0b04 	addi	r2,r2,29740
    44e0:	10800017 	ldw	r2,0(r2)
    44e4:	1000031e 	bne	r2,zero,44f4 <write+0xe4>
    44e8:	00c00034 	movhi	r3,0
    44ec:	18dd1104 	addi	r3,r3,29764
    44f0:	00000206 	br	44fc <write+0xec>
    44f4:	103ee83a 	callr	r2
    44f8:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    44fc:	00801444 	movi	r2,81
    4500:	18800015 	stw	r2,0(r3)
    4504:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    4508:	8005883a 	mov	r2,r16
    450c:	dfc00217 	ldw	ra,8(sp)
    4510:	dc400117 	ldw	r17,4(sp)
    4514:	dc000017 	ldw	r16,0(sp)
    4518:	dec00304 	addi	sp,sp,12
    451c:	f800283a 	ret

00004520 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4520:	defffe04 	addi	sp,sp,-8
    4524:	dfc00115 	stw	ra,4(sp)
    4528:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH, epcs_flash);
    452c:	01000034 	movhi	r4,0
    4530:	21185004 	addi	r4,r4,24896
    4534:	00048d80 	call	48d8 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    4538:	04000034 	movhi	r16,0
    453c:	84188c04 	addi	r16,r16,25136
    4540:	8009883a 	mov	r4,r16
    4544:	000b883a 	mov	r5,zero
    4548:	000d883a 	mov	r6,zero
    454c:	0004c340 	call	4c34 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4550:	813ff604 	addi	r4,r16,-40
    4554:	01400034 	movhi	r5,0
    4558:	295d0804 	addi	r5,r5,29728
    455c:	00056a40 	call	56a4 <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    4560:	dfc00117 	ldw	ra,4(sp)
    4564:	dc000017 	ldw	r16,0(sp)
    4568:	dec00204 	addi	sp,sp,8
    456c:	f800283a 	ret

00004570 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4570:	deffff04 	addi	sp,sp,-4
    4574:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    4578:	0005c740 	call	5c74 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    457c:	00800044 	movi	r2,1
    4580:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4584:	dfc00017 	ldw	ra,0(sp)
    4588:	dec00104 	addi	sp,sp,4
    458c:	f800283a 	ret

00004590 <alt_epcs_flash_get_info>:
{
  int ret_code = 0;

  alt_flash_dev* flash = (alt_flash_dev*)fd;

  *number_of_regions = flash->number_of_regions;
    4590:	20800c17 	ldw	r2,48(r4)
    4594:	30800015 	stw	r2,0(r6)

  if (!flash->number_of_regions)
    4598:	20c00c17 	ldw	r3,48(r4)
    459c:	1800021e 	bne	r3,zero,45a8 <alt_epcs_flash_get_info+0x18>
    45a0:	00bffec4 	movi	r2,-5
    45a4:	f800283a 	ret
  {
    ret_code = -EIO;
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    45a8:	00800204 	movi	r2,8
    45ac:	10c0020e 	bge	r2,r3,45b8 <alt_epcs_flash_get_info+0x28>
    45b0:	00bffd04 	movi	r2,-12
    45b4:	f800283a 	ret
  {
    ret_code = -ENOMEM;
  }
  else
  {
    *info = &flash->region_info[0];
    45b8:	20800d04 	addi	r2,r4,52
    45bc:	28800015 	stw	r2,0(r5)
    45c0:	0005883a 	mov	r2,zero
  }

  return ret_code;
}
    45c4:	f800283a 	ret

000045c8 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    45c8:	defffd04 	addi	sp,sp,-12
    45cc:	dfc00215 	stw	ra,8(sp)
    45d0:	dc000115 	stw	r16,4(sp)
    45d4:	3821883a 	mov	r16,r7
  int ret_code = 0;

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    45d8:	200f883a 	mov	r7,r4
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    45dc:	013fffc4 	movi	r4,-1
    45e0:	38800c17 	ldw	r2,48(r7)
    45e4:	1105883a 	add	r2,r2,r4
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
    45e8:	1004913a 	slli	r2,r2,4
    45ec:	11c5883a 	add	r2,r2,r7
    45f0:	10c00d17 	ldw	r3,52(r2)
    45f4:	1907883a 	add	r3,r3,r4
    45f8:	10800e17 	ldw	r2,56(r2)
    45fc:	1887883a 	add	r3,r3,r2
    4600:	1940022e 	bgeu	r3,r5,460c <alt_epcs_flash_read+0x44>
    4604:	00bffec4 	movi	r2,-5
    4608:	00000706 	br	4628 <alt_epcs_flash_read+0x60>

  ret_code = alt_epcs_test_address(flash_info, offset);

  if (ret_code >= 0)
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    460c:	39002d17 	ldw	r4,180(r7)
    4610:	38803117 	ldw	r2,196(r7)
    4614:	d8800015 	stw	r2,0(sp)
    4618:	800f883a 	mov	r7,r16
    461c:	00054d80 	call	54d8 <epcs_read_buffer>
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    4620:	8080011e 	bne	r16,r2,4628 <alt_epcs_flash_read+0x60>
    4624:	0005883a 	mov	r2,zero
    {
      ret_code = 0;
    }
  }
  return ret_code;
}
    4628:	dfc00217 	ldw	ra,8(sp)
    462c:	dc000117 	ldw	r16,4(sp)
    4630:	dec00304 	addi	sp,sp,12
    4634:	f800283a 	ret

00004638 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    4638:	defff804 	addi	sp,sp,-32
    463c:	dfc00715 	stw	ra,28(sp)
    4640:	dd400615 	stw	r21,24(sp)
    4644:	dd000515 	stw	r20,20(sp)
    4648:	dcc00415 	stw	r19,16(sp)
    464c:	dc800315 	stw	r18,12(sp)
    4650:	dc400215 	stw	r17,8(sp)
    4654:	dc000115 	stw	r16,4(sp)
    4658:	300b883a 	mov	r5,r6
    465c:	382b883a 	mov	r21,r7
    4660:	dc400817 	ldw	r17,32(sp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    4664:	2025883a 	mov	r18,r4
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    4668:	013fffc4 	movi	r4,-1
    466c:	90800c17 	ldw	r2,48(r18)
    4670:	1105883a 	add	r2,r2,r4
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
    4674:	1004913a 	slli	r2,r2,4
    4678:	1485883a 	add	r2,r2,r18
    467c:	10c00d17 	ldw	r3,52(r2)
    4680:	1907883a 	add	r3,r3,r4
    4684:	10800e17 	ldw	r2,56(r2)
    4688:	1887883a 	add	r3,r3,r2
    468c:	1980022e 	bgeu	r3,r6,4698 <alt_epcs_flash_write_block+0x60>
    4690:	00bffec4 	movi	r2,-5
    4694:	00001506 	br	46ec <alt_epcs_flash_write_block+0xb4>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    4698:	88001326 	beq	r17,zero,46e8 <alt_epcs_flash_write_block+0xb0>
    469c:	0029883a 	mov	r20,zero
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    46a0:	90803017 	ldw	r2,192(r18)
    46a4:	1147883a 	add	r3,r2,r5
    46a8:	0085c83a 	sub	r2,zero,r2
    46ac:	18a6703a 	and	r19,r3,r2
      length_of_current_write = MIN(length, next_page_start - data_offset);
    46b0:	9945c83a 	sub	r2,r19,r5
    46b4:	8821883a 	mov	r16,r17
    46b8:	1440010e 	bge	r2,r17,46c0 <alt_epcs_flash_write_block+0x88>
    46bc:	1021883a 	mov	r16,r2

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    46c0:	91002d17 	ldw	r4,180(r18)
    46c4:	90803117 	ldw	r2,196(r18)
    46c8:	d8800015 	stw	r2,0(sp)
    46cc:	ad0d883a 	add	r6,r21,r20
    46d0:	800f883a 	mov	r7,r16
    46d4:	00053d40 	call	53d4 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    46d8:	8c23c83a 	sub	r17,r17,r16
      buffer_offset += length_of_current_write;
    46dc:	a429883a 	add	r20,r20,r16
    46e0:	980b883a 	mov	r5,r19
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    46e4:	883fee1e 	bne	r17,zero,46a0 <alt_epcs_flash_write_block+0x68>
    46e8:	0005883a 	mov	r2,zero
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
}
    46ec:	dfc00717 	ldw	ra,28(sp)
    46f0:	dd400617 	ldw	r21,24(sp)
    46f4:	dd000517 	ldw	r20,20(sp)
    46f8:	dcc00417 	ldw	r19,16(sp)
    46fc:	dc800317 	ldw	r18,12(sp)
    4700:	dc400217 	ldw	r17,8(sp)
    4704:	dc000117 	ldw	r16,4(sp)
    4708:	dec00804 	addi	sp,sp,32
    470c:	f800283a 	ret

00004710 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    4710:	deffe804 	addi	sp,sp,-96
    4714:	dfc01715 	stw	ra,92(sp)
    4718:	df001615 	stw	fp,88(sp)
    471c:	ddc01515 	stw	r23,84(sp)
    4720:	dd801415 	stw	r22,80(sp)
    4724:	dd401315 	stw	r21,76(sp)
    4728:	dd001215 	stw	r20,72(sp)
    472c:	dcc01115 	stw	r19,68(sp)
    4730:	dc801015 	stw	r18,64(sp)
    4734:	dc400f15 	stw	r17,60(sp)
    4738:	dc000e15 	stw	r16,56(sp)
    473c:	202b883a 	mov	r21,r4
    4740:	2827883a 	mov	r19,r5
    4744:	d9800c15 	stw	r6,48(sp)
    4748:	d9c00d15 	stw	r7,52(sp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    474c:	20800c17 	ldw	r2,48(r4)
    4750:	0080510e 	bge	zero,r2,4898 <alt_epcs_flash_write+0x188>
    4754:	d9000915 	stw	r4,36(sp)
    4758:	d8000b15 	stw	zero,44(sp)
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    475c:	df000917 	ldw	fp,36(sp)
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    4760:	e5000d17 	ldw	r20,52(fp)
    4764:	9d004316 	blt	r19,r20,4874 <alt_epcs_flash_write+0x164>
    4768:	e0800e17 	ldw	r2,56(fp)
    476c:	a085883a 	add	r2,r20,r2
    4770:	9880400e 	bge	r19,r2,4874 <alt_epcs_flash_write+0x164>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    4774:	e0800f17 	ldw	r2,60(fp)
    4778:	00803e0e 	bge	zero,r2,4874 <alt_epcs_flash_write+0x164>
    477c:	d8000a15 	stw	zero,40(sp)
      {
        if ((offset >= current_offset ) &&
    4780:	9d003416 	blt	r19,r20,4854 <alt_epcs_flash_write+0x144>
    4784:	e0801017 	ldw	r2,64(fp)
    4788:	a085883a 	add	r2,r20,r2
    478c:	9880310e 	bge	r19,r2,4854 <alt_epcs_flash_write+0x144>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    4790:	14edc83a 	sub	r22,r2,r19
                            - offset);
          data_to_write = MIN(data_to_write, length);
    4794:	d8800d17 	ldw	r2,52(sp)
    4798:	1580010e 	bge	r2,r22,47a0 <alt_epcs_flash_write+0x90>
    479c:	102d883a 	mov	r22,r2
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    47a0:	b0003f26 	beq	r22,zero,48a0 <alt_epcs_flash_write+0x190>
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
                            - offset);
          data_to_write = MIN(data_to_write, length);

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    47a4:	b023883a 	mov	r17,r22
    47a8:	0025883a 	mov	r18,zero
    47ac:	05c00804 	movi	r23,32
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    47b0:	8821883a 	mov	r16,r17
    47b4:	bc40012e 	bgeu	r23,r17,47bc <alt_epcs_flash_write+0xac>
    47b8:	b821883a 	mov	r16,r23
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
    47bc:	a809883a 	mov	r4,r21
    47c0:	9c8b883a 	add	r5,r19,r18
    47c4:	d9800104 	addi	r6,sp,4
    47c8:	800f883a 	mov	r7,r16
    47cc:	00045c80 	call	45c8 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    47d0:	10000a16 	blt	r2,zero,47fc <alt_epcs_flash_write+0xec>
      */
      return -1;
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    47d4:	d8c00c17 	ldw	r3,48(sp)
    47d8:	1c89883a 	add	r4,r3,r18
    47dc:	d9400104 	addi	r5,sp,4
    47e0:	800d883a 	mov	r6,r16
    47e4:	0005f740 	call	5f74 <memcmp>
    47e8:	1000041e 	bne	r2,zero,47fc <alt_epcs_flash_write+0xec>
    if (this_chunk_cmp)
    {
      return this_chunk_cmp;
    }

    n -= this_chunk_size;
    47ec:	8c23c83a 	sub	r17,r17,r16
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    47f0:	88002b26 	beq	r17,zero,48a0 <alt_epcs_flash_write+0x190>
    {
      return this_chunk_cmp;
    }

    n -= this_chunk_size;
    current_offset += this_chunk_size;
    47f4:	9425883a 	add	r18,r18,r16
    47f8:	003fed06 	br	47b0 <alt_epcs_flash_write+0xa0>
                            - offset);
          data_to_write = MIN(data_to_write, length);

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    47fc:	a8800817 	ldw	r2,32(r21)
    4800:	a809883a 	mov	r4,r21
    4804:	a00b883a 	mov	r5,r20
    4808:	103ee83a 	callr	r2

            if (!ret_code)
    480c:	1000071e 	bne	r2,zero,482c <alt_epcs_flash_write+0x11c>
            {
              ret_code = (*flash_info->write_block)(
    4810:	dd800015 	stw	r22,0(sp)
    4814:	a8800917 	ldw	r2,36(r21)
    4818:	a809883a 	mov	r4,r21
    481c:	a00b883a 	mov	r5,r20
    4820:	980d883a 	mov	r6,r19
    4824:	d9c00c17 	ldw	r7,48(sp)
    4828:	103ee83a 	callr	r2
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    482c:	d9000d17 	ldw	r4,52(sp)
    4830:	b1001d26 	beq	r22,r4,48a8 <alt_epcs_flash_write+0x198>
    4834:	10001c1e 	bne	r2,zero,48a8 <alt_epcs_flash_write+0x198>
          {
            goto finished;
          }

          length -= data_to_write;
    4838:	2589c83a 	sub	r4,r4,r22
    483c:	d9000d15 	stw	r4,52(sp)
          offset = current_offset + flash_info->region_info[i].block_size;
    4840:	e0801017 	ldw	r2,64(fp)
    4844:	a0a7883a 	add	r19,r20,r2
          src_addr = (alt_u8*)src_addr + data_to_write;
    4848:	d8800c17 	ldw	r2,48(sp)
    484c:	1585883a 	add	r2,r2,r22
    4850:	d8800c15 	stw	r2,48(sp)
        }
        current_offset += flash_info->region_info[i].block_size;
    4854:	e0c01017 	ldw	r3,64(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    4858:	d9000a17 	ldw	r4,40(sp)
    485c:	21000044 	addi	r4,r4,1
    4860:	d9000a15 	stw	r4,40(sp)
    4864:	e0800f17 	ldw	r2,60(fp)
    4868:	2080020e 	bge	r4,r2,4874 <alt_epcs_flash_write+0x164>

          length -= data_to_write;
          offset = current_offset + flash_info->region_info[i].block_size;
          src_addr = (alt_u8*)src_addr + data_to_write;
        }
        current_offset += flash_info->region_info[i].block_size;
    486c:	a0e9883a 	add	r20,r20,r3
    4870:	003fc306 	br	4780 <alt_epcs_flash_write+0x70>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    4874:	d8800b17 	ldw	r2,44(sp)
    4878:	10800044 	addi	r2,r2,1
    487c:	d8800b15 	stw	r2,44(sp)
    4880:	d8c00917 	ldw	r3,36(sp)
    4884:	18c00404 	addi	r3,r3,16
    4888:	d8c00915 	stw	r3,36(sp)
    488c:	a8800c17 	ldw	r2,48(r21)
    4890:	d9000b17 	ldw	r4,44(sp)
    4894:	20bfb116 	blt	r4,r2,475c <alt_epcs_flash_write+0x4c>
        current_offset += flash_info->region_info[i].block_size;
      }
    }
  }

finished:
    4898:	0005883a 	mov	r2,zero
    489c:	00000206 	br	48a8 <alt_epcs_flash_write+0x198>
    48a0:	0005883a 	mov	r2,zero
    48a4:	003fe106 	br	482c <alt_epcs_flash_write+0x11c>
  return ret_code;
}
    48a8:	dfc01717 	ldw	ra,92(sp)
    48ac:	df001617 	ldw	fp,88(sp)
    48b0:	ddc01517 	ldw	r23,84(sp)
    48b4:	dd801417 	ldw	r22,80(sp)
    48b8:	dd401317 	ldw	r21,76(sp)
    48bc:	dd001217 	ldw	r20,72(sp)
    48c0:	dcc01117 	ldw	r19,68(sp)
    48c4:	dc801017 	ldw	r18,64(sp)
    48c8:	dc400f17 	ldw	r17,60(sp)
    48cc:	dc000e17 	ldw	r16,56(sp)
    48d0:	dec01804 	addi	sp,sp,96
    48d4:	f800283a 	ret

000048d8 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
    48d8:	defffe04 	addi	sp,sp,-8
    48dc:	dfc00115 	stw	ra,4(sp)
    48e0:	dc000015 	stw	r16,0(sp)
    48e4:	2021883a 	mov	r16,r4
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
    48e8:	20003115 	stw	zero,196(r4)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    48ec:	21002d17 	ldw	r4,180(r4)
    48f0:	00051a00 	call	51a0 <epcs_read_electronic_signature>
    48f4:	1009883a 	mov	r4,r2
    48f8:	10c03fcc 	andi	r3,r2,255
    48fc:	80c02f15 	stw	r3,188(r16)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
    4900:	00800584 	movi	r2,22
    4904:	1880071e 	bne	r3,r2,4924 <alt_epcs_flash_init+0x4c>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    4908:	00802034 	movhi	r2,128
    490c:	80800e15 	stw	r2,56(r16)
    flash->dev.region_info[0].number_of_blocks = 128;
    4910:	00802004 	movi	r2,128
    4914:	80800f15 	stw	r2,60(r16)
    flash->dev.region_info[0].block_size = 65536;
    4918:	00800074 	movhi	r2,1
    491c:	80801015 	stw	r2,64(r16)
    4920:	00004d06 	br	4a58 <alt_epcs_flash_init+0x180>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
    4924:	20c03fcc 	andi	r3,r4,255
    4928:	00800504 	movi	r2,20
    492c:	1880071e 	bne	r3,r2,494c <alt_epcs_flash_init+0x74>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    4930:	00800834 	movhi	r2,32
    4934:	80800e15 	stw	r2,56(r16)
    flash->dev.region_info[0].number_of_blocks = 32;
    4938:	00800804 	movi	r2,32
    493c:	80800f15 	stw	r2,60(r16)
    flash->dev.region_info[0].block_size = 65536;
    4940:	00800074 	movhi	r2,1
    4944:	80801015 	stw	r2,64(r16)
    4948:	00004306 	br	4a58 <alt_epcs_flash_init+0x180>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
    494c:	20c03fcc 	andi	r3,r4,255
    4950:	008004c4 	movi	r2,19
    4954:	1880071e 	bne	r3,r2,4974 <alt_epcs_flash_init+0x9c>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
    4958:	00800434 	movhi	r2,16
    495c:	80800e15 	stw	r2,56(r16)
    flash->dev.region_info[0].number_of_blocks = 16;
    4960:	00800404 	movi	r2,16
    4964:	80800f15 	stw	r2,60(r16)
    flash->dev.region_info[0].block_size = 65536;
    4968:	00800074 	movhi	r2,1
    496c:	80801015 	stw	r2,64(r16)
    4970:	00003906 	br	4a58 <alt_epcs_flash_init+0x180>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
    4974:	20c03fcc 	andi	r3,r4,255
    4978:	00800484 	movi	r2,18
    497c:	1880071e 	bne	r3,r2,499c <alt_epcs_flash_init+0xc4>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
    4980:	00800234 	movhi	r2,8
    4984:	80800e15 	stw	r2,56(r16)
    flash->dev.region_info[0].number_of_blocks = 8;
    4988:	00800204 	movi	r2,8
    498c:	80800f15 	stw	r2,60(r16)
    flash->dev.region_info[0].block_size = 65536;
    4990:	00800074 	movhi	r2,1
    4994:	80801015 	stw	r2,64(r16)
    4998:	00002f06 	br	4a58 <alt_epcs_flash_init+0x180>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
    499c:	20c03fcc 	andi	r3,r4,255
    49a0:	00800404 	movi	r2,16
    49a4:	1880071e 	bne	r3,r2,49c4 <alt_epcs_flash_init+0xec>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
    49a8:	008000b4 	movhi	r2,2
    49ac:	80800e15 	stw	r2,56(r16)
    flash->dev.region_info[0].number_of_blocks = 4;
    49b0:	00800104 	movi	r2,4
    49b4:	80800f15 	stw	r2,60(r16)
    flash->dev.region_info[0].block_size = 32768;
    49b8:	00a00014 	movui	r2,32768
    49bc:	80801015 	stw	r2,64(r16)
    49c0:	00002506 	br	4a58 <alt_epcs_flash_init+0x180>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
    49c4:	81002d17 	ldw	r4,180(r16)
    49c8:	00051400 	call	5140 <epcs_read_device_id>
    49cc:	1009883a 	mov	r4,r2
    49d0:	80802f15 	stw	r2,188(r16)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
    49d4:	00804034 	movhi	r2,256
    49d8:	10bfffc4 	addi	r2,r2,-1
    49dc:	2084703a 	and	r2,r4,r2
    49e0:	00c00874 	movhi	r3,33
    49e4:	18ee8604 	addi	r3,r3,-17896
    49e8:	10c0071e 	bne	r2,r3,4a08 <alt_epcs_flash_init+0x130>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    49ec:	00804034 	movhi	r2,256
    49f0:	80800e15 	stw	r2,56(r16)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
    49f4:	00804004 	movi	r2,256
    49f8:	80800f15 	stw	r2,60(r16)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    49fc:	00800074 	movhi	r2,1
    4a00:	80801015 	stw	r2,64(r16)
    4a04:	00001406 	br	4a58 <alt_epcs_flash_init+0x180>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
    4a08:	20c03fcc 	andi	r3,r4,255
    4a0c:	00800604 	movi	r2,24
    4a10:	1880071e 	bne	r3,r2,4a30 <alt_epcs_flash_init+0x158>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    4a14:	00804034 	movhi	r2,256
    4a18:	80800e15 	stw	r2,56(r16)
      flash->dev.region_info[0].number_of_blocks = 64;
    4a1c:	00801004 	movi	r2,64
    4a20:	80800f15 	stw	r2,60(r16)
      flash->dev.region_info[0].block_size = 262144;
    4a24:	00800134 	movhi	r2,4
    4a28:	80801015 	stw	r2,64(r16)
    4a2c:	00000a06 	br	4a58 <alt_epcs_flash_init+0x180>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
    4a30:	00800644 	movi	r2,25
    4a34:	1880141e 	bne	r3,r2,4a88 <alt_epcs_flash_init+0x1b0>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
    4a38:	00808034 	movhi	r2,512
    4a3c:	80800e15 	stw	r2,56(r16)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
    4a40:	00808004 	movi	r2,512
    4a44:	80800f15 	stw	r2,60(r16)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    4a48:	00800074 	movhi	r2,1
    4a4c:	80801015 	stw	r2,64(r16)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
    4a50:	00800044 	movi	r2,1
    4a54:	80803115 	stw	r2,196(r16)
    {
      ret_code = -ENODEV; /* No known device found! */
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    4a58:	80800e17 	ldw	r2,56(r16)
    4a5c:	80802e15 	stw	r2,184(r16)
  flash->dev.number_of_regions = 1;
    4a60:	00800044 	movi	r2,1
    4a64:	80800c15 	stw	r2,48(r16)
  flash->dev.region_info[0].offset = 0;
    4a68:	80000d15 	stw	zero,52(r16)
  flash->page_size = 256;
    4a6c:	00804004 	movi	r2,256
    4a70:	80803015 	stw	r2,192(r16)

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    4a74:	8009883a 	mov	r4,r16
    4a78:	01400034 	movhi	r5,0
    4a7c:	295d0c04 	addi	r5,r5,29744
    4a80:	00056a40 	call	56a4 <alt_dev_llist_insert>
    4a84:	00000806 	br	4aa8 <alt_epcs_flash_init+0x1d0>
    {
      ret_code = -ENODEV; /* No known device found! */
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    4a88:	80800e17 	ldw	r2,56(r16)
    4a8c:	80802e15 	stw	r2,184(r16)
  flash->dev.number_of_regions = 1;
    4a90:	00800044 	movi	r2,1
    4a94:	80800c15 	stw	r2,48(r16)
  flash->dev.region_info[0].offset = 0;
    4a98:	80000d15 	stw	zero,52(r16)
  flash->page_size = 256;
    4a9c:	00804004 	movi	r2,256
    4aa0:	80803015 	stw	r2,192(r16)
    4aa4:	00bffb44 	movi	r2,-19
  */
  if (!ret_code)
    ret_code = alt_flash_device_register(&(flash->dev));

  return ret_code;
}
    4aa8:	dfc00117 	ldw	ra,4(sp)
    4aac:	dc000017 	ldw	r16,0(sp)
    4ab0:	dec00204 	addi	sp,sp,8
    4ab4:	f800283a 	ret

00004ab8 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    4ab8:	deffff04 	addi	sp,sp,-4
    4abc:	dfc00015 	stw	ra,0(sp)
  int ret_code = 0;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    4ac0:	200d883a 	mov	r6,r4
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    4ac4:	013fffc4 	movi	r4,-1
    4ac8:	30800c17 	ldw	r2,48(r6)
    4acc:	1105883a 	add	r2,r2,r4
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
    4ad0:	1004913a 	slli	r2,r2,4
    4ad4:	1185883a 	add	r2,r2,r6
    4ad8:	10c00d17 	ldw	r3,52(r2)
    4adc:	1907883a 	add	r3,r3,r4
    4ae0:	10800e17 	ldw	r2,56(r2)
    4ae4:	1887883a 	add	r3,r3,r2
    4ae8:	1940022e 	bgeu	r3,r5,4af4 <alt_epcs_flash_erase_block+0x3c>
    4aec:	00bffec4 	movi	r2,-5
    4af0:	00000406 	br	4b04 <alt_epcs_flash_erase_block+0x4c>
  if (ret_code >= 0)
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    4af4:	31002d17 	ldw	r4,180(r6)
    4af8:	31803117 	ldw	r6,196(r6)
    4afc:	00053080 	call	5308 <epcs_sector_erase>
    4b00:	0005883a 	mov	r2,zero
  }
  return ret_code;
}
    4b04:	dfc00017 	ldw	ra,0(sp)
    4b08:	dec00104 	addi	sp,sp,4
    4b0c:	f800283a 	ret

00004b10 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    4b10:	deffff04 	addi	sp,sp,-4
    4b14:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    4b18:	21000017 	ldw	r4,0(r4)
    4b1c:	21000a04 	addi	r4,r4,40
    4b20:	0004de80 	call	4de8 <altera_avalon_jtag_uart_ioctl>
}
    4b24:	dfc00017 	ldw	ra,0(sp)
    4b28:	dec00104 	addi	sp,sp,4
    4b2c:	f800283a 	ret

00004b30 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    4b30:	deffff04 	addi	sp,sp,-4
    4b34:	dfc00015 	stw	ra,0(sp)
    4b38:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    4b3c:	21000017 	ldw	r4,0(r4)
    4b40:	21000a04 	addi	r4,r4,40
    4b44:	11400217 	ldw	r5,8(r2)
    4b48:	0004ba80 	call	4ba8 <altera_avalon_jtag_uart_close>
}
    4b4c:	dfc00017 	ldw	ra,0(sp)
    4b50:	dec00104 	addi	sp,sp,4
    4b54:	f800283a 	ret

00004b58 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    4b58:	deffff04 	addi	sp,sp,-4
    4b5c:	dfc00015 	stw	ra,0(sp)
    4b60:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    4b64:	21000017 	ldw	r4,0(r4)
    4b68:	21000a04 	addi	r4,r4,40
    4b6c:	11c00217 	ldw	r7,8(r2)
    4b70:	0004fc40 	call	4fc4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    4b74:	dfc00017 	ldw	ra,0(sp)
    4b78:	dec00104 	addi	sp,sp,4
    4b7c:	f800283a 	ret

00004b80 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    4b80:	deffff04 	addi	sp,sp,-4
    4b84:	dfc00015 	stw	ra,0(sp)
    4b88:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    4b8c:	21000017 	ldw	r4,0(r4)
    4b90:	21000a04 	addi	r4,r4,40
    4b94:	11c00217 	ldw	r7,8(r2)
    4b98:	0004e5c0 	call	4e5c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    4b9c:	dfc00017 	ldw	ra,0(sp)
    4ba0:	dec00104 	addi	sp,sp,4
    4ba4:	f800283a 	ret

00004ba8 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4ba8:	21800c17 	ldw	r6,48(r4)
    4bac:	2950000c 	andi	r5,r5,16384
    4bb0:	280b003a 	cmpeq	r5,r5,zero
    4bb4:	00000306 	br	4bc4 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
    4bb8:	2800021e 	bne	r5,zero,4bc4 <altera_avalon_jtag_uart_close+0x1c>
    4bbc:	00bffd44 	movi	r2,-11
    4bc0:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4bc4:	20800d17 	ldw	r2,52(r4)
    4bc8:	11800326 	beq	r2,r6,4bd8 <altera_avalon_jtag_uart_close+0x30>
    4bcc:	20c00917 	ldw	r3,36(r4)
    4bd0:	20800117 	ldw	r2,4(r4)
    4bd4:	18bff836 	bltu	r3,r2,4bb8 <altera_avalon_jtag_uart_close+0x10>
    4bd8:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    4bdc:	f800283a 	ret

00004be0 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    4be0:	20800017 	ldw	r2,0(r4)
    4be4:	10c00104 	addi	r3,r2,4
    4be8:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    4bec:	01410004 	movi	r5,1024
    4bf0:	1144703a 	and	r2,r2,r5
    4bf4:	10000526 	beq	r2,zero,4c0c <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    4bf8:	20800817 	ldw	r2,32(r4)
    4bfc:	1144b03a 	or	r2,r2,r5
    4c00:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    4c04:	20000915 	stw	zero,36(r4)
    4c08:	00000606 	br	4c24 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    4c0c:	20c00917 	ldw	r3,36(r4)
    4c10:	00a00034 	movhi	r2,32768
    4c14:	10bfff04 	addi	r2,r2,-4
    4c18:	10c00236 	bltu	r2,r3,4c24 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
    4c1c:	18800044 	addi	r2,r3,1
    4c20:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    4c24:	00800034 	movhi	r2,0
    4c28:	109d1604 	addi	r2,r2,29784
    4c2c:	10800017 	ldw	r2,0(r2)
    4c30:	f800283a 	ret

00004c34 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    4c34:	defffd04 	addi	sp,sp,-12
    4c38:	dfc00215 	stw	ra,8(sp)
    4c3c:	dc000115 	stw	r16,4(sp)
    4c40:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4c44:	00c00044 	movi	r3,1
    4c48:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    4c4c:	20800017 	ldw	r2,0(r4)
    4c50:	10c00135 	stwio	r3,4(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    4c54:	d8000015 	stw	zero,0(sp)
    4c58:	2809883a 	mov	r4,r5
    4c5c:	300b883a 	mov	r5,r6
    4c60:	01800034 	movhi	r6,0
    4c64:	31932d04 	addi	r6,r6,19636
    4c68:	800f883a 	mov	r7,r16
    4c6c:	00058100 	call	5810 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    4c70:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    4c74:	81000204 	addi	r4,r16,8
    4c78:	00800034 	movhi	r2,0
    4c7c:	109d1604 	addi	r2,r2,29784
    4c80:	11400017 	ldw	r5,0(r2)
    4c84:	01800034 	movhi	r6,0
    4c88:	3192f804 	addi	r6,r6,19424
    4c8c:	800f883a 	mov	r7,r16
    4c90:	00056080 	call	5608 <alt_alarm_start>
    4c94:	1000030e 	bge	r2,zero,4ca4 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    4c98:	00a00034 	movhi	r2,32768
    4c9c:	10bfffc4 	addi	r2,r2,-1
    4ca0:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    4ca4:	dfc00217 	ldw	ra,8(sp)
    4ca8:	dc000117 	ldw	r16,4(sp)
    4cac:	dec00304 	addi	sp,sp,12
    4cb0:	f800283a 	ret

00004cb4 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    4cb4:	22000017 	ldw	r8,0(r4)
    4cb8:	03800104 	movi	r14,4
    4cbc:	4399883a 	add	r12,r8,r14
    4cc0:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4cc4:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    4cc8:	5880c00c 	andi	r2,r11,768
    4ccc:	10004526 	beq	r2,zero,4de4 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    4cd0:	5880400c 	andi	r2,r11,256
    4cd4:	10002126 	beq	r2,zero,4d5c <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4cd8:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    4cdc:	10800044 	addi	r2,r2,1
    4ce0:	1081ffcc 	andi	r2,r2,2047
    4ce4:	20c00b17 	ldw	r3,44(r4)
    4ce8:	10c01626 	beq	r2,r3,4d44 <altera_avalon_jtag_uart_irq+0x90>
    4cec:	02a00014 	movui	r10,32768
    4cf0:	02400e04 	movi	r9,56
    4cf4:	01c00044 	movi	r7,1
    4cf8:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    4cfc:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    4d00:	2a84703a 	and	r2,r5,r10
    4d04:	10000d26 	beq	r2,zero,4d3c <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    4d08:	20800a17 	ldw	r2,40(r4)
    4d0c:	1105883a 	add	r2,r2,r4
    4d10:	1245883a 	add	r2,r2,r9
    4d14:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4d18:	20800a17 	ldw	r2,40(r4)
    4d1c:	11c5883a 	add	r2,r2,r7
    4d20:	1184703a 	and	r2,r2,r6
    4d24:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4d28:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    4d2c:	11c5883a 	add	r2,r2,r7
    4d30:	1184703a 	and	r2,r2,r6
    4d34:	20c00b17 	ldw	r3,44(r4)
    4d38:	10fff01e 	bne	r2,r3,4cfc <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    4d3c:	2b44703a 	and	r2,r5,r13
    4d40:	10000626 	beq	r2,zero,4d5c <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4d44:	20800817 	ldw	r2,32(r4)
    4d48:	00ffff84 	movi	r3,-2
    4d4c:	10c4703a 	and	r2,r2,r3
    4d50:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    4d54:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4d58:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    4d5c:	5880800c 	andi	r2,r11,512
    4d60:	103fd826 	beq	r2,zero,4cc4 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    4d64:	5b44703a 	and	r2,r11,r13
    4d68:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    4d6c:	283fd526 	beq	r5,zero,4cc4 <altera_avalon_jtag_uart_irq+0x10>
    4d70:	20c00d17 	ldw	r3,52(r4)
    4d74:	20800c17 	ldw	r2,48(r4)
    4d78:	18801126 	beq	r3,r2,4dc0 <altera_avalon_jtag_uart_irq+0x10c>
    4d7c:	02420e04 	movi	r9,2104
    4d80:	01800044 	movi	r6,1
    4d84:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    4d88:	20800d17 	ldw	r2,52(r4)
    4d8c:	1105883a 	add	r2,r2,r4
    4d90:	1245883a 	add	r2,r2,r9
    4d94:	10800007 	ldb	r2,0(r2)
    4d98:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4d9c:	20800d17 	ldw	r2,52(r4)
    4da0:	1185883a 	add	r2,r2,r6
    4da4:	11c4703a 	and	r2,r2,r7
    4da8:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    4dac:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    4db0:	283fc426 	beq	r5,zero,4cc4 <altera_avalon_jtag_uart_irq+0x10>
    4db4:	20c00d17 	ldw	r3,52(r4)
    4db8:	20800c17 	ldw	r2,48(r4)
    4dbc:	18bff21e 	bne	r3,r2,4d88 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4dc0:	20c00817 	ldw	r3,32(r4)
    4dc4:	00bfff44 	movi	r2,-3
    4dc8:	1886703a 	and	r3,r3,r2
    4dcc:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4dd0:	20800017 	ldw	r2,0(r4)
    4dd4:	1385883a 	add	r2,r2,r14
    4dd8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4ddc:	60800037 	ldwio	r2,0(r12)
    4de0:	003fb806 	br	4cc4 <altera_avalon_jtag_uart_irq+0x10>
    4de4:	f800283a 	ret

00004de8 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    4de8:	009a8044 	movi	r2,27137
    4dec:	28800326 	beq	r5,r2,4dfc <altera_avalon_jtag_uart_ioctl+0x14>
    4df0:	009a8084 	movi	r2,27138
    4df4:	2880171e 	bne	r5,r2,4e54 <altera_avalon_jtag_uart_ioctl+0x6c>
    4df8:	00000d06 	br	4e30 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    4dfc:	20c00117 	ldw	r3,4(r4)
    4e00:	00a00034 	movhi	r2,32768
    4e04:	10bfffc4 	addi	r2,r2,-1
    4e08:	18801226 	beq	r3,r2,4e54 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    4e0c:	31800017 	ldw	r6,0(r6)
    4e10:	30ffff84 	addi	r3,r6,-2
    4e14:	10bfff44 	addi	r2,r2,-3
    4e18:	10c0022e 	bgeu	r2,r3,4e24 <altera_avalon_jtag_uart_ioctl+0x3c>
    4e1c:	01a00034 	movhi	r6,32768
    4e20:	31bfff84 	addi	r6,r6,-2
    4e24:	21800115 	stw	r6,4(r4)
    4e28:	0005883a 	mov	r2,zero
    4e2c:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    4e30:	20c00117 	ldw	r3,4(r4)
    4e34:	00a00034 	movhi	r2,32768
    4e38:	10bfffc4 	addi	r2,r2,-1
    4e3c:	18800526 	beq	r3,r2,4e54 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    4e40:	20800917 	ldw	r2,36(r4)
    4e44:	10c5803a 	cmpltu	r2,r2,r3
    4e48:	30800015 	stw	r2,0(r6)
    4e4c:	0005883a 	mov	r2,zero
    4e50:	f800283a 	ret
    4e54:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    4e58:	f800283a 	ret

00004e5c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    4e5c:	defff604 	addi	sp,sp,-40
    4e60:	dfc00915 	stw	ra,36(sp)
    4e64:	df000815 	stw	fp,32(sp)
    4e68:	ddc00715 	stw	r23,28(sp)
    4e6c:	dd800615 	stw	r22,24(sp)
    4e70:	dd400515 	stw	r21,20(sp)
    4e74:	dd000415 	stw	r20,16(sp)
    4e78:	dcc00315 	stw	r19,12(sp)
    4e7c:	dc800215 	stw	r18,8(sp)
    4e80:	dc400115 	stw	r17,4(sp)
    4e84:	dc000015 	stw	r16,0(sp)
    4e88:	2025883a 	mov	r18,r4
    4e8c:	282f883a 	mov	r23,r5
    4e90:	3027883a 	mov	r19,r6
    4e94:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4e98:	0180220e 	bge	zero,r6,4f24 <altera_avalon_jtag_uart_read+0xc8>
    4e9c:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    4ea0:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    4ea4:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    4ea8:	b4400236 	bltu	r22,r17,4eb4 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    4eac:	b461c83a 	sub	r16,r22,r17
    4eb0:	00000206 	br	4ebc <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    4eb4:	00820004 	movi	r2,2048
    4eb8:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    4ebc:	80000d26 	beq	r16,zero,4ef4 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    4ec0:	9829883a 	mov	r20,r19
    4ec4:	9c001d36 	bltu	r19,r16,4f3c <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    4ec8:	91400e04 	addi	r5,r18,56
    4ecc:	a809883a 	mov	r4,r21
    4ed0:	2c4b883a 	add	r5,r5,r17
    4ed4:	800d883a 	mov	r6,r16
    4ed8:	0005fb00 	call	5fb0 <memcpy>
      ptr   += n;
    4edc:	ac2b883a 	add	r21,r21,r16
      space -= n;
    4ee0:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4ee4:	8445883a 	add	r2,r16,r17
    4ee8:	1081ffcc 	andi	r2,r2,2047
    4eec:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    4ef0:	04ffeb16 	blt	zero,r19,4ea0 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    4ef4:	adc01c1e 	bne	r21,r23,4f68 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    4ef8:	e090000c 	andi	r2,fp,16384
    4efc:	10000d1e 	bne	r2,zero,4f34 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    4f00:	90800a17 	ldw	r2,40(r18)
    4f04:	b080031e 	bne	r22,r2,4f14 <altera_avalon_jtag_uart_read+0xb8>
    4f08:	90c00917 	ldw	r3,36(r18)
    4f0c:	90800117 	ldw	r2,4(r18)
    4f10:	18bffb36 	bltu	r3,r2,4f00 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    4f14:	90800a17 	ldw	r2,40(r18)
    4f18:	b0800426 	beq	r22,r2,4f2c <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4f1c:	04c0030e 	bge	zero,r19,4f2c <altera_avalon_jtag_uart_read+0xd0>
    4f20:	003fde06 	br	4e9c <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    4f24:	3890000c 	andi	r2,r7,16384
    4f28:	1000021e 	bne	r2,zero,4f34 <altera_avalon_jtag_uart_read+0xd8>
    4f2c:	00bffec4 	movi	r2,-5
    4f30:	00001806 	br	4f94 <altera_avalon_jtag_uart_read+0x138>
    4f34:	00bffd44 	movi	r2,-11
    4f38:	00001606 	br	4f94 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    4f3c:	91400e04 	addi	r5,r18,56
    4f40:	a809883a 	mov	r4,r21
    4f44:	894b883a 	add	r5,r17,r5
    4f48:	980d883a 	mov	r6,r19
    4f4c:	0005fb00 	call	5fb0 <memcpy>
      ptr   += n;
    4f50:	aceb883a 	add	r21,r21,r19
      space -= n;
    4f54:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4f58:	a445883a 	add	r2,r20,r17
    4f5c:	1081ffcc 	andi	r2,r2,2047
    4f60:	90800b15 	stw	r2,44(r18)
    4f64:	003fe306 	br	4ef4 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4f68:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4f6c:	00bfff84 	movi	r2,-2
    4f70:	2084703a 	and	r2,r4,r2
    4f74:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4f78:	90800817 	ldw	r2,32(r18)
    4f7c:	10800054 	ori	r2,r2,1
    4f80:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4f84:	90c00017 	ldw	r3,0(r18)
    4f88:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4f8c:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    4f90:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    4f94:	dfc00917 	ldw	ra,36(sp)
    4f98:	df000817 	ldw	fp,32(sp)
    4f9c:	ddc00717 	ldw	r23,28(sp)
    4fa0:	dd800617 	ldw	r22,24(sp)
    4fa4:	dd400517 	ldw	r21,20(sp)
    4fa8:	dd000417 	ldw	r20,16(sp)
    4fac:	dcc00317 	ldw	r19,12(sp)
    4fb0:	dc800217 	ldw	r18,8(sp)
    4fb4:	dc400117 	ldw	r17,4(sp)
    4fb8:	dc000017 	ldw	r16,0(sp)
    4fbc:	dec00a04 	addi	sp,sp,40
    4fc0:	f800283a 	ret

00004fc4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4fc4:	defff804 	addi	sp,sp,-32
    4fc8:	dfc00715 	stw	ra,28(sp)
    4fcc:	dd800615 	stw	r22,24(sp)
    4fd0:	dd400515 	stw	r21,20(sp)
    4fd4:	dd000415 	stw	r20,16(sp)
    4fd8:	dcc00315 	stw	r19,12(sp)
    4fdc:	dc800215 	stw	r18,8(sp)
    4fe0:	dc400115 	stw	r17,4(sp)
    4fe4:	dc000015 	stw	r16,0(sp)
    4fe8:	2021883a 	mov	r16,r4
    4fec:	282d883a 	mov	r22,r5
    4ff0:	3011883a 	mov	r8,r6
    4ff4:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4ff8:	01800616 	blt	zero,r6,5014 <altera_avalon_jtag_uart_write+0x50>
    4ffc:	2829883a 	mov	r20,r5
    5000:	00002106 	br	5088 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    5004:	a585c83a 	sub	r2,r20,r22
    5008:	00004306 	br	5118 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    500c:	00bffd44 	movi	r2,-11
    5010:	00004106 	br	5118 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    5014:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    5018:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    501c:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    5020:	9140032e 	bgeu	r18,r5,5030 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    5024:	2c85c83a 	sub	r2,r5,r18
    5028:	11bfffc4 	addi	r6,r2,-1
    502c:	00000606 	br	5048 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    5030:	28000326 	beq	r5,zero,5040 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    5034:	00820004 	movi	r2,2048
    5038:	148dc83a 	sub	r6,r2,r18
    503c:	00000206 	br	5048 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    5040:	0081ffc4 	movi	r2,2047
    5044:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    5048:	30002626 	beq	r6,zero,50e4 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    504c:	4027883a 	mov	r19,r8
    5050:	3023883a 	mov	r17,r6
    5054:	4180012e 	bgeu	r8,r6,505c <altera_avalon_jtag_uart_write+0x98>
    5058:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    505c:	81020e04 	addi	r4,r16,2104
    5060:	2489883a 	add	r4,r4,r18
    5064:	a00b883a 	mov	r5,r20
    5068:	880d883a 	mov	r6,r17
    506c:	0005fb00 	call	5fb0 <memcpy>
      ptr   += n;
    5070:	a469883a 	add	r20,r20,r17
      count -= n;
    5074:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5078:	9445883a 	add	r2,r18,r17
    507c:	1081ffcc 	andi	r2,r2,2047
    5080:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    5084:	023fe416 	blt	zero,r8,5018 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5088:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    508c:	00bfff84 	movi	r2,-2
    5090:	2084703a 	and	r2,r4,r2
    5094:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    5098:	80800817 	ldw	r2,32(r16)
    509c:	10800094 	ori	r2,r2,2
    50a0:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    50a4:	80c00017 	ldw	r3,0(r16)
    50a8:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    50ac:	2001703a 	wrctl	status,r4
    50b0:	00000706 	br	50d0 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    50b4:	80800d17 	ldw	r2,52(r16)
    50b8:	1140031e 	bne	r2,r5,50c8 <altera_avalon_jtag_uart_write+0x104>
    50bc:	80c00917 	ldw	r3,36(r16)
    50c0:	80800117 	ldw	r2,4(r16)
    50c4:	18bffb36 	bltu	r3,r2,50b4 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    50c8:	80800d17 	ldw	r2,52(r16)
    50cc:	117fed1e 	bne	r2,r5,5084 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    50d0:	b53fcc1e 	bne	r22,r20,5004 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    50d4:	a890000c 	andi	r2,r21,16384
    50d8:	103fcc1e 	bne	r2,zero,500c <altera_avalon_jtag_uart_write+0x48>
    50dc:	00bffec4 	movi	r2,-5
    50e0:	00000d06 	br	5118 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    50e4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    50e8:	00bfff84 	movi	r2,-2
    50ec:	2084703a 	and	r2,r4,r2
    50f0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    50f4:	80800817 	ldw	r2,32(r16)
    50f8:	10800094 	ori	r2,r2,2
    50fc:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    5100:	80c00017 	ldw	r3,0(r16)
    5104:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5108:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    510c:	a890000c 	andi	r2,r21,16384
    5110:	103fe826 	beq	r2,zero,50b4 <altera_avalon_jtag_uart_write+0xf0>
    5114:	003fee06 	br	50d0 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    5118:	dfc00717 	ldw	ra,28(sp)
    511c:	dd800617 	ldw	r22,24(sp)
    5120:	dd400517 	ldw	r21,20(sp)
    5124:	dd000417 	ldw	r20,16(sp)
    5128:	dcc00317 	ldw	r19,12(sp)
    512c:	dc800217 	ldw	r18,8(sp)
    5130:	dc400117 	ldw	r17,4(sp)
    5134:	dc000017 	ldw	r16,0(sp)
    5138:	dec00804 	addi	sp,sp,32
    513c:	f800283a 	ret

00005140 <epcs_read_device_id>:

  return res;
}

alt_u32 epcs_read_device_id(alt_u32 base)
{
    5140:	defffb04 	addi	sp,sp,-20
    5144:	dfc00415 	stw	ra,16(sp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
    5148:	00bfe7c4 	movi	r2,-97
    514c:	d8800305 	stb	r2,12(sp)
  alt_u8 id[3];

  alt_avalon_spi_command(
    5150:	01800044 	movi	r6,1
    5154:	008000c4 	movi	r2,3
    5158:	d8800015 	stw	r2,0(sp)
    515c:	d8c00304 	addi	r3,sp,12
    5160:	1985883a 	add	r2,r3,r6
    5164:	d8800115 	stw	r2,4(sp)
    5168:	d8000215 	stw	zero,8(sp)
    516c:	000b883a 	mov	r5,zero
    5170:	180f883a 	mov	r7,r3
    5174:	0005c7c0 	call	5c7c <alt_avalon_spi_command>
    5178:	d9000383 	ldbu	r4,14(sp)
    517c:	2008923a 	slli	r4,r4,8
    5180:	d8800343 	ldbu	r2,13(sp)
    5184:	1004943a 	slli	r2,r2,16
    5188:	d8c003c3 	ldbu	r3,15(sp)
    518c:	10c4b03a 	or	r2,r2,r3
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
}
    5190:	2084b03a 	or	r2,r4,r2
    5194:	dfc00417 	ldw	ra,16(sp)
    5198:	dec00504 	addi	sp,sp,20
    519c:	f800283a 	ret

000051a0 <epcs_read_electronic_signature>:
  return length;
}


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
    51a0:	defffa04 	addi	sp,sp,-24
    51a4:	dfc00515 	stw	ra,20(sp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
    51a8:	00bfeac4 	movi	r2,-85
    51ac:	d8800305 	stb	r2,12(sp)
    51b0:	d8000345 	stb	zero,13(sp)
    51b4:	d8000385 	stb	zero,14(sp)
    51b8:	d80003c5 	stb	zero,15(sp)
  alt_u8 res;

  alt_avalon_spi_command(
    51bc:	01800104 	movi	r6,4
    51c0:	00800044 	movi	r2,1
    51c4:	d8800015 	stw	r2,0(sp)
    51c8:	d8c00304 	addi	r3,sp,12
    51cc:	1985883a 	add	r2,r3,r6
    51d0:	d8800115 	stw	r2,4(sp)
    51d4:	d8000215 	stw	zero,8(sp)
    51d8:	000b883a 	mov	r5,zero
    51dc:	180f883a 	mov	r7,r3
    51e0:	0005c7c0 	call	5c7c <alt_avalon_spi_command>
    &res,
    0
  );

  return res;
}
    51e4:	d8800403 	ldbu	r2,16(sp)
    51e8:	dfc00517 	ldw	ra,20(sp)
    51ec:	dec00604 	addi	sp,sp,24
    51f0:	f800283a 	ret

000051f4 <epcs_write_enable>:

  return length;
}

void epcs_write_enable(alt_u32 base)
{
    51f4:	defffb04 	addi	sp,sp,-20
    51f8:	dfc00415 	stw	ra,16(sp)
  const alt_u8 wren = epcs_wren;
    51fc:	00800184 	movi	r2,6
    5200:	d8800305 	stb	r2,12(sp)
  alt_avalon_spi_command(
    5204:	d8000015 	stw	zero,0(sp)
    5208:	d8000115 	stw	zero,4(sp)
    520c:	d8000215 	stw	zero,8(sp)
    5210:	000b883a 	mov	r5,zero
    5214:	01800044 	movi	r6,1
    5218:	d9c00304 	addi	r7,sp,12
    521c:	0005c7c0 	call	5c7c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
    5220:	dfc00417 	ldw	ra,16(sp)
    5224:	dec00504 	addi	sp,sp,20
    5228:	f800283a 	ret

0000522c <epcs_exit_4_bytes_mode>:

  return;
}

void epcs_exit_4_bytes_mode(alt_u32 base)
{
    522c:	defffa04 	addi	sp,sp,-24
    5230:	dfc00515 	stw	ra,20(sp)
    5234:	dc000415 	stw	r16,16(sp)
    5238:	2021883a 	mov	r16,r4
  const alt_u8 exit4b_cmd = epcs_dis4b;
    523c:	00bffa44 	movi	r2,-23
    5240:	d8800305 	stb	r2,12(sp)

  /* First, WREN */
  epcs_write_enable(base);
    5244:	00051f40 	call	51f4 <epcs_write_enable>

  alt_avalon_spi_command(
    5248:	d8000015 	stw	zero,0(sp)
    524c:	d8000115 	stw	zero,4(sp)
    5250:	d8000215 	stw	zero,8(sp)
    5254:	8009883a 	mov	r4,r16
    5258:	000b883a 	mov	r5,zero
    525c:	01800044 	movi	r6,1
    5260:	d9c00304 	addi	r7,sp,12
    5264:	0005c7c0 	call	5c7c <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    5268:	dfc00517 	ldw	ra,20(sp)
    526c:	dc000417 	ldw	r16,16(sp)
    5270:	dec00604 	addi	sp,sp,24
    5274:	f800283a 	ret

00005278 <epcs_enter_4_bytes_mode>:

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
}

void epcs_enter_4_bytes_mode(alt_u32 base)
{
    5278:	defffa04 	addi	sp,sp,-24
    527c:	dfc00515 	stw	ra,20(sp)
    5280:	dc000415 	stw	r16,16(sp)
    5284:	2021883a 	mov	r16,r4
  const alt_u8 en4b_cmd = epcs_en4b;
    5288:	00bfedc4 	movi	r2,-73
    528c:	d8800305 	stb	r2,12(sp)

  /* First, WREN */
  epcs_write_enable(base);
    5290:	00051f40 	call	51f4 <epcs_write_enable>

  alt_avalon_spi_command(
    5294:	d8000015 	stw	zero,0(sp)
    5298:	d8000115 	stw	zero,4(sp)
    529c:	d8000215 	stw	zero,8(sp)
    52a0:	8009883a 	mov	r4,r16
    52a4:	000b883a 	mov	r5,zero
    52a8:	01800044 	movi	r6,1
    52ac:	d9c00304 	addi	r7,sp,12
    52b0:	0005c7c0 	call	5c7c <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    52b4:	dfc00517 	ldw	ra,20(sp)
    52b8:	dc000417 	ldw	r16,16(sp)
    52bc:	dec00604 	addi	sp,sp,24
    52c0:	f800283a 	ret

000052c4 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
    52c4:	defffb04 	addi	sp,sp,-20
    52c8:	dfc00415 	stw	ra,16(sp)
  const alt_u8 rdsr = epcs_rdsr;
    52cc:	00800144 	movi	r2,5
    52d0:	d8800305 	stb	r2,12(sp)
  alt_u8 status;
  alt_avalon_spi_command(
    52d4:	01800044 	movi	r6,1
    52d8:	d9800015 	stw	r6,0(sp)
    52dc:	d8c00304 	addi	r3,sp,12
    52e0:	1985883a 	add	r2,r3,r6
    52e4:	d8800115 	stw	r2,4(sp)
    52e8:	d8000215 	stw	zero,8(sp)
    52ec:	000b883a 	mov	r5,zero
    52f0:	180f883a 	mov	r7,r3
    52f4:	0005c7c0 	call	5c7c <alt_avalon_spi_command>
    &status,
    0
  );

  return status;
}
    52f8:	d8800343 	ldbu	r2,13(sp)
    52fc:	dfc00417 	ldw	ra,16(sp)
    5300:	dec00504 	addi	sp,sp,20
    5304:	f800283a 	ret

00005308 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
    5308:	defff704 	addi	sp,sp,-36
    530c:	dfc00815 	stw	ra,32(sp)
    5310:	dc800715 	stw	r18,28(sp)
    5314:	dc400615 	stw	r17,24(sp)
    5318:	dc000515 	stw	r16,20(sp)
    531c:	2021883a 	mov	r16,r4
    5320:	3025883a 	mov	r18,r6
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
    5324:	30000c26 	beq	r6,zero,5358 <epcs_sector_erase+0x50>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
    5328:	00bff604 	movi	r2,-40
    532c:	d8800305 	stb	r2,12(sp)
      se[1] = (offset >> 24) & 0xFF;
    5330:	2804d63a 	srli	r2,r5,24
    5334:	d8800345 	stb	r2,13(sp)
      se[2] = (offset >> 16) & 0xFF;
    5338:	2804d43a 	srli	r2,r5,16
    533c:	d8800385 	stb	r2,14(sp)
      se[3] = (offset >> 8) & 0xFF;
    5340:	2804d23a 	srli	r2,r5,8
    5344:	d88003c5 	stb	r2,15(sp)
      se[4] = offset & 0xFF;
    5348:	d9400405 	stb	r5,16(sp)
      len   = 5;
      epcs_enter_4_bytes_mode(base);
    534c:	00052780 	call	5278 <epcs_enter_4_bytes_mode>
    5350:	04400144 	movi	r17,5
    5354:	00000806 	br	5378 <epcs_sector_erase+0x70>
  }
  else
  {
      se[0] = epcs_se;
    5358:	00bff604 	movi	r2,-40
    535c:	d8800305 	stb	r2,12(sp)
      se[1] = (offset >> 16) & 0xFF;
    5360:	2804d43a 	srli	r2,r5,16
    5364:	d8800345 	stb	r2,13(sp)
      se[2] = (offset >> 8) & 0xFF;
    5368:	2804d23a 	srli	r2,r5,8
    536c:	d8800385 	stb	r2,14(sp)
      se[3] = offset & 0xFF;
    5370:	d94003c5 	stb	r5,15(sp)
    5374:	04400104 	movi	r17,4
      len   = 4;
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
    5378:	8009883a 	mov	r4,r16
    537c:	00051f40 	call	51f4 <epcs_write_enable>

  alt_avalon_spi_command(
    5380:	89803fcc 	andi	r6,r17,255
    5384:	d8000015 	stw	zero,0(sp)
    5388:	d8000115 	stw	zero,4(sp)
    538c:	d8000215 	stw	zero,8(sp)
    5390:	8009883a 	mov	r4,r16
    5394:	000b883a 	mov	r5,zero
    5398:	d9c00304 	addi	r7,sp,12
    539c:	0005c7c0 	call	5c7c <alt_avalon_spi_command>
  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
  return epcs_read_status_register(base) & 1;
    53a0:	8009883a 	mov	r4,r16
    53a4:	00052c40 	call	52c4 <epcs_read_status_register>
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    53a8:	1080004c 	andi	r2,r2,1
    53ac:	103ffc1e 	bne	r2,zero,53a0 <epcs_sector_erase+0x98>
    0
  );

  epcs_await_wip_released(base);

  if(four_bytes_mode)
    53b0:	90000226 	beq	r18,zero,53bc <epcs_sector_erase+0xb4>
  {
    epcs_exit_4_bytes_mode(base);
    53b4:	8009883a 	mov	r4,r16
    53b8:	000522c0 	call	522c <epcs_exit_4_bytes_mode>
  }
}
    53bc:	dfc00817 	ldw	ra,32(sp)
    53c0:	dc800717 	ldw	r18,28(sp)
    53c4:	dc400617 	ldw	r17,24(sp)
    53c8:	dc000517 	ldw	r16,20(sp)
    53cc:	dec00904 	addi	sp,sp,36
    53d0:	f800283a 	ret

000053d4 <epcs_write_buffer>:
}

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
    53d4:	defff504 	addi	sp,sp,-44
    53d8:	dfc00a15 	stw	ra,40(sp)
    53dc:	dd000915 	stw	r20,36(sp)
    53e0:	dcc00815 	stw	r19,32(sp)
    53e4:	dc800715 	stw	r18,28(sp)
    53e8:	dc400615 	stw	r17,24(sp)
    53ec:	dc000515 	stw	r16,20(sp)
    53f0:	2021883a 	mov	r16,r4
    53f4:	3027883a 	mov	r19,r6
    53f8:	3825883a 	mov	r18,r7
    53fc:	dd000b17 	ldw	r20,44(sp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
    5400:	00800084 	movi	r2,2
    5404:	d8800305 	stb	r2,12(sp)
  
  if(four_bytes_mode)
    5408:	a0000a26 	beq	r20,zero,5434 <epcs_write_buffer+0x60>
  {
      pp[1] = (offset >> 24) & 0xFF;
    540c:	2805d63a 	srai	r2,r5,24
    5410:	d8800345 	stb	r2,13(sp)
      pp[2] = (offset >> 16) & 0xFF;
    5414:	2805d43a 	srai	r2,r5,16
    5418:	d8800385 	stb	r2,14(sp)
      pp[3] = (offset >> 8) & 0xFF;
    541c:	2805d23a 	srai	r2,r5,8
    5420:	d88003c5 	stb	r2,15(sp)
      pp[4] = offset & 0xFF;
    5424:	d9400405 	stb	r5,16(sp)
      cmd_len = 5;
      epcs_enter_4_bytes_mode(base);
    5428:	00052780 	call	5278 <epcs_enter_4_bytes_mode>
    542c:	04400144 	movi	r17,5
    5430:	00000606 	br	544c <epcs_write_buffer+0x78>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
    5434:	2805d43a 	srai	r2,r5,16
    5438:	d8800345 	stb	r2,13(sp)
      pp[2] = (offset >> 8) & 0xFF;
    543c:	2805d23a 	srai	r2,r5,8
    5440:	d8800385 	stb	r2,14(sp)
      pp[3] = offset & 0xFF;
    5444:	d94003c5 	stb	r5,15(sp)
    5448:	04400104 	movi	r17,4
      cmd_len = 4;
  }

  /* First, WREN */
  epcs_write_enable(base);
    544c:	8009883a 	mov	r4,r16
    5450:	00051f40 	call	51f4 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
    5454:	d8000015 	stw	zero,0(sp)
    5458:	d8000115 	stw	zero,4(sp)
    545c:	00800044 	movi	r2,1
    5460:	d8800215 	stw	r2,8(sp)
    5464:	8009883a 	mov	r4,r16
    5468:	000b883a 	mov	r5,zero
    546c:	880d883a 	mov	r6,r17
    5470:	d9c00304 	addi	r7,sp,12
    5474:	0005c7c0 	call	5c7c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
    5478:	d8000015 	stw	zero,0(sp)
    547c:	d8000115 	stw	zero,4(sp)
    5480:	d8000215 	stw	zero,8(sp)
    5484:	8009883a 	mov	r4,r16
    5488:	000b883a 	mov	r5,zero
    548c:	900d883a 	mov	r6,r18
    5490:	980f883a 	mov	r7,r19
    5494:	0005c7c0 	call	5c7c <alt_avalon_spi_command>
  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
  return epcs_read_status_register(base) & 1;
    5498:	8009883a 	mov	r4,r16
    549c:	00052c40 	call	52c4 <epcs_read_status_register>
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    54a0:	1080004c 	andi	r2,r2,1
    54a4:	103ffc1e 	bne	r2,zero,5498 <epcs_write_buffer+0xc4>
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);

  if(four_bytes_mode)
    54a8:	a0000226 	beq	r20,zero,54b4 <epcs_write_buffer+0xe0>
  {
    epcs_exit_4_bytes_mode(base);
    54ac:	8009883a 	mov	r4,r16
    54b0:	000522c0 	call	522c <epcs_exit_4_bytes_mode>
  }

  return length;
}
    54b4:	9005883a 	mov	r2,r18
    54b8:	dfc00a17 	ldw	ra,40(sp)
    54bc:	dd000917 	ldw	r20,36(sp)
    54c0:	dcc00817 	ldw	r19,32(sp)
    54c4:	dc800717 	ldw	r18,28(sp)
    54c8:	dc400617 	ldw	r17,24(sp)
    54cc:	dc000517 	ldw	r16,20(sp)
    54d0:	dec00b04 	addi	sp,sp,44
    54d4:	f800283a 	ret

000054d8 <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
    54d8:	defff504 	addi	sp,sp,-44
    54dc:	dfc00a15 	stw	ra,40(sp)
    54e0:	dd000915 	stw	r20,36(sp)
    54e4:	dcc00815 	stw	r19,32(sp)
    54e8:	dc800715 	stw	r18,28(sp)
    54ec:	dc400615 	stw	r17,24(sp)
    54f0:	dc000515 	stw	r16,20(sp)
    54f4:	2021883a 	mov	r16,r4
    54f8:	3027883a 	mov	r19,r6
    54fc:	3823883a 	mov	r17,r7
    5500:	dd000b17 	ldw	r20,44(sp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
    5504:	008000c4 	movi	r2,3
    5508:	d8800305 	stb	r2,12(sp)
  
  if(four_bytes_mode)
    550c:	a0000a26 	beq	r20,zero,5538 <epcs_read_buffer+0x60>
  {
        read_command[1] = (offset >> 24) & 0xFF;
    5510:	2805d63a 	srai	r2,r5,24
    5514:	d8800345 	stb	r2,13(sp)
        read_command[2] = (offset >> 16) & 0xFF;
    5518:	2805d43a 	srai	r2,r5,16
    551c:	d8800385 	stb	r2,14(sp)
        read_command[3] = (offset >> 8) & 0xFF;
    5520:	2805d23a 	srai	r2,r5,8
    5524:	d88003c5 	stb	r2,15(sp)
        read_command[4] = offset & 0xFF;
    5528:	d9400405 	stb	r5,16(sp)
        cmd_len = 5;
        epcs_enter_4_bytes_mode(base);
    552c:	00052780 	call	5278 <epcs_enter_4_bytes_mode>
    5530:	04800144 	movi	r18,5
    5534:	00000606 	br	5550 <epcs_read_buffer+0x78>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
    5538:	2805d43a 	srai	r2,r5,16
    553c:	d8800345 	stb	r2,13(sp)
        read_command[2] = (offset >> 8) & 0xFF;
    5540:	2805d23a 	srai	r2,r5,8
    5544:	d8800385 	stb	r2,14(sp)
        read_command[3] = offset & 0xFF;
    5548:	d94003c5 	stb	r5,15(sp)
    554c:	04800104 	movi	r18,4
  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
  return epcs_read_status_register(base) & 1;
    5550:	8009883a 	mov	r4,r16
    5554:	00052c40 	call	52c4 <epcs_read_status_register>
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    5558:	1080004c 	andi	r2,r2,1
    555c:	103ffc1e 	bne	r2,zero,5550 <epcs_read_buffer+0x78>
        cmd_len = 4;
  }

  epcs_await_wip_released(base);

  alt_avalon_spi_command(
    5560:	dc400015 	stw	r17,0(sp)
    5564:	dcc00115 	stw	r19,4(sp)
    5568:	d8000215 	stw	zero,8(sp)
    556c:	8009883a 	mov	r4,r16
    5570:	000b883a 	mov	r5,zero
    5574:	900d883a 	mov	r6,r18
    5578:	d9c00304 	addi	r7,sp,12
    557c:	0005c7c0 	call	5c7c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
    5580:	a0000226 	beq	r20,zero,558c <epcs_read_buffer+0xb4>
  {
    epcs_exit_4_bytes_mode(base);
    5584:	8009883a 	mov	r4,r16
    5588:	000522c0 	call	522c <epcs_exit_4_bytes_mode>
  }

  return length;
}
    558c:	8805883a 	mov	r2,r17
    5590:	dfc00a17 	ldw	ra,40(sp)
    5594:	dd000917 	ldw	r20,36(sp)
    5598:	dcc00817 	ldw	r19,32(sp)
    559c:	dc800717 	ldw	r18,28(sp)
    55a0:	dc400617 	ldw	r17,24(sp)
    55a4:	dc000517 	ldw	r16,20(sp)
    55a8:	dec00b04 	addi	sp,sp,44
    55ac:	f800283a 	ret

000055b0 <epcs_write_status_register>:
    0
  );
}

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
    55b0:	defffa04 	addi	sp,sp,-24
    55b4:	dfc00515 	stw	ra,20(sp)
    55b8:	dc000415 	stw	r16,16(sp)
    55bc:	2021883a 	mov	r16,r4
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
    55c0:	00800044 	movi	r2,1
    55c4:	d8800305 	stb	r2,12(sp)
  wrsr[1] = value;
    55c8:	d9400345 	stb	r5,13(sp)

  alt_avalon_spi_command(
    55cc:	d8000015 	stw	zero,0(sp)
    55d0:	d8000115 	stw	zero,4(sp)
    55d4:	d8000215 	stw	zero,8(sp)
    55d8:	000b883a 	mov	r5,zero
    55dc:	01800084 	movi	r6,2
    55e0:	d9c00304 	addi	r7,sp,12
    55e4:	0005c7c0 	call	5c7c <alt_avalon_spi_command>
  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
  return epcs_read_status_register(base) & 1;
    55e8:	8009883a 	mov	r4,r16
    55ec:	00052c40 	call	52c4 <epcs_read_status_register>
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    55f0:	1080004c 	andi	r2,r2,1
    55f4:	103ffc1e 	bne	r2,zero,55e8 <epcs_write_status_register+0x38>
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
}
    55f8:	dfc00517 	ldw	ra,20(sp)
    55fc:	dc000417 	ldw	r16,16(sp)
    5600:	dec00604 	addi	sp,sp,24
    5604:	f800283a 	ret

00005608 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    5608:	00800034 	movhi	r2,0
    560c:	109d1604 	addi	r2,r2,29784
    5610:	10800017 	ldw	r2,0(r2)
    5614:	1000021e 	bne	r2,zero,5620 <alt_alarm_start+0x18>
    5618:	00bfde84 	movi	r2,-134
    561c:	f800283a 	ret
  {
    if (alarm)
    5620:	2000021e 	bne	r4,zero,562c <alt_alarm_start+0x24>
    5624:	00bffa84 	movi	r2,-22
    5628:	f800283a 	ret
    {
      alarm->callback = callback;
    562c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    5630:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5634:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5638:	00bfff84 	movi	r2,-2
    563c:	3884703a 	and	r2,r7,r2
    5640:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    5644:	00800034 	movhi	r2,0
    5648:	109d1704 	addi	r2,r2,29788
    564c:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    5650:	01800044 	movi	r6,1
    5654:	1985883a 	add	r2,r3,r6
    5658:	2885883a 	add	r2,r5,r2
    565c:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    5660:	10c0022e 	bgeu	r2,r3,566c <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    5664:	21800405 	stb	r6,16(r4)
    5668:	00000106 	br	5670 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    566c:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5670:	00800034 	movhi	r2,0
    5674:	109d0f04 	addi	r2,r2,29756
    5678:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    567c:	10c00017 	ldw	r3,0(r2)
    5680:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    5684:	10c00017 	ldw	r3,0(r2)
    5688:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    568c:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5690:	3801703a 	wrctl	status,r7
    5694:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    5698:	f800283a 	ret

0000569c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    569c:	3005883a 	mov	r2,r6
    56a0:	f800283a 	ret

000056a4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    56a4:	deffff04 	addi	sp,sp,-4
    56a8:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    56ac:	20000226 	beq	r4,zero,56b8 <alt_dev_llist_insert+0x14>
    56b0:	20800217 	ldw	r2,8(r4)
    56b4:	10000d1e 	bne	r2,zero,56ec <alt_dev_llist_insert+0x48>
    56b8:	00800034 	movhi	r2,0
    56bc:	109d0b04 	addi	r2,r2,29740
    56c0:	10800017 	ldw	r2,0(r2)
    56c4:	1000031e 	bne	r2,zero,56d4 <alt_dev_llist_insert+0x30>
    56c8:	00c00034 	movhi	r3,0
    56cc:	18dd1104 	addi	r3,r3,29764
    56d0:	00000206 	br	56dc <alt_dev_llist_insert+0x38>
    56d4:	103ee83a 	callr	r2
    56d8:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    56dc:	00800584 	movi	r2,22
    56e0:	18800015 	stw	r2,0(r3)
    56e4:	00bffa84 	movi	r2,-22
    56e8:	00000706 	br	5708 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    56ec:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    56f0:	28800017 	ldw	r2,0(r5)
    56f4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    56f8:	28800017 	ldw	r2,0(r5)
    56fc:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    5700:	29000015 	stw	r4,0(r5)
    5704:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    5708:	dfc00017 	ldw	ra,0(sp)
    570c:	dec00104 	addi	sp,sp,4
    5710:	f800283a 	ret

00005714 <alt_flash_close_dev>:

  return dev;
}

void alt_flash_close_dev(alt_flash_fd* fd)
{
    5714:	deffff04 	addi	sp,sp,-4
    5718:	dfc00015 	stw	ra,0(sp)
  if (fd && fd->close)
    571c:	20000326 	beq	r4,zero,572c <alt_flash_close_dev+0x18>
    5720:	20800417 	ldw	r2,16(r4)
    5724:	10000126 	beq	r2,zero,572c <alt_flash_close_dev+0x18>
  {
    fd->close(fd);
    5728:	103ee83a 	callr	r2
  }
  return;
}
    572c:	dfc00017 	ldw	ra,0(sp)
    5730:	dec00104 	addi	sp,sp,4
    5734:	f800283a 	ret

00005738 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    5738:	defffe04 	addi	sp,sp,-8
    573c:	dfc00115 	stw	ra,4(sp)
    5740:	dc000015 	stw	r16,0(sp)
    5744:	2021883a 	mov	r16,r4
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    5748:	d1600804 	addi	r5,gp,-32736
    574c:	0005da80 	call	5da8 <alt_find_dev>

  if ((dev) && dev->open)
    5750:	10000526 	beq	r2,zero,5768 <alt_flash_open_dev+0x30>
    5754:	10c00317 	ldw	r3,12(r2)
    5758:	18000326 	beq	r3,zero,5768 <alt_flash_open_dev+0x30>
  {
    return dev->open(dev, name);
    575c:	1009883a 	mov	r4,r2
    5760:	800b883a 	mov	r5,r16
    5764:	183ee83a 	callr	r3
  }

  return dev;
}
    5768:	dfc00117 	ldw	ra,4(sp)
    576c:	dc000017 	ldw	r16,0(sp)
    5770:	dec00204 	addi	sp,sp,8
    5774:	f800283a 	ret

00005778 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5778:	000530fa 	rdctl	r2,ienable
    577c:	00c00044 	movi	r3,1
    5780:	1946983a 	sll	r3,r3,r5
    5784:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
    5788:	1004c03a 	cmpne	r2,r2,zero
    578c:	f800283a 	ret

00005790 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5790:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5794:	00bfff84 	movi	r2,-2
    5798:	3084703a 	and	r2,r6,r2
    579c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    57a0:	00c00034 	movhi	r3,0
    57a4:	18dd1504 	addi	r3,r3,29780
    57a8:	19000017 	ldw	r4,0(r3)
    57ac:	00800044 	movi	r2,1
    57b0:	1144983a 	sll	r2,r2,r5
    57b4:	1104b03a 	or	r2,r2,r4
    57b8:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    57bc:	18800017 	ldw	r2,0(r3)
    57c0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    57c4:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    57c8:	0005883a 	mov	r2,zero
    57cc:	f800283a 	ret

000057d0 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    57d0:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    57d4:	00bfff84 	movi	r2,-2
    57d8:	3084703a 	and	r2,r6,r2
    57dc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    57e0:	00c00034 	movhi	r3,0
    57e4:	18dd1504 	addi	r3,r3,29780
    57e8:	19000017 	ldw	r4,0(r3)
    57ec:	00bfff84 	movi	r2,-2
    57f0:	1144183a 	rol	r2,r2,r5
    57f4:	1104703a 	and	r2,r2,r4
    57f8:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    57fc:	18800017 	ldw	r2,0(r3)
    5800:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5804:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    5808:	0005883a 	mov	r2,zero
    580c:	f800283a 	ret

00005810 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5810:	defffe04 	addi	sp,sp,-8
    5814:	dfc00115 	stw	ra,4(sp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    5818:	d8800217 	ldw	r2,8(sp)
    581c:	d8800015 	stw	r2,0(sp)
    5820:	00058300 	call	5830 <alt_iic_isr_register>
}  
    5824:	dfc00117 	ldw	ra,4(sp)
    5828:	dec00204 	addi	sp,sp,8
    582c:	f800283a 	ret

00005830 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5830:	defffe04 	addi	sp,sp,-8
    5834:	dfc00115 	stw	ra,4(sp)
    5838:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    583c:	008007c4 	movi	r2,31
    5840:	1140020e 	bge	r2,r5,584c <alt_iic_isr_register+0x1c>
    5844:	00bffa84 	movi	r2,-22
    5848:	00000f06 	br	5888 <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    584c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5850:	00bfff84 	movi	r2,-2
    5854:	8084703a 	and	r2,r16,r2
    5858:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    585c:	280490fa 	slli	r2,r5,3
    5860:	00c00034 	movhi	r3,0
    5864:	18dd1804 	addi	r3,r3,29792
    5868:	10c5883a 	add	r2,r2,r3
    586c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    5870:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5874:	30000226 	beq	r6,zero,5880 <alt_iic_isr_register+0x50>
    5878:	00057900 	call	5790 <alt_ic_irq_enable>
    587c:	00000106 	br	5884 <alt_iic_isr_register+0x54>
    5880:	00057d00 	call	57d0 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5884:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    5888:	dfc00117 	ldw	ra,4(sp)
    588c:	dc000017 	ldw	r16,0(sp)
    5890:	dec00204 	addi	sp,sp,8
    5894:	f800283a 	ret

00005898 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5898:	defffd04 	addi	sp,sp,-12
    589c:	dfc00215 	stw	ra,8(sp)
    58a0:	dc400115 	stw	r17,4(sp)
    58a4:	dc000015 	stw	r16,0(sp)
    58a8:	2023883a 	mov	r17,r4
  int old;

  old = open (name, flags, mode);
    58ac:	2809883a 	mov	r4,r5
    58b0:	300b883a 	mov	r5,r6
    58b4:	380d883a 	mov	r6,r7
    58b8:	00059a80 	call	59a8 <open>
    58bc:	1021883a 	mov	r16,r2

  if (old >= 0)
    58c0:	10000e16 	blt	r2,zero,58fc <alt_open_fd+0x64>
  {
    fd->dev      = alt_fd_list[old].dev;
    58c4:	1009883a 	mov	r4,r2
    58c8:	01400304 	movi	r5,12
    58cc:	0005fdc0 	call	5fdc <__mulsi3>
    58d0:	00c00034 	movhi	r3,0
    58d4:	18dca404 	addi	r3,r3,29328
    58d8:	10c5883a 	add	r2,r2,r3
    58dc:	10c00017 	ldw	r3,0(r2)
    58e0:	88c00015 	stw	r3,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    58e4:	10c00117 	ldw	r3,4(r2)
    58e8:	88c00115 	stw	r3,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    58ec:	10800217 	ldw	r2,8(r2)
    58f0:	88800215 	stw	r2,8(r17)

    alt_release_fd (old);
    58f4:	8009883a 	mov	r4,r16
    58f8:	0005b2c0 	call	5b2c <alt_release_fd>
  }
} 
    58fc:	dfc00217 	ldw	ra,8(sp)
    5900:	dc400117 	ldw	r17,4(sp)
    5904:	dc000017 	ldw	r16,0(sp)
    5908:	dec00304 	addi	sp,sp,12
    590c:	f800283a 	ret

00005910 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5910:	defffa04 	addi	sp,sp,-24
    5914:	dfc00515 	stw	ra,20(sp)
    5918:	dd000415 	stw	r20,16(sp)
    591c:	dcc00315 	stw	r19,12(sp)
    5920:	dc800215 	stw	r18,8(sp)
    5924:	dc400115 	stw	r17,4(sp)
    5928:	dc000015 	stw	r16,0(sp)
    592c:	2005883a 	mov	r2,r4
    5930:	2827883a 	mov	r19,r5
    5934:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5938:	04000034 	movhi	r16,0
    593c:	841ca704 	addi	r16,r16,29340
    5940:	04800044 	movi	r18,1
    5944:	04407fc4 	movi	r17,511
    5948:	8009883a 	mov	r4,r16
    594c:	100b883a 	mov	r5,r2
    5950:	900d883a 	mov	r6,r18
    5954:	880f883a 	mov	r7,r17
    5958:	00058980 	call	5898 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    595c:	843ffd04 	addi	r16,r16,-12
    5960:	8009883a 	mov	r4,r16
    5964:	980b883a 	mov	r5,r19
    5968:	000d883a 	mov	r6,zero
    596c:	880f883a 	mov	r7,r17
    5970:	00058980 	call	5898 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5974:	81000604 	addi	r4,r16,24
    5978:	a00b883a 	mov	r5,r20
    597c:	900d883a 	mov	r6,r18
    5980:	880f883a 	mov	r7,r17
    5984:	00058980 	call	5898 <alt_open_fd>
}  
    5988:	dfc00517 	ldw	ra,20(sp)
    598c:	dd000417 	ldw	r20,16(sp)
    5990:	dcc00317 	ldw	r19,12(sp)
    5994:	dc800217 	ldw	r18,8(sp)
    5998:	dc400117 	ldw	r17,4(sp)
    599c:	dc000017 	ldw	r16,0(sp)
    59a0:	dec00604 	addi	sp,sp,24
    59a4:	f800283a 	ret

000059a8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    59a8:	defff904 	addi	sp,sp,-28
    59ac:	dfc00615 	stw	ra,24(sp)
    59b0:	dd400515 	stw	r21,20(sp)
    59b4:	dd000415 	stw	r20,16(sp)
    59b8:	dcc00315 	stw	r19,12(sp)
    59bc:	dc800215 	stw	r18,8(sp)
    59c0:	dc400115 	stw	r17,4(sp)
    59c4:	dc000015 	stw	r16,0(sp)
    59c8:	2029883a 	mov	r20,r4
    59cc:	2827883a 	mov	r19,r5
    59d0:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    59d4:	01400034 	movhi	r5,0
    59d8:	295d0804 	addi	r5,r5,29728
    59dc:	0005da80 	call	5da8 <alt_find_dev>
    59e0:	1021883a 	mov	r16,r2
    59e4:	10000226 	beq	r2,zero,59f0 <open+0x48>
    59e8:	0025883a 	mov	r18,zero
    59ec:	00000a06 	br	5a18 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    59f0:	a009883a 	mov	r4,r20
    59f4:	0005e180 	call	5e18 <alt_find_file>
    59f8:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    59fc:	1000051e 	bne	r2,zero,5a14 <open+0x6c>
    5a00:	047fffc4 	movi	r17,-1
    5a04:	043ffb44 	movi	r16,-19
    5a08:	00002d06 	br	5ac0 <open+0x118>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5a0c:	043ffcc4 	movi	r16,-13
    5a10:	00002b06 	br	5ac0 <open+0x118>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    5a14:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    5a18:	8009883a 	mov	r4,r16
    5a1c:	0005ed40 	call	5ed4 <alt_get_fd>
    5a20:	1023883a 	mov	r17,r2
    5a24:	10003516 	blt	r2,zero,5afc <open+0x154>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    5a28:	1009883a 	mov	r4,r2
    5a2c:	01400304 	movi	r5,12
    5a30:	0005fdc0 	call	5fdc <__mulsi3>
    5a34:	02000034 	movhi	r8,0
    5a38:	421ca404 	addi	r8,r8,29328
    5a3c:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5a40:	00900034 	movhi	r2,16384
    5a44:	10bfffc4 	addi	r2,r2,-1
    5a48:	9886703a 	and	r3,r19,r2
    5a4c:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5a50:	9004c03a 	cmpne	r2,r18,zero
    5a54:	1000121e 	bne	r2,zero,5aa0 <open+0xf8>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    5a58:	18900034 	orhi	r2,r3,16384
    5a5c:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5a60:	00800034 	movhi	r2,0
    5a64:	109d0a04 	addi	r2,r2,29736
    5a68:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5a6c:	21800017 	ldw	r6,0(r4)
    5a70:	000b883a 	mov	r5,zero
    5a74:	4007883a 	mov	r3,r8
    5a78:	02400044 	movi	r9,1
    5a7c:	02000304 	movi	r8,12
    5a80:	18800017 	ldw	r2,0(r3)
    5a84:	1180031e 	bne	r2,r6,5a94 <open+0xec>
    5a88:	18800217 	ldw	r2,8(r3)
    5a8c:	1000010e 	bge	r2,zero,5a94 <open+0xec>
    5a90:	193fde1e 	bne	r3,r4,5a0c <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5a94:	2a4b883a 	add	r5,r5,r9
    5a98:	1a07883a 	add	r3,r3,r8
    5a9c:	397ff82e 	bgeu	r7,r5,5a80 <open+0xd8>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5aa0:	80800317 	ldw	r2,12(r16)
    5aa4:	10001726 	beq	r2,zero,5b04 <open+0x15c>
    5aa8:	a00b883a 	mov	r5,r20
    5aac:	980d883a 	mov	r6,r19
    5ab0:	a80f883a 	mov	r7,r21
    5ab4:	103ee83a 	callr	r2
    5ab8:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5abc:	1000110e 	bge	r2,zero,5b04 <open+0x15c>
  {
    alt_release_fd (index);  
    5ac0:	8809883a 	mov	r4,r17
    5ac4:	0005b2c0 	call	5b2c <alt_release_fd>
    5ac8:	00800034 	movhi	r2,0
    5acc:	109d0b04 	addi	r2,r2,29740
    5ad0:	10800017 	ldw	r2,0(r2)
    5ad4:	1000031e 	bne	r2,zero,5ae4 <open+0x13c>
    5ad8:	00c00034 	movhi	r3,0
    5adc:	18dd1104 	addi	r3,r3,29764
    5ae0:	00000206 	br	5aec <open+0x144>
    5ae4:	103ee83a 	callr	r2
    5ae8:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    5aec:	0405c83a 	sub	r2,zero,r16
    5af0:	18800015 	stw	r2,0(r3)
    5af4:	047fffc4 	movi	r17,-1
    5af8:	00000206 	br	5b04 <open+0x15c>
    5afc:	1021883a 	mov	r16,r2
    5b00:	003fef06 	br	5ac0 <open+0x118>
  }
  
  /* return the reference upon success */

  return index;
}
    5b04:	8805883a 	mov	r2,r17
    5b08:	dfc00617 	ldw	ra,24(sp)
    5b0c:	dd400517 	ldw	r21,20(sp)
    5b10:	dd000417 	ldw	r20,16(sp)
    5b14:	dcc00317 	ldw	r19,12(sp)
    5b18:	dc800217 	ldw	r18,8(sp)
    5b1c:	dc400117 	ldw	r17,4(sp)
    5b20:	dc000017 	ldw	r16,0(sp)
    5b24:	dec00704 	addi	sp,sp,28
    5b28:	f800283a 	ret

00005b2c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    5b2c:	defffc04 	addi	sp,sp,-16
    5b30:	dfc00315 	stw	ra,12(sp)
    5b34:	dc800215 	stw	r18,8(sp)
    5b38:	dc400115 	stw	r17,4(sp)
    5b3c:	dc000015 	stw	r16,0(sp)
    5b40:	2025883a 	mov	r18,r4
  if (fd > 2)
    5b44:	00800084 	movi	r2,2
    5b48:	11000c0e 	bge	r2,r4,5b7c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    5b4c:	04400034 	movhi	r17,0
    5b50:	8c5ca404 	addi	r17,r17,29328
    5b54:	04000304 	movi	r16,12
    5b58:	800b883a 	mov	r5,r16
    5b5c:	0005fdc0 	call	5fdc <__mulsi3>
    5b60:	1445883a 	add	r2,r2,r17
    5b64:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    5b68:	9009883a 	mov	r4,r18
    5b6c:	800b883a 	mov	r5,r16
    5b70:	0005fdc0 	call	5fdc <__mulsi3>
    5b74:	1445883a 	add	r2,r2,r17
    5b78:	10000015 	stw	zero,0(r2)
  }
}
    5b7c:	dfc00317 	ldw	ra,12(sp)
    5b80:	dc800217 	ldw	r18,8(sp)
    5b84:	dc400117 	ldw	r17,4(sp)
    5b88:	dc000017 	ldw	r16,0(sp)
    5b8c:	dec00404 	addi	sp,sp,16
    5b90:	f800283a 	ret

00005b94 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5b94:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5b98:	00bfff84 	movi	r2,-2
    5b9c:	2884703a 	and	r2,r5,r2
    5ba0:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    5ba4:	20c00017 	ldw	r3,0(r4)
    5ba8:	20800117 	ldw	r2,4(r4)
    5bac:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    5bb0:	20800117 	ldw	r2,4(r4)
    5bb4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    5bb8:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    5bbc:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5bc0:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    5bc4:	f800283a 	ret

00005bc8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    5bc8:	defffd04 	addi	sp,sp,-12
    5bcc:	dfc00215 	stw	ra,8(sp)
    5bd0:	dc400115 	stw	r17,4(sp)
    5bd4:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    5bd8:	d4200b17 	ldw	r16,-32724(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    5bdc:	d0a01317 	ldw	r2,-32692(gp)
    5be0:	10800044 	addi	r2,r2,1
    5be4:	d0a01315 	stw	r2,-32692(gp)
    5be8:	00001b06 	br	5c58 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    5bec:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    5bf0:	80800403 	ldbu	r2,16(r16)
    5bf4:	10000326 	beq	r2,zero,5c04 <alt_tick+0x3c>
    5bf8:	d0a01317 	ldw	r2,-32692(gp)
    5bfc:	1000011e 	bne	r2,zero,5c04 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    5c00:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    5c04:	d0e01317 	ldw	r3,-32692(gp)
    5c08:	80800217 	ldw	r2,8(r16)
    5c0c:	18801136 	bltu	r3,r2,5c54 <alt_tick+0x8c>
    5c10:	80800403 	ldbu	r2,16(r16)
    5c14:	10000f1e 	bne	r2,zero,5c54 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    5c18:	80800317 	ldw	r2,12(r16)
    5c1c:	81000517 	ldw	r4,20(r16)
    5c20:	103ee83a 	callr	r2
    5c24:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    5c28:	1000031e 	bne	r2,zero,5c38 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    5c2c:	8009883a 	mov	r4,r16
    5c30:	0005b940 	call	5b94 <alt_alarm_stop>
    5c34:	00000706 	br	5c54 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    5c38:	80800217 	ldw	r2,8(r16)
    5c3c:	1885883a 	add	r2,r3,r2
    5c40:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    5c44:	d0e01317 	ldw	r3,-32692(gp)
    5c48:	10c0022e 	bgeu	r2,r3,5c54 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    5c4c:	00800044 	movi	r2,1
    5c50:	80800405 	stb	r2,16(r16)
    5c54:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5c58:	d0a00b04 	addi	r2,gp,-32724
    5c5c:	80bfe31e 	bne	r16,r2,5bec <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    5c60:	dfc00217 	ldw	ra,8(sp)
    5c64:	dc400117 	ldw	r17,4(sp)
    5c68:	dc000017 	ldw	r16,0(sp)
    5c6c:	dec00304 	addi	sp,sp,12
    5c70:	f800283a 	ret

00005c74 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    5c74:	000170fa 	wrctl	ienable,zero
}
    5c78:	f800283a 	ret

00005c7c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    5c7c:	defffb04 	addi	sp,sp,-20
    5c80:	dd000415 	stw	r20,16(sp)
    5c84:	dcc00315 	stw	r19,12(sp)
    5c88:	dc800215 	stw	r18,8(sp)
    5c8c:	dc400115 	stw	r17,4(sp)
    5c90:	dc000015 	stw	r16,0(sp)
    5c94:	dcc00517 	ldw	r19,20(sp)
    5c98:	da800617 	ldw	r10,24(sp)
    5c9c:	dd000717 	ldw	r20,28(sp)
  const alt_u8 * write_end = write_data + write_length;
    5ca0:	31df883a 	add	r15,r6,r7
  alt_u8 * read_end = read_data + read_length;
    5ca4:	9aa3883a 	add	r17,r19,r10
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    5ca8:	2025883a 	mov	r18,r4
    5cac:	00800044 	movi	r2,1
    5cb0:	1144983a 	sll	r2,r2,r5
    5cb4:	20800535 	stwio	r2,20(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    5cb8:	a080008c 	andi	r2,r20,2
    5cbc:	1000021e 	bne	r2,zero,5cc8 <alt_avalon_spi_command+0x4c>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    5cc0:	00810004 	movi	r2,1024
    5cc4:	20800335 	stwio	r2,12(r4)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    5cc8:	20800037 	ldwio	r2,0(r4)
    5ccc:	9817883a 	mov	r11,r19
    5cd0:	02000044 	movi	r8,1
    5cd4:	92400204 	addi	r9,r18,8
    5cd8:	03802004 	movi	r14,128
    5cdc:	037fffc4 	movi	r13,-1
    5ce0:	4019883a 	mov	r12,r8
    5ce4:	94000104 	addi	r16,r18,4
    5ce8:	00000106 	br	5cf0 <alt_avalon_spi_command+0x74>
    5cec:	000d883a 	mov	r6,zero
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    5cf0:	49400037 	ldwio	r5,0(r9)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    5cf4:	28c0100c 	andi	r3,r5,64
    5cf8:	18000126 	beq	r3,zero,5d00 <alt_avalon_spi_command+0x84>
    5cfc:	4000031e 	bne	r8,zero,5d0c <alt_avalon_spi_command+0x90>
    5d00:	2b84703a 	and	r2,r5,r14
    5d04:	103ffa26 	beq	r2,zero,5cf0 <alt_avalon_spi_command+0x74>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    5d08:	18000e26 	beq	r3,zero,5d44 <alt_avalon_spi_command+0xc8>
    5d0c:	02000b0e 	bge	zero,r8,5d3c <alt_avalon_spi_command+0xc0>
    {
      credits--;
    5d10:	4351883a 	add	r8,r8,r13

      if (write_data < write_end)
    5d14:	3bc0042e 	bgeu	r7,r15,5d28 <alt_avalon_spi_command+0xac>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    5d18:	38800003 	ldbu	r2,0(r7)
    5d1c:	3b0f883a 	add	r7,r7,r12
    5d20:	80800035 	stwio	r2,0(r16)
    5d24:	00000506 	br	5d3c <alt_avalon_spi_command+0xc0>
      else if (write_zeros > 0)
    5d28:	5800021e 	bne	r11,zero,5d34 <alt_avalon_spi_command+0xb8>
    5d2c:	023f0004 	movi	r8,-1024
    5d30:	00000206 	br	5d3c <alt_avalon_spi_command+0xc0>
      {
        write_zeros--;
    5d34:	5b57883a 	add	r11,r11,r13
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    5d38:	80000035 	stwio	zero,0(r16)
      }
      else
        credits = -1024;
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    5d3c:	2b84703a 	and	r2,r5,r14
    5d40:	103feb26 	beq	r2,zero,5cf0 <alt_avalon_spi_command+0x74>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    5d44:	20800037 	ldwio	r2,0(r4)

      if (read_ignore > 0)
    5d48:	30000426 	beq	r6,zero,5d5c <alt_avalon_spi_command+0xe0>
        read_ignore--;
    5d4c:	334d883a 	add	r6,r6,r13
      else
        *read_data++ = (alt_u8)rxdata;
      credits++;
    5d50:	4311883a 	add	r8,r8,r12

      if (read_ignore == 0 && read_data == read_end)
    5d54:	30000426 	beq	r6,zero,5d68 <alt_avalon_spi_command+0xec>
    5d58:	003fe506 	br	5cf0 <alt_avalon_spi_command+0x74>
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);

      if (read_ignore > 0)
        read_ignore--;
      else
        *read_data++ = (alt_u8)rxdata;
    5d5c:	50800005 	stb	r2,0(r10)
    5d60:	5315883a 	add	r10,r10,r12
      credits++;
    5d64:	4311883a 	add	r8,r8,r12

      if (read_ignore == 0 && read_data == read_end)
    5d68:	8abfe01e 	bne	r17,r10,5cec <alt_avalon_spi_command+0x70>
    5d6c:	00c00804 	movi	r3,32
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    5d70:	48800037 	ldwio	r2,0(r9)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    5d74:	10c4703a 	and	r2,r2,r3
    5d78:	103ffd26 	beq	r2,zero,5d70 <alt_avalon_spi_command+0xf4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    5d7c:	a080004c 	andi	r2,r20,1
    5d80:	1000011e 	bne	r2,zero,5d88 <alt_avalon_spi_command+0x10c>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    5d84:	90000335 	stwio	zero,12(r18)

  return read_length;
}
    5d88:	9805883a 	mov	r2,r19
    5d8c:	dd000417 	ldw	r20,16(sp)
    5d90:	dcc00317 	ldw	r19,12(sp)
    5d94:	dc800217 	ldw	r18,8(sp)
    5d98:	dc400117 	ldw	r17,4(sp)
    5d9c:	dc000017 	ldw	r16,0(sp)
    5da0:	dec00504 	addi	sp,sp,20
    5da4:	f800283a 	ret

00005da8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5da8:	defffb04 	addi	sp,sp,-20
    5dac:	dfc00415 	stw	ra,16(sp)
    5db0:	dcc00315 	stw	r19,12(sp)
    5db4:	dc800215 	stw	r18,8(sp)
    5db8:	dc400115 	stw	r17,4(sp)
    5dbc:	dc000015 	stw	r16,0(sp)
    5dc0:	2027883a 	mov	r19,r4
    5dc4:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    5dc8:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    5dcc:	00042780 	call	4278 <strlen>
    5dd0:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5dd4:	8c000726 	beq	r17,r16,5df4 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5dd8:	89000217 	ldw	r4,8(r17)
    5ddc:	980b883a 	mov	r5,r19
    5de0:	900d883a 	mov	r6,r18
    5de4:	0005f740 	call	5f74 <memcmp>
    5de8:	10000326 	beq	r2,zero,5df8 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    5dec:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5df0:	847ff91e 	bne	r16,r17,5dd8 <alt_find_dev+0x30>
    5df4:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    5df8:	8805883a 	mov	r2,r17
    5dfc:	dfc00417 	ldw	ra,16(sp)
    5e00:	dcc00317 	ldw	r19,12(sp)
    5e04:	dc800217 	ldw	r18,8(sp)
    5e08:	dc400117 	ldw	r17,4(sp)
    5e0c:	dc000017 	ldw	r16,0(sp)
    5e10:	dec00504 	addi	sp,sp,20
    5e14:	f800283a 	ret

00005e18 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5e18:	defff904 	addi	sp,sp,-28
    5e1c:	dfc00615 	stw	ra,24(sp)
    5e20:	dd400515 	stw	r21,20(sp)
    5e24:	dd000415 	stw	r20,16(sp)
    5e28:	dcc00315 	stw	r19,12(sp)
    5e2c:	dc800215 	stw	r18,8(sp)
    5e30:	dc400115 	stw	r17,4(sp)
    5e34:	dc000015 	stw	r16,0(sp)
    5e38:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5e3c:	00800034 	movhi	r2,0
    5e40:	109d0604 	addi	r2,r2,29720
    5e44:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5e48:	102b883a 	mov	r21,r2
    5e4c:	88801626 	beq	r17,r2,5ea8 <alt_find_file+0x90>
    5e50:	053fffc4 	movi	r20,-1
    5e54:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    5e58:	8c000217 	ldw	r16,8(r17)
    5e5c:	8009883a 	mov	r4,r16
    5e60:	00042780 	call	4278 <strlen>
    5e64:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    5e68:	8085883a 	add	r2,r16,r2
    5e6c:	1505883a 	add	r2,r2,r20
    5e70:	10800007 	ldb	r2,0(r2)
    5e74:	14c0011e 	bne	r2,r19,5e7c <alt_find_file+0x64>
    {
      len -= 1;
    5e78:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5e7c:	1c85883a 	add	r2,r3,r18
    5e80:	10800007 	ldb	r2,0(r2)
    5e84:	14c00126 	beq	r2,r19,5e8c <alt_find_file+0x74>
    5e88:	1000051e 	bne	r2,zero,5ea0 <alt_find_file+0x88>
    5e8c:	8009883a 	mov	r4,r16
    5e90:	900b883a 	mov	r5,r18
    5e94:	180d883a 	mov	r6,r3
    5e98:	0005f740 	call	5f74 <memcmp>
    5e9c:	10000326 	beq	r2,zero,5eac <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    5ea0:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5ea4:	8d7fec1e 	bne	r17,r21,5e58 <alt_find_file+0x40>
    5ea8:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    5eac:	8805883a 	mov	r2,r17
    5eb0:	dfc00617 	ldw	ra,24(sp)
    5eb4:	dd400517 	ldw	r21,20(sp)
    5eb8:	dd000417 	ldw	r20,16(sp)
    5ebc:	dcc00317 	ldw	r19,12(sp)
    5ec0:	dc800217 	ldw	r18,8(sp)
    5ec4:	dc400117 	ldw	r17,4(sp)
    5ec8:	dc000017 	ldw	r16,0(sp)
    5ecc:	dec00704 	addi	sp,sp,28
    5ed0:	f800283a 	ret

00005ed4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    5ed4:	defffb04 	addi	sp,sp,-20
    5ed8:	dfc00415 	stw	ra,16(sp)
    5edc:	dcc00315 	stw	r19,12(sp)
    5ee0:	dc800215 	stw	r18,8(sp)
    5ee4:	dc400115 	stw	r17,4(sp)
    5ee8:	dc000015 	stw	r16,0(sp)
    5eec:	2025883a 	mov	r18,r4
    5ef0:	0021883a 	mov	r16,zero
    5ef4:	00c00034 	movhi	r3,0
    5ef8:	18dca404 	addi	r3,r3,29328
    5efc:	04c00034 	movhi	r19,0
    5f00:	9cdd0a04 	addi	r19,r19,29736
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    5f04:	18800017 	ldw	r2,0(r3)
    5f08:	10000e1e 	bne	r2,zero,5f44 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
    5f0c:	8009883a 	mov	r4,r16
    5f10:	01400304 	movi	r5,12
    5f14:	0005fdc0 	call	5fdc <__mulsi3>
    5f18:	00c00034 	movhi	r3,0
    5f1c:	18dca404 	addi	r3,r3,29328
    5f20:	10c5883a 	add	r2,r2,r3
    5f24:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
    5f28:	98800017 	ldw	r2,0(r19)
    5f2c:	14000216 	blt	r2,r16,5f38 <alt_get_fd+0x64>
    5f30:	8005883a 	mov	r2,r16
    5f34:	00000806 	br	5f58 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    5f38:	9c000015 	stw	r16,0(r19)
    5f3c:	8005883a 	mov	r2,r16
    5f40:	00000506 	br	5f58 <alt_get_fd+0x84>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5f44:	84000044 	addi	r16,r16,1
    5f48:	18c00304 	addi	r3,r3,12
    5f4c:	00800804 	movi	r2,32
    5f50:	80bfec1e 	bne	r16,r2,5f04 <alt_get_fd+0x30>
    5f54:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    5f58:	dfc00417 	ldw	ra,16(sp)
    5f5c:	dcc00317 	ldw	r19,12(sp)
    5f60:	dc800217 	ldw	r18,8(sp)
    5f64:	dc400117 	ldw	r17,4(sp)
    5f68:	dc000017 	ldw	r16,0(sp)
    5f6c:	dec00504 	addi	sp,sp,20
    5f70:	f800283a 	ret

00005f74 <memcmp>:
    5f74:	31ffffc4 	addi	r7,r6,-1
    5f78:	3000061e 	bne	r6,zero,5f94 <memcmp+0x20>
    5f7c:	00000a06 	br	5fa8 <memcmp+0x34>
    5f80:	39ffffc4 	addi	r7,r7,-1
    5f84:	00bfffc4 	movi	r2,-1
    5f88:	21000044 	addi	r4,r4,1
    5f8c:	29400044 	addi	r5,r5,1
    5f90:	38800526 	beq	r7,r2,5fa8 <memcmp+0x34>
    5f94:	20c00003 	ldbu	r3,0(r4)
    5f98:	28800003 	ldbu	r2,0(r5)
    5f9c:	18bff826 	beq	r3,r2,5f80 <memcmp+0xc>
    5fa0:	1885c83a 	sub	r2,r3,r2
    5fa4:	f800283a 	ret
    5fa8:	0005883a 	mov	r2,zero
    5fac:	f800283a 	ret

00005fb0 <memcpy>:
    5fb0:	2011883a 	mov	r8,r4
    5fb4:	30000726 	beq	r6,zero,5fd4 <memcpy+0x24>
    5fb8:	000f883a 	mov	r7,zero
    5fbc:	29c5883a 	add	r2,r5,r7
    5fc0:	11000003 	ldbu	r4,0(r2)
    5fc4:	41c7883a 	add	r3,r8,r7
    5fc8:	39c00044 	addi	r7,r7,1
    5fcc:	19000005 	stb	r4,0(r3)
    5fd0:	39bffa1e 	bne	r7,r6,5fbc <memcpy+0xc>
    5fd4:	4005883a 	mov	r2,r8
    5fd8:	f800283a 	ret

00005fdc <__mulsi3>:
    5fdc:	20000a26 	beq	r4,zero,6008 <__mulsi3+0x2c>
    5fe0:	0007883a 	mov	r3,zero
    5fe4:	2080004c 	andi	r2,r4,1
    5fe8:	1005003a 	cmpeq	r2,r2,zero
    5fec:	2008d07a 	srli	r4,r4,1
    5ff0:	1000011e 	bne	r2,zero,5ff8 <__mulsi3+0x1c>
    5ff4:	1947883a 	add	r3,r3,r5
    5ff8:	294b883a 	add	r5,r5,r5
    5ffc:	203ff91e 	bne	r4,zero,5fe4 <__mulsi3+0x8>
    6000:	1805883a 	mov	r2,r3
    6004:	f800283a 	ret
    6008:	0007883a 	mov	r3,zero
    600c:	1805883a 	mov	r2,r3
    6010:	f800283a 	ret
